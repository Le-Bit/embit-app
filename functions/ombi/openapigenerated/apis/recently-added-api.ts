/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI } from "../base";
import { OmbiCoreModelsRecentlyAddedMovieModel } from "../models";
/**
 * RecentlyAddedApi - axios parameter creator
 * @export
 */
export const RecentlyAddedApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Returns the recently added movies for the past 7 days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RecentlyAddedMoviesGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/RecentlyAdded/movies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns the recently added tv shows for the past 7 days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RecentlyAddedTvGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/RecentlyAdded/tv`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns the recently added tv shows for the past 7 days and groups them by season
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RecentlyAddedTvGroupedGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/RecentlyAdded/tv/grouped`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RecentlyAddedApi - functional programming interface
 * @export
 */
export const RecentlyAddedApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Returns the recently added movies for the past 7 days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RecentlyAddedMoviesGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>>
    > {
      const localVarAxiosArgs = await RecentlyAddedApiAxiosParamCreator(
        configuration
      ).apiV1RecentlyAddedMoviesGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns the recently added tv shows for the past 7 days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RecentlyAddedTvGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>>
    > {
      const localVarAxiosArgs = await RecentlyAddedApiAxiosParamCreator(
        configuration
      ).apiV1RecentlyAddedTvGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns the recently added tv shows for the past 7 days and groups them by season
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RecentlyAddedTvGroupedGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>>
    > {
      const localVarAxiosArgs = await RecentlyAddedApiAxiosParamCreator(
        configuration
      ).apiV1RecentlyAddedTvGroupedGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * RecentlyAddedApi - factory interface
 * @export
 */
export const RecentlyAddedApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Returns the recently added movies for the past 7 days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RecentlyAddedMoviesGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>> {
      return RecentlyAddedApiFp(configuration)
        .apiV1RecentlyAddedMoviesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns the recently added tv shows for the past 7 days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RecentlyAddedTvGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>> {
      return RecentlyAddedApiFp(configuration)
        .apiV1RecentlyAddedTvGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns the recently added tv shows for the past 7 days and groups them by season
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RecentlyAddedTvGroupedGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>> {
      return RecentlyAddedApiFp(configuration)
        .apiV1RecentlyAddedTvGroupedGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RecentlyAddedApi - object-oriented interface
 * @export
 * @class RecentlyAddedApi
 * @extends {BaseAPI}
 */
export class RecentlyAddedApi extends BaseAPI {
  /**
   *
   * @summary Returns the recently added movies for the past 7 days
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecentlyAddedApi
   */
  public apiV1RecentlyAddedMoviesGet(options?: any) {
    return RecentlyAddedApiFp(this.configuration)
      .apiV1RecentlyAddedMoviesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns the recently added tv shows for the past 7 days
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecentlyAddedApi
   */
  public apiV1RecentlyAddedTvGet(options?: any) {
    return RecentlyAddedApiFp(this.configuration)
      .apiV1RecentlyAddedTvGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns the recently added tv shows for the past 7 days and groups them by season
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecentlyAddedApi
   */
  public apiV1RecentlyAddedTvGroupedGet(options?: any) {
    return RecentlyAddedApiFp(this.configuration)
      .apiV1RecentlyAddedTvGroupedGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
