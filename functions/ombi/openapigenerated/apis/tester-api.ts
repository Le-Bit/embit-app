/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI } from "../base";
import { OmbiCoreModelsTesterResultModel } from "../models";
import { OmbiCoreModelsUINewsletterNotificationViewModel } from "../models";
import { OmbiCoreModelsUIWhatsAppSettingsViewModel } from "../models";
import { OmbiCoreSettingsModelsExternalEmbyServers } from "../models";
import { OmbiCoreSettingsModelsExternalJellyfinServers } from "../models";
import { OmbiCoreSettingsModelsExternalPlexServers } from "../models";
import { OmbiModelsMobileNotificationTestViewModel } from "../models";
import { OmbiSettingsSettingsModelsExternalCouchPotatoSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalLidarrSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalRadarrSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalSickRageSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalSonarrSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsGotifySettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsPushbulletSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsPushoverSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsTelegramSettings } from "../models";
import { OmbiSettingsSettingsModelsNotificationsWebhookSettings } from "../models";
/**
 * TesterApi - axios parameter creator
 * @export
 */
export const TesterApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Checks if we can connect to CouchPotato with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterCouchpotatoPost: async (
      body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/couchpotato`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to discord using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterDiscordPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/discord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message via email to the admin email using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterEmailPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/email`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Checks if we can connect to Emby with the provided settings
     * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterEmbyPost: async (
      body?: OmbiCoreSettingsModelsExternalEmbyServers,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/emby`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to Gotify using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterGotifyPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsGotifySettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/gotify`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Checks if we can connect to Jellyfin with the provided settings
     * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterJellyfinPost: async (
      body?: OmbiCoreSettingsModelsExternalJellyfinServers,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/jellyfin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterLidarrPost: async (
      body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/lidarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to mattermost using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterMattermostPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/mattermost`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiModelsMobileNotificationTestViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterMobilePost: async (
      body?: OmbiModelsMobileNotificationTestViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/mobile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterNewsletterPost: async (
      body?: OmbiCoreModelsUINewsletterNotificationViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/newsletter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Checks if we can connect to Plex with the provided settings
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterPlexPost: async (
      body?: OmbiCoreSettingsModelsExternalPlexServers,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/plex`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to Pushbullet using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterPushbulletPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/pushbullet`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to Pushover using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterPushoverPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsPushoverSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/pushover`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Checks if we can connect to Radarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterRadarrPost: async (
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/radarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterSickragePost: async (
      body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/sickrage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterSlackPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/slack`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Checks if we can connect to Sonarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterSonarrPost: async (
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/sonarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to Telegram using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterTelegramPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsTelegramSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/telegram`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sends a test message to configured webhook using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterWebhookPost: async (
      body?: OmbiSettingsSettingsModelsNotificationsWebhookSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/webhook`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterWhatsappPost: async (
      body?: OmbiCoreModelsUIWhatsAppSettingsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Tester/whatsapp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TesterApi - functional programming interface
 * @export
 */
export const TesterApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Checks if we can connect to CouchPotato with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterCouchpotatoPost(
      body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterCouchpotatoPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to discord using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterDiscordPost(
      body?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterDiscordPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message via email to the admin email using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterEmailPost(
      body?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterEmailPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Checks if we can connect to Emby with the provided settings
     * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterEmbyPost(
      body?: OmbiCoreSettingsModelsExternalEmbyServers,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterEmbyPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to Gotify using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterGotifyPost(
      body?: OmbiSettingsSettingsModelsNotificationsGotifySettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterGotifyPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Checks if we can connect to Jellyfin with the provided settings
     * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterJellyfinPost(
      body?: OmbiCoreSettingsModelsExternalJellyfinServers,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterJellyfinPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterLidarrPost(
      body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsTesterResultModel>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterLidarrPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to mattermost using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterMattermostPost(
      body?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterMattermostPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiModelsMobileNotificationTestViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterMobilePost(
      body?: OmbiModelsMobileNotificationTestViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterMobilePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterNewsletterPost(
      body?: OmbiCoreModelsUINewsletterNotificationViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterNewsletterPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Checks if we can connect to Plex with the provided settings
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterPlexPost(
      body?: OmbiCoreSettingsModelsExternalPlexServers,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterPlexPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to Pushbullet using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterPushbulletPost(
      body?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterPushbulletPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to Pushover using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterPushoverPost(
      body?: OmbiSettingsSettingsModelsNotificationsPushoverSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterPushoverPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Checks if we can connect to Radarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterRadarrPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsTesterResultModel>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterRadarrPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterSickragePost(
      body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterSickragePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterSlackPost(
      body?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterSlackPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Checks if we can connect to Sonarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterSonarrPost(
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsTesterResultModel>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterSonarrPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to Telegram using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterTelegramPost(
      body?: OmbiSettingsSettingsModelsNotificationsTelegramSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterTelegramPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sends a test message to configured webhook using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterWebhookPost(
      body?: OmbiSettingsSettingsModelsNotificationsWebhookSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterWebhookPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TesterWhatsappPost(
      body?: OmbiCoreModelsUIWhatsAppSettingsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await TesterApiAxiosParamCreator(
        configuration
      ).apiV1TesterWhatsappPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * TesterApi - factory interface
 * @export
 */
export const TesterApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Checks if we can connect to CouchPotato with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterCouchpotatoPost(
      body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterCouchpotatoPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to discord using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterDiscordPost(
      body?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterDiscordPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message via email to the admin email using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterEmailPost(
      body?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterEmailPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Checks if we can connect to Emby with the provided settings
     * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterEmbyPost(
      body?: OmbiCoreSettingsModelsExternalEmbyServers,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterEmbyPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to Gotify using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterGotifyPost(
      body?: OmbiSettingsSettingsModelsNotificationsGotifySettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterGotifyPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Checks if we can connect to Jellyfin with the provided settings
     * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterJellyfinPost(
      body?: OmbiCoreSettingsModelsExternalJellyfinServers,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterJellyfinPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterLidarrPost(
      body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
      options?: any
    ): AxiosPromise<OmbiCoreModelsTesterResultModel> {
      return TesterApiFp(configuration)
        .apiV1TesterLidarrPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to mattermost using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterMattermostPost(
      body?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterMattermostPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiModelsMobileNotificationTestViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterMobilePost(
      body?: OmbiModelsMobileNotificationTestViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterMobilePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterNewsletterPost(
      body?: OmbiCoreModelsUINewsletterNotificationViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterNewsletterPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Checks if we can connect to Plex with the provided settings
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterPlexPost(
      body?: OmbiCoreSettingsModelsExternalPlexServers,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterPlexPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to Pushbullet using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterPushbulletPost(
      body?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterPushbulletPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to Pushover using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterPushoverPost(
      body?: OmbiSettingsSettingsModelsNotificationsPushoverSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterPushoverPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Checks if we can connect to Radarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterRadarrPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): AxiosPromise<OmbiCoreModelsTesterResultModel> {
      return TesterApiFp(configuration)
        .apiV1TesterRadarrPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterSickragePost(
      body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterSickragePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterSlackPost(
      body?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterSlackPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Checks if we can connect to Sonarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterSonarrPost(
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options?: any
    ): AxiosPromise<OmbiCoreModelsTesterResultModel> {
      return TesterApiFp(configuration)
        .apiV1TesterSonarrPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to Telegram using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterTelegramPost(
      body?: OmbiSettingsSettingsModelsNotificationsTelegramSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterTelegramPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sends a test message to configured webhook using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterWebhookPost(
      body?: OmbiSettingsSettingsModelsNotificationsWebhookSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterWebhookPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TesterWhatsappPost(
      body?: OmbiCoreModelsUIWhatsAppSettingsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return TesterApiFp(configuration)
        .apiV1TesterWhatsappPost(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TesterApi - object-oriented interface
 * @export
 * @class TesterApi
 * @extends {BaseAPI}
 */
export class TesterApi extends BaseAPI {
  /**
   *
   * @summary Checks if we can connect to CouchPotato with the provided settings
   * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterCouchpotatoPost(
    body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterCouchpotatoPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to discord using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterDiscordPost(
    body?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterDiscordPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message via email to the admin email using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterEmailPost(
    body?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterEmailPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Checks if we can connect to Emby with the provided settings
   * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterEmbyPost(
    body?: OmbiCoreSettingsModelsExternalEmbyServers,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterEmbyPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to Gotify using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterGotifyPost(
    body?: OmbiSettingsSettingsModelsNotificationsGotifySettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterGotifyPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Checks if we can connect to Jellyfin with the provided settings
   * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterJellyfinPost(
    body?: OmbiCoreSettingsModelsExternalJellyfinServers,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterJellyfinPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterLidarrPost(
    body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterLidarrPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to mattermost using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterMattermostPost(
    body?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterMattermostPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiModelsMobileNotificationTestViewModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterMobilePost(
    body?: OmbiModelsMobileNotificationTestViewModel,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterMobilePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterNewsletterPost(
    body?: OmbiCoreModelsUINewsletterNotificationViewModel,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterNewsletterPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Checks if we can connect to Plex with the provided settings
   * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterPlexPost(
    body?: OmbiCoreSettingsModelsExternalPlexServers,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterPlexPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to Pushbullet using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterPushbulletPost(
    body?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterPushbulletPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to Pushover using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterPushoverPost(
    body?: OmbiSettingsSettingsModelsNotificationsPushoverSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterPushoverPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Checks if we can connect to Radarr with the provided settings
   * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterRadarrPost(
    body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterRadarrPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to Slack using the provided settings
   * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterSickragePost(
    body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterSickragePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to Slack using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterSlackPost(
    body?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterSlackPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Checks if we can connect to Sonarr with the provided settings
   * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterSonarrPost(
    body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterSonarrPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to Telegram using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterTelegramPost(
    body?: OmbiSettingsSettingsModelsNotificationsTelegramSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterTelegramPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sends a test message to configured webhook using the provided settings
   * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterWebhookPost(
    body?: OmbiSettingsSettingsModelsNotificationsWebhookSettings,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterWebhookPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TesterApi
   */
  public apiV1TesterWhatsappPost(
    body?: OmbiCoreModelsUIWhatsAppSettingsViewModel,
    options?: any
  ) {
    return TesterApiFp(this.configuration)
      .apiV1TesterWhatsappPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
