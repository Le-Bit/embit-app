/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from "../base";
/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} logFileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemLogsDownloadLogFileNameGet: async (
      logFileName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'logFileName' is not null or undefined
      if (logFileName === null || logFileName === undefined) {
        throw new RequiredError(
          "logFileName",
          "Required parameter logFileName was null or undefined when calling apiV2SystemLogsDownloadLogFileNameGet."
        );
      }
      const localVarPath = `/api/v2/System/logs/download/{logFileName}`.replace(
        `{${"logFileName"}}`,
        encodeURIComponent(String(logFileName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemLogsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/System/logs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} logFileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemLogsLogFileNameGet: async (
      logFileName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'logFileName' is not null or undefined
      if (logFileName === null || logFileName === undefined) {
        throw new RequiredError(
          "logFileName",
          "Required parameter logFileName was null or undefined when calling apiV2SystemLogsLogFileNameGet."
        );
      }
      const localVarPath = `/api/v2/System/logs/{logFileName}`.replace(
        `{${"logFileName"}}`,
        encodeURIComponent(String(logFileName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemNewsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/System/news`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} logFileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemLogsDownloadLogFileNameGet(
      logFileName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await SystemApiAxiosParamCreator(
        configuration
      ).apiV2SystemLogsDownloadLogFileNameGet(logFileName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemLogsGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await SystemApiAxiosParamCreator(
        configuration
      ).apiV2SystemLogsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} logFileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemLogsLogFileNameGet(
      logFileName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await SystemApiAxiosParamCreator(
        configuration
      ).apiV2SystemLogsLogFileNameGet(logFileName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemNewsGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await SystemApiAxiosParamCreator(
        configuration
      ).apiV2SystemNewsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} logFileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemLogsDownloadLogFileNameGet(
      logFileName: string,
      options?: any
    ): AxiosPromise<void> {
      return SystemApiFp(configuration)
        .apiV2SystemLogsDownloadLogFileNameGet(logFileName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemLogsGet(options?: any): AxiosPromise<void> {
      return SystemApiFp(configuration)
        .apiV2SystemLogsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} logFileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemLogsLogFileNameGet(
      logFileName: string,
      options?: any
    ): AxiosPromise<void> {
      return SystemApiFp(configuration)
        .apiV2SystemLogsLogFileNameGet(logFileName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemNewsGet(options?: any): AxiosPromise<void> {
      return SystemApiFp(configuration)
        .apiV2SystemNewsGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
  /**
   *
   * @param {string} logFileName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public apiV2SystemLogsDownloadLogFileNameGet(
    logFileName: string,
    options?: any
  ) {
    return SystemApiFp(this.configuration)
      .apiV2SystemLogsDownloadLogFileNameGet(logFileName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public apiV2SystemLogsGet(options?: any) {
    return SystemApiFp(this.configuration)
      .apiV2SystemLogsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} logFileName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public apiV2SystemLogsLogFileNameGet(logFileName: string, options?: any) {
    return SystemApiFp(this.configuration)
      .apiV2SystemLogsLogFileNameGet(logFileName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  public apiV2SystemNewsGet(options?: any) {
    return SystemApiFp(this.configuration)
      .apiV2SystemNewsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
