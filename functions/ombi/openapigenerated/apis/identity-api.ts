/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from "../base";
import { OmbiCoreModelsUIClaimCheckboxes } from "../models";
import { OmbiCoreModelsUIUserViewModel } from "../models";
import { OmbiCoreModelsUIUserViewModelDropdown } from "../models";
import { OmbiModelsIdentityAddNotificationPreference } from "../models";
import { OmbiModelsIdentityCountryStreamingPreference } from "../models";
import { OmbiModelsIdentityIdentityResult } from "../models";
import { OmbiModelsIdentityUpdateLocalUserModel } from "../models";
import { OmbiModelsIdentityUserLanguage } from "../models";
import { OmbiStoreEntitiesUserNotificationPreferences } from "../models";
/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Gets all available claims in the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityClaimsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/claims`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets all users for dropdown purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityDropdownUsersGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/dropdown/Users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the current logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sets the current users language
     * @param {OmbiModelsIdentityUserLanguage} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityLanguagePost: async (
      body?: OmbiModelsIdentityUserLanguage,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/language`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary This is for the local user to change their details.
     * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityLocalPut: async (
      body?: OmbiModelsIdentityUpdateLocalUserModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/local`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNewsletterUnsubscribeUserIdGet: async (
      userId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          "userId",
          "Required parameter userId was null or undefined when calling apiV1IdentityNewsletterUnsubscribeUserIdGet."
        );
      }
      const localVarPath =
        `/api/v1/Identity/newsletter/unsubscribe/{userId}`.replace(
          `{${"userId"}}`,
          encodeURIComponent(String(userId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNotificationPreferencesPost: async (
      body?: Array<OmbiModelsIdentityAddNotificationPreference>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/NotificationPreferences`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNotificationpreferencesGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/notificationpreferences`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNotificationpreferencesUserIdGet: async (
      userId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          "userId",
          "Required parameter userId was null or undefined when calling apiV1IdentityNotificationpreferencesUserIdGet."
        );
      }
      const localVarPath =
        `/api/v1/Identity/notificationpreferences/{userId}`.replace(
          `{${"userId"}}`,
          encodeURIComponent(String(userId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityPost: async (
      body?: OmbiCoreModelsUIUserViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityPut: async (
      body?: OmbiCoreModelsUIUserViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns the supported country codes that we have streaming data for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityStreamingcountryGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/streamingcountry`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sets the current users country streaming preference
     * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityStreamingcountryPost: async (
      body?: OmbiModelsIdentityCountryStreamingPreference,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/streamingcountry`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the user.
     * @param {string} userId The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityUserIdDelete: async (
      userId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          "userId",
          "Required parameter userId was null or undefined when calling apiV1IdentityUserIdDelete."
        );
      }
      const localVarPath = `/api/v1/Identity/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the user by the user id.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityUserIdGet: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling apiV1IdentityUserIdGet."
        );
      }
      const localVarPath = `/api/v1/Identity/User/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets all users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityUsersGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/Users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiCoreModelsUIUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityWelcomeEmailPost: async (
      body?: OmbiCoreModelsUIUserViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Identity/welcomeEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Gets all available claims in the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityClaimsGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsUIClaimCheckboxes>>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityClaimsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets all users for dropdown purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityDropdownUsersGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsUIUserViewModelDropdown>>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityDropdownUsersGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the current logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIUserViewModel>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sets the current users language
     * @param {OmbiModelsIdentityUserLanguage} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityLanguagePost(
      body?: OmbiModelsIdentityUserLanguage,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityLanguagePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary This is for the local user to change their details.
     * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityLocalPut(
      body?: OmbiModelsIdentityUpdateLocalUserModel,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsIdentityIdentityResult>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityLocalPut(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityNewsletterUnsubscribeUserIdGet(
      userId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityNotificationPreferencesPost(
      body?: Array<OmbiModelsIdentityAddNotificationPreference>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityNotificationPreferencesPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityNotificationpreferencesGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiStoreEntitiesUserNotificationPreferences>>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityNotificationpreferencesGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityNotificationpreferencesUserIdGet(
      userId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiStoreEntitiesUserNotificationPreferences>>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityNotificationpreferencesUserIdGet(userId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Creates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityPost(
      body?: OmbiCoreModelsUIUserViewModel,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsIdentityIdentityResult>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Updates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityPut(
      body?: OmbiCoreModelsUIUserViewModel,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsIdentityIdentityResult>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityPut(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns the supported country codes that we have streaming data for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityStreamingcountryGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityStreamingcountryGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sets the current users country streaming preference
     * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityStreamingcountryPost(
      body?: OmbiModelsIdentityCountryStreamingPreference,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityStreamingcountryPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Deletes the user.
     * @param {string} userId The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityUserIdDelete(
      userId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsIdentityIdentityResult>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityUserIdDelete(userId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the user by the user id.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityUserIdGet(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIUserViewModel>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityUserIdGet(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets all users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityUsersGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsUIUserViewModel>>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityUsersGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiCoreModelsUIUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IdentityWelcomeEmailPost(
      body?: OmbiCoreModelsUIUserViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await IdentityApiAxiosParamCreator(
        configuration
      ).apiV1IdentityWelcomeEmailPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Gets all available claims in the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityClaimsGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsUIClaimCheckboxes>> {
      return IdentityApiFp(configuration)
        .apiV1IdentityClaimsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets all users for dropdown purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityDropdownUsersGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsUIUserViewModelDropdown>> {
      return IdentityApiFp(configuration)
        .apiV1IdentityDropdownUsersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the current logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIUserViewModel> {
      return IdentityApiFp(configuration)
        .apiV1IdentityGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sets the current users language
     * @param {OmbiModelsIdentityUserLanguage} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityLanguagePost(
      body?: OmbiModelsIdentityUserLanguage,
      options?: any
    ): AxiosPromise<void> {
      return IdentityApiFp(configuration)
        .apiV1IdentityLanguagePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary This is for the local user to change their details.
     * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityLocalPut(
      body?: OmbiModelsIdentityUpdateLocalUserModel,
      options?: any
    ): AxiosPromise<OmbiModelsIdentityIdentityResult> {
      return IdentityApiFp(configuration)
        .apiV1IdentityLocalPut(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNewsletterUnsubscribeUserIdGet(
      userId: string,
      options?: any
    ): AxiosPromise<void> {
      return IdentityApiFp(configuration)
        .apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNotificationPreferencesPost(
      body?: Array<OmbiModelsIdentityAddNotificationPreference>,
      options?: any
    ): AxiosPromise<void> {
      return IdentityApiFp(configuration)
        .apiV1IdentityNotificationPreferencesPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNotificationpreferencesGet(
      options?: any
    ): AxiosPromise<Array<OmbiStoreEntitiesUserNotificationPreferences>> {
      return IdentityApiFp(configuration)
        .apiV1IdentityNotificationpreferencesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityNotificationpreferencesUserIdGet(
      userId: string,
      options?: any
    ): AxiosPromise<Array<OmbiStoreEntitiesUserNotificationPreferences>> {
      return IdentityApiFp(configuration)
        .apiV1IdentityNotificationpreferencesUserIdGet(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Creates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityPost(
      body?: OmbiCoreModelsUIUserViewModel,
      options?: any
    ): AxiosPromise<OmbiModelsIdentityIdentityResult> {
      return IdentityApiFp(configuration)
        .apiV1IdentityPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Updates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityPut(
      body?: OmbiCoreModelsUIUserViewModel,
      options?: any
    ): AxiosPromise<OmbiModelsIdentityIdentityResult> {
      return IdentityApiFp(configuration)
        .apiV1IdentityPut(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns the supported country codes that we have streaming data for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityStreamingcountryGet(options?: any): AxiosPromise<void> {
      return IdentityApiFp(configuration)
        .apiV1IdentityStreamingcountryGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sets the current users country streaming preference
     * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityStreamingcountryPost(
      body?: OmbiModelsIdentityCountryStreamingPreference,
      options?: any
    ): AxiosPromise<void> {
      return IdentityApiFp(configuration)
        .apiV1IdentityStreamingcountryPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Deletes the user.
     * @param {string} userId The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityUserIdDelete(
      userId: string,
      options?: any
    ): AxiosPromise<OmbiModelsIdentityIdentityResult> {
      return IdentityApiFp(configuration)
        .apiV1IdentityUserIdDelete(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the user by the user id.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityUserIdGet(
      id: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIUserViewModel> {
      return IdentityApiFp(configuration)
        .apiV1IdentityUserIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets all users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityUsersGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsUIUserViewModel>> {
      return IdentityApiFp(configuration)
        .apiV1IdentityUsersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiCoreModelsUIUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityWelcomeEmailPost(
      body?: OmbiCoreModelsUIUserViewModel,
      options?: any
    ): AxiosPromise<void> {
      return IdentityApiFp(configuration)
        .apiV1IdentityWelcomeEmailPost(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
  /**
   *
   * @summary Gets all available claims in the system.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityClaimsGet(options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityClaimsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets all users for dropdown purposes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityDropdownUsersGet(options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityDropdownUsersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the current logged in user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityGet(options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sets the current users language
   * @param {OmbiModelsIdentityUserLanguage} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityLanguagePost(
    body?: OmbiModelsIdentityUserLanguage,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityLanguagePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary This is for the local user to change their details.
   * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityLocalPut(
    body?: OmbiModelsIdentityUpdateLocalUserModel,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityLocalPut(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityNewsletterUnsubscribeUserIdGet(
    userId: string,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityNotificationPreferencesPost(
    body?: Array<OmbiModelsIdentityAddNotificationPreference>,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityNotificationPreferencesPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityNotificationpreferencesGet(options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityNotificationpreferencesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityNotificationpreferencesUserIdGet(
    userId: string,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityNotificationpreferencesUserIdGet(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Creates the user.
   * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityPost(
    body?: OmbiCoreModelsUIUserViewModel,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Updates the user.
   * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityPut(body?: OmbiCoreModelsUIUserViewModel, options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityPut(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns the supported country codes that we have streaming data for
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityStreamingcountryGet(options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityStreamingcountryGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sets the current users country streaming preference
   * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityStreamingcountryPost(
    body?: OmbiModelsIdentityCountryStreamingPreference,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityStreamingcountryPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Deletes the user.
   * @param {string} userId The user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityUserIdDelete(userId: string, options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityUserIdDelete(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the user by the user id.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityUserIdGet(id: string, options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityUserIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets all users.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityUsersGet(options?: any) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityUsersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiCoreModelsUIUserViewModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public apiV1IdentityWelcomeEmailPost(
    body?: OmbiCoreModelsUIUserViewModel,
    options?: any
  ) {
    return IdentityApiFp(this.configuration)
      .apiV1IdentityWelcomeEmailPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
