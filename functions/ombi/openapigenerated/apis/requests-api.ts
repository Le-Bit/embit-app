/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { OmbiCoreEngineRequestEngineResult } from "../models";
import { OmbiCoreModelsRequestsMediaAdvancedOptions } from "../models";
import { OmbiCoreModelsRequestsTvRequestViewModelV2 } from "../models";
import { OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull } from "../models";
import { OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull } from "../models";
import { OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull } from "../models";
import { OmbiStoreEntitiesRequestType } from "../models";
/**
 * RequestsApi - axios parameter creator
 * @export
 */
export const RequestsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/album/available/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/album/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/album/denied/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumPendingCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/album/pending/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/album/processing/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieAdvancedoptionsPost: async (
      body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Requests/movie/advancedoptions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieAvailableCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/available/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/availble/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieCollectionCollectionIdPost: async (
      collectionId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'collectionId' is not null or undefined
      if (collectionId === null || collectionId === undefined) {
        throw new RequiredError(
          "collectionId",
          "Required parameter collectionId was null or undefined when calling apiV2RequestsMovieCollectionCollectionIdPost."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/collection/{collectionId}`.replace(
          `{${"collectionId"}}`,
          encodeURIComponent(String(collectionId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieDeniedCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/denied/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMoviePendingCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/pending/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieProcessingCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/processing/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the unavailable movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/movie/unavailable/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiStoreEntitiesRequestType} type
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsReprocessTypeRequestIdPost: async (
      type: OmbiStoreEntitiesRequestType,
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      if (type === null || type === undefined) {
        throw new RequiredError(
          "type",
          "Required parameter type was null or undefined when calling apiV2RequestsReprocessTypeRequestIdPost."
        );
      }
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV2RequestsReprocessTypeRequestIdPost."
        );
      }
      const localVarPath = `/api/v2/Requests/reprocess/{type}/{requestId}`
        .replace(`{${"type"}}`, encodeURIComponent(String(type)))
        .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvAdvancedoptionsPost: async (
      body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Requests/tv/advancedoptions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvAvailableCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/tv/available/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/tv/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvDeniedCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/tv/denied/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvPendingCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/tv/pending/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Requests a tv show/episode/season.
     * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvPost: async (
      body?: OmbiCoreModelsRequestsTvRequestViewModelV2,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Requests/tv`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvProcessingCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/tv/processing/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets unavailable Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvUnavailableCountPositionSortSortOrderGet: async (
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'count' is not null or undefined
      if (count === null || count === undefined) {
        throw new RequiredError(
          "count",
          "Required parameter count was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'position' is not null or undefined
      if (position === null || position === undefined) {
        throw new RequiredError(
          "position",
          "Required parameter position was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sort' is not null or undefined
      if (sort === null || sort === undefined) {
        throw new RequiredError(
          "sort",
          "Required parameter sort was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet."
        );
      }
      // verify required parameter 'sortOrder' is not null or undefined
      if (sortOrder === null || sortOrder === undefined) {
        throw new RequiredError(
          "sortOrder",
          "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet."
        );
      }
      const localVarPath =
        `/api/v2/Requests/tv/unavailable/{count}/{position}/{sort}/{sortOrder}`
          .replace(`{${"count"}}`, encodeURIComponent(String(count)))
          .replace(`{${"position"}}`, encodeURIComponent(String(position)))
          .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
          .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RequestsApi - functional programming interface
 * @export
 */
export const RequestsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsAlbumCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsAlbumCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieAdvancedoptionsPost(
      body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreEngineRequestEngineResult>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieAdvancedoptionsPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieCollectionCollectionIdPost(
      collectionId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreEngineRequestEngineResult>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMoviePendingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMoviePendingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the unavailable movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiStoreEntitiesRequestType} type
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsReprocessTypeRequestIdPost(
      type: OmbiStoreEntitiesRequestType,
      requestId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvAdvancedoptionsPost(
      body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreEngineRequestEngineResult>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvAdvancedoptionsPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvAvailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvAvailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvDeniedCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvDeniedCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvPendingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvPendingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Requests a tv show/episode/season.
     * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvPost(
      body?: OmbiCoreModelsRequestsTvRequestViewModelV2,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreEngineRequestEngineResult>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvProcessingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvProcessingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets unavailable Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull>
    > {
      const localVarAxiosArgs = await RequestsApiAxiosParamCreator(
        configuration
      ).apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * RequestsApi - factory interface
 * @export
 */
export const RequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsAlbumCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieAdvancedoptionsPost(
      body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
      options?: any
    ): AxiosPromise<OmbiCoreEngineRequestEngineResult> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieAdvancedoptionsPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieCollectionCollectionIdPost(
      collectionId: number,
      options?: any
    ): AxiosPromise<OmbiCoreEngineRequestEngineResult> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMoviePendingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMoviePendingCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the unavailable movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiStoreEntitiesRequestType} type
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsReprocessTypeRequestIdPost(
      type: OmbiStoreEntitiesRequestType,
      requestId: number,
      options?: any
    ): AxiosPromise<void> {
      return RequestsApiFp(configuration)
        .apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvAdvancedoptionsPost(
      body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
      options?: any
    ): AxiosPromise<OmbiCoreEngineRequestEngineResult> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvAdvancedoptionsPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvAvailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvAvailableCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvDeniedCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvDeniedCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvPendingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvPendingCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Requests a tv show/episode/season.
     * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvPost(
      body?: OmbiCoreModelsRequestsTvRequestViewModelV2,
      options?: any
    ): AxiosPromise<OmbiCoreEngineRequestEngineResult> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvProcessingCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvProcessingCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets unavailable Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(
      count: number,
      position: number,
      sort: string,
      sortOrder: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsChildRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
      return RequestsApiFp(configuration)
        .apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(
          count,
          position,
          sort,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RequestsApi - object-oriented interface
 * @export
 * @class RequestsApi
 * @extends {BaseAPI}
 */
export class RequestsApi extends BaseAPI {
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsAlbumCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsAlbumCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieAdvancedoptionsPost(
    body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieAdvancedoptionsPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} collectionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieCollectionCollectionIdPost(
    collectionId: number,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets movie requests.
   * @param {number} count The count of items you want to return. e.g. 30
   * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
   * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
   * @param {string} sortOrder asc or desc
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMoviePendingCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMoviePendingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the unavailable movie requests.
   * @param {number} count The count of items you want to return. e.g. 30
   * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
   * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
   * @param {string} sortOrder asc or desc
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiStoreEntitiesRequestType} type
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsReprocessTypeRequestIdPost(
    type: OmbiStoreEntitiesRequestType,
    requestId: number,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvAdvancedoptionsPost(
    body?: OmbiCoreModelsRequestsMediaAdvancedOptions,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvAdvancedoptionsPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvAvailableCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvAvailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets Tv requests.
   * @param {number} count The count of items you want to return. e.g. 30
   * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
   * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
   * @param {string} sortOrder asc or desc
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvDeniedCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvDeniedCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvPendingCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvPendingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Requests a tv show/episode/season.
   * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvPost(
    body?: OmbiCoreModelsRequestsTvRequestViewModelV2,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} count
   * @param {number} position
   * @param {string} sort
   * @param {string} sortOrder
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvProcessingCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvProcessingCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets unavailable Tv requests.
   * @param {number} count The count of items you want to return. e.g. 30
   * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
   * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
   * @param {string} sortOrder asc or desc
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RequestsApi
   */
  public apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(
    count: number,
    position: number,
    sort: string,
    sortOrder: string,
    options?: any
  ) {
    return RequestsApiFp(this.configuration)
      .apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(
        count,
        position,
        sort,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
