/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from "../base";
import { OmbiApiRottenTomatoesModelsMovieRatings } from "../models";
import { OmbiApiRottenTomatoesModelsTvRatings } from "../models";
import { OmbiApiTheMovieDbModelsActorCredits } from "../models";
import { OmbiApiTheMovieDbModelsDiscoverModel } from "../models";
import { OmbiCoreModelsSearchSearchAlbumViewModel } from "../models";
import { OmbiCoreModelsSearchSearchArtistViewModel } from "../models";
import { OmbiCoreModelsSearchSearchMovieViewModel } from "../models";
import { OmbiCoreModelsSearchSearchTvShowViewModel } from "../models";
import { OmbiCoreModelsSearchV2MovieCollectionsViewModel } from "../models";
import { OmbiCoreModelsSearchV2MovieFullInfoViewModel } from "../models";
import { OmbiCoreModelsSearchV2MultiSearchFilter } from "../models";
import { OmbiCoreModelsSearchV2MultiSearchResult } from "../models";
import { OmbiCoreModelsSearchV2MusicAlbumArt } from "../models";
import { OmbiCoreModelsSearchV2MusicArtistInformation } from "../models";
import { OmbiCoreModelsSearchV2MusicReleaseGroup } from "../models";
import { OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel } from "../models";
import { OmbiCoreModelsSearchV2StreamingData } from "../models";
import { OmbiModelsSearchActorModel } from "../models";
import { OmbiModelsSearchMovieExtraInfoRefineModel } from "../models";
import { OmbiModelsSearchMovieRefineModel } from "../models";
import { OmbiModelsSimilarMoviesRefineModel } from "../models";
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Searches for movies by a certain actor.
     * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieActorPost: async (
      body?: OmbiModelsSearchActorModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie/actor`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieInfoPost: async (
      body?: OmbiModelsSearchMovieExtraInfoRefineModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {number} theMovieDbId The movie database identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieInfoTheMovieDbIdGet: async (
      theMovieDbId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'theMovieDbId' is not null or undefined
      if (theMovieDbId === null || theMovieDbId === undefined) {
        throw new RequiredError(
          "theMovieDbId",
          "Required parameter theMovieDbId was null or undefined when calling apiV1SearchMovieInfoTheMovieDbIdGet."
        );
      }
      const localVarPath = `/api/v1/Search/movie/info/{theMovieDbId}`.replace(
        `{${"theMovieDbId"}}`,
        encodeURIComponent(String(theMovieDbId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Retuns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieNowplayingGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie/nowplaying`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMoviePopularGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie/popular`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMoviePost: async (
      body?: OmbiModelsSearchMovieRefineModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieSearchTermGet: async (
      searchTerm: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchTerm' is not null or undefined
      if (searchTerm === null || searchTerm === undefined) {
        throw new RequiredError(
          "searchTerm",
          "Required parameter searchTerm was null or undefined when calling apiV1SearchMovieSearchTermGet."
        );
      }
      const localVarPath = `/api/v1/Search/movie/{searchTerm}`.replace(
        `{${"searchTerm"}}`,
        encodeURIComponent(String(searchTerm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieSimilarPost: async (
      body?: OmbiModelsSimilarMoviesRefineModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie/similar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {number} theMovieDbId ID of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieTheMovieDbIdSimilarGet: async (
      theMovieDbId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'theMovieDbId' is not null or undefined
      if (theMovieDbId === null || theMovieDbId === undefined) {
        throw new RequiredError(
          "theMovieDbId",
          "Required parameter theMovieDbId was null or undefined when calling apiV1SearchMovieTheMovieDbIdSimilarGet."
        );
      }
      const localVarPath =
        `/api/v1/Search/movie/{theMovieDbId}/similar`.replace(
          `{${"theMovieDbId"}}`,
          encodeURIComponent(String(theMovieDbId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieTopratedGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie/toprated`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieUpcomingGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/movie/upcoming`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information specified by the foreignAlbumId passed in
     * @param {string} foreignAlbumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicAlbumInfoForeignAlbumIdGet: async (
      foreignAlbumId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'foreignAlbumId' is not null or undefined
      if (foreignAlbumId === null || foreignAlbumId === undefined) {
        throw new RequiredError(
          "foreignAlbumId",
          "Required parameter foreignAlbumId was null or undefined when calling apiV1SearchMusicAlbumInfoForeignAlbumIdGet."
        );
      }
      const localVarPath =
        `/api/v1/Search/music/album/info/{foreignAlbumId}`.replace(
          `{${"foreignAlbumId"}}`,
          encodeURIComponent(String(foreignAlbumId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicAlbumSearchTermGet: async (
      searchTerm: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchTerm' is not null or undefined
      if (searchTerm === null || searchTerm === undefined) {
        throw new RequiredError(
          "searchTerm",
          "Required parameter searchTerm was null or undefined when calling apiV1SearchMusicAlbumSearchTermGet."
        );
      }
      const localVarPath = `/api/v1/Search/music/album/{searchTerm}`.replace(
        `{${"searchTerm"}}`,
        encodeURIComponent(String(searchTerm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns all albums for the artist using the ForeignArtistId
     * @param {string} foreignArtistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicArtistAlbumForeignArtistIdGet: async (
      foreignArtistId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'foreignArtistId' is not null or undefined
      if (foreignArtistId === null || foreignArtistId === undefined) {
        throw new RequiredError(
          "foreignArtistId",
          "Required parameter foreignArtistId was null or undefined when calling apiV1SearchMusicArtistAlbumForeignArtistIdGet."
        );
      }
      const localVarPath =
        `/api/v1/Search/music/artist/album/{foreignArtistId}`.replace(
          `{${"foreignArtistId"}}`,
          encodeURIComponent(String(foreignArtistId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the artist information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicArtistSearchTermGet: async (
      searchTerm: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchTerm' is not null or undefined
      if (searchTerm === null || searchTerm === undefined) {
        throw new RequiredError(
          "searchTerm",
          "Required parameter searchTerm was null or undefined when calling apiV1SearchMusicArtistSearchTermGet."
        );
      }
      const localVarPath = `/api/v1/Search/music/artist/{searchTerm}`.replace(
        `{${"searchTerm"}}`,
        encodeURIComponent(String(searchTerm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticiplateds tv shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvAnticipatedGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/tv/anticipated`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TvMaze as the Provider
     * @summary Gets extra show information.
     * @param {string} tvdbId The TVDB identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvInfoTvdbIdGet: async (
      tvdbId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tvdbId' is not null or undefined
      if (tvdbId === null || tvdbId === undefined) {
        throw new RequiredError(
          "tvdbId",
          "Required parameter tvdbId was null or undefined when calling apiV1SearchTvInfoTvdbIdGet."
        );
      }
      const localVarPath = `/api/v1/Search/tv/info/{tvdbId}`.replace(
        `{${"tvdbId"}}`,
        encodeURIComponent(String(tvdbId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvMostwatchedGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/tv/mostwatched`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvPopularGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/tv/popular`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TvMaze as the Provider
     * @summary Searches for a Tv Show.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvSearchTermGet: async (
      searchTerm: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchTerm' is not null or undefined
      if (searchTerm === null || searchTerm === undefined) {
        throw new RequiredError(
          "searchTerm",
          "Required parameter searchTerm was null or undefined when calling apiV1SearchTvSearchTermGet."
        );
      }
      const localVarPath = `/api/v1/Search/tv/{searchTerm}`.replace(
        `{${"searchTerm"}}`,
        encodeURIComponent(String(searchTerm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvTrendingGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Search/tv/trending`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns all the movies that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchActorActorIdMovieGet: async (
      actorId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'actorId' is not null or undefined
      if (actorId === null || actorId === undefined) {
        throw new RequiredError(
          "actorId",
          "Required parameter actorId was null or undefined when calling apiV2SearchActorActorIdMovieGet."
        );
      }
      const localVarPath = `/api/v2/Search/actor/{actorId}/movie`.replace(
        `{${"actorId"}}`,
        encodeURIComponent(String(actorId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns all the tv shows that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchActorActorIdTvGet: async (
      actorId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'actorId' is not null or undefined
      if (actorId === null || actorId === undefined) {
        throw new RequiredError(
          "actorId",
          "Required parameter actorId was null or undefined when calling apiV2SearchActorActorIdTvGet."
        );
      }
      const localVarPath = `/api/v2/Search/actor/{actorId}/tv`.replace(
        `{${"actorId"}}`,
        encodeURIComponent(String(actorId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Advanced Searched Media using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost: async (
      currentPosition: number,
      amountToLoad: number,
      body?: OmbiApiTheMovieDbModelsDiscoverModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost."
        );
      }
      const localVarPath =
        `/api/v2/Search/advancedSearch/movie/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} albumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchArtistAlbumAlbumIdGet: async (
      albumId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'albumId' is not null or undefined
      if (albumId === null || albumId === undefined) {
        throw new RequiredError(
          "albumId",
          "Required parameter albumId was null or undefined when calling apiV2SearchArtistAlbumAlbumIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/artist/album/{albumId}`.replace(
        `{${"albumId"}}`,
        encodeURIComponent(String(albumId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} artistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchArtistArtistIdGet: async (
      artistId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'artistId' is not null or undefined
      if (artistId === null || artistId === undefined) {
        throw new RequiredError(
          "artistId",
          "Required parameter artistId was null or undefined when calling apiV2SearchArtistArtistIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/artist/{artistId}`.replace(
        `{${"artistId"}}`,
        encodeURIComponent(String(artistId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchArtistRequestRequestIdGet: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV2SearchArtistRequestRequestIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/artist/request/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns basic information about the provided collection
     * @param {number} collectionId The collection id from TheMovieDb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieCollectionCollectionIdGet: async (
      collectionId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'collectionId' is not null or undefined
      if (collectionId === null || collectionId === undefined) {
        throw new RequiredError(
          "collectionId",
          "Required parameter collectionId was null or undefined when calling apiV2SearchMovieCollectionCollectionIdGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/movie/collection/{collectionId}`.replace(
          `{${"collectionId"}}`,
          encodeURIComponent(String(collectionId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} imdbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieImdbImdbidGet: async (
      imdbId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'imdbId' is not null or undefined
      if (imdbId === null || imdbId === undefined) {
        throw new RequiredError(
          "imdbId",
          "Required parameter imdbId was null or undefined when calling apiV2SearchMovieImdbImdbidGet."
        );
      }
      const localVarPath = `/api/v2/Search/movie/imdb/{imdbid}`.replace(
        `{${"imdbId"}}`,
        encodeURIComponent(String(imdbId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} movieDbId The MovieDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieMovieDbIdGet: async (
      movieDbId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'movieDbId' is not null or undefined
      if (movieDbId === null || movieDbId === undefined) {
        throw new RequiredError(
          "movieDbId",
          "Required parameter movieDbId was null or undefined when calling apiV2SearchMovieMovieDbIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/movie/{movieDbId}`.replace(
        `{${"movieDbId"}}`,
        encodeURIComponent(String(movieDbId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/movie/nowplaying/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieNowplayingGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Search/movie/nowplaying`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMoviePopularCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchMoviePopularCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchMoviePopularCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/movie/popular/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMoviePopularGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Search/movie/popular`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieRequestRequestIdGet: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV2SearchMovieRequestRequestIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/movie/request/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Movies using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/movie/requested/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Seasonal Movies
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/movie/seasonal/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieSimilarPost: async (
      body?: OmbiModelsSimilarMoviesRefineModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Search/movie/similar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/movie/toprated/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieTopratedGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Search/movie/toprated`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/movie/upcoming/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieUpcomingGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/Search/movie/upcoming`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
     * @summary Returns search results for both TV and Movies
     * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
     * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMultiSearchTermPost: async (
      searchTerm: string,
      body?: OmbiCoreModelsSearchV2MultiSearchFilter,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'searchTerm' is not null or undefined
      if (searchTerm === null || searchTerm === undefined) {
        throw new RequiredError(
          "searchTerm",
          "Required parameter searchTerm was null or undefined when calling apiV2SearchMultiSearchTermPost."
        );
      }
      const localVarPath = `/api/v2/Search/multi/{searchTerm}`.replace(
        `{${"searchTerm"}}`,
        encodeURIComponent(String(searchTerm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchRatingsMovieNameYearGet: async (
      name: string,
      year: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling apiV2SearchRatingsMovieNameYearGet."
        );
      }
      // verify required parameter 'year' is not null or undefined
      if (year === null || year === undefined) {
        throw new RequiredError(
          "year",
          "Required parameter year was null or undefined when calling apiV2SearchRatingsMovieNameYearGet."
        );
      }
      const localVarPath = `/api/v2/Search/ratings/movie/{name}/{year}`
        .replace(`{${"name"}}`, encodeURIComponent(String(name)))
        .replace(`{${"year"}}`, encodeURIComponent(String(year)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchRatingsTvNameYearGet: async (
      name: string,
      year: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling apiV2SearchRatingsTvNameYearGet."
        );
      }
      // verify required parameter 'year' is not null or undefined
      if (year === null || year === undefined) {
        throw new RequiredError(
          "year",
          "Required parameter year was null or undefined when calling apiV2SearchRatingsTvNameYearGet."
        );
      }
      const localVarPath = `/api/v2/Search/ratings/tv/{name}/{year}`
        .replace(`{${"name"}}`, encodeURIComponent(String(name)))
        .replace(`{${"year"}}`, encodeURIComponent(String(year)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} musicBrainzId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchReleasegroupartMusicBrainzIdGet: async (
      musicBrainzId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'musicBrainzId' is not null or undefined
      if (musicBrainzId === null || musicBrainzId === undefined) {
        throw new RequiredError(
          "musicBrainzId",
          "Required parameter musicBrainzId was null or undefined when calling apiV2SearchReleasegroupartMusicBrainzIdGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/releasegroupart/{musicBrainzId}`.replace(
          `{${"musicBrainzId"}}`,
          encodeURIComponent(String(musicBrainzId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} movieDBId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchStreamMovieMovieDbIdGet: async (
      movieDBId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'movieDBId' is not null or undefined
      if (movieDBId === null || movieDBId === undefined) {
        throw new RequiredError(
          "movieDBId",
          "Required parameter movieDBId was null or undefined when calling apiV2SearchStreamMovieMovieDbIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/stream/movie/{movieDbId}`.replace(
        `{${"movieDBId"}}`,
        encodeURIComponent(String(movieDBId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchStreamTvMovieDbIdGet: async (
      movieDbId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'movieDbId' is not null or undefined
      if (movieDbId === null || movieDbId === undefined) {
        throw new RequiredError(
          "movieDbId",
          "Required parameter movieDbId was null or undefined when calling apiV2SearchStreamTvMovieDbIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/stream/tv/{movieDbId}`.replace(
        `{${"movieDbId"}}`,
        encodeURIComponent(String(movieDbId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticipated tv shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/tv/anticipated/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/tv/mostwatched/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns details for a single show
     * @param {string} moviedbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvMoviedbMoviedbidGet: async (
      moviedbid: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'moviedbid' is not null or undefined
      if (moviedbid === null || moviedbid === undefined) {
        throw new RequiredError(
          "moviedbid",
          "Required parameter moviedbid was null or undefined when calling apiV2SearchTvMoviedbMoviedbidGet."
        );
      }
      const localVarPath = `/api/v2/Search/tv/moviedb/{moviedbid}`.replace(
        `{${"moviedbid"}}`,
        encodeURIComponent(String(moviedbid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvPopularCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchTvPopularCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvPopularCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/tv/popular/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvRequestRequestIdGet: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV2SearchTvRequestRequestIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/tv/request/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Tv using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvRequestedCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchTvRequestedCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvRequestedCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/tv/requested/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvTrendingCurrentPositionAmountToLoadGet: async (
      currentPosition: number,
      amountToLoad: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'currentPosition' is not null or undefined
      if (currentPosition === null || currentPosition === undefined) {
        throw new RequiredError(
          "currentPosition",
          "Required parameter currentPosition was null or undefined when calling apiV2SearchTvTrendingCurrentPositionAmountToLoadGet."
        );
      }
      // verify required parameter 'amountToLoad' is not null or undefined
      if (amountToLoad === null || amountToLoad === undefined) {
        throw new RequiredError(
          "amountToLoad",
          "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvTrendingCurrentPositionAmountToLoadGet."
        );
      }
      const localVarPath =
        `/api/v2/Search/tv/trending/{currentPosition}/{amountToLoad}`
          .replace(
            `{${"currentPosition"}}`,
            encodeURIComponent(String(currentPosition))
          )
          .replace(
            `{${"amountToLoad"}}`,
            encodeURIComponent(String(amountToLoad))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {string} tvdbid The TVDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvTvdbIdGet: async (
      tvdbid: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tvdbid' is not null or undefined
      if (tvdbid === null || tvdbid === undefined) {
        throw new RequiredError(
          "tvdbid",
          "Required parameter tvdbid was null or undefined when calling apiV2SearchTvTvdbIdGet."
        );
      }
      const localVarPath = `/api/v2/Search/tv/{tvdbId}`.replace(
        `{${"tvdbid"}}`,
        encodeURIComponent(String(tvdbid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Searches for movies by a certain actor.
     * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieActorPost(
      body?: OmbiModelsSearchActorModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieActorPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieInfoPost(
      body?: OmbiModelsSearchMovieExtraInfoRefineModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieInfoPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {number} theMovieDbId The movie database identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieInfoTheMovieDbIdGet(
      theMovieDbId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchSearchMovieViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Retuns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieNowplayingGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieNowplayingGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMoviePopularGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMoviePopularGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMoviePost(
      body?: OmbiModelsSearchMovieRefineModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMoviePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieSearchTermGet(
      searchTerm: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieSearchTermGet(searchTerm, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieSimilarPost(
      body?: OmbiModelsSimilarMoviesRefineModel,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieSimilarPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {number} theMovieDbId ID of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieTheMovieDbIdSimilarGet(
      theMovieDbId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieTopratedGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieTopratedGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMovieUpcomingGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMovieUpcomingGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information specified by the foreignAlbumId passed in
     * @param {string} foreignAlbumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMusicAlbumInfoForeignAlbumIdGet(
      foreignAlbumId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchSearchAlbumViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMusicAlbumSearchTermGet(
      searchTerm: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchAlbumViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMusicAlbumSearchTermGet(searchTerm, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns all albums for the artist using the ForeignArtistId
     * @param {string} foreignArtistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMusicArtistAlbumForeignArtistIdGet(
      foreignArtistId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchAlbumViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the artist information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchMusicArtistSearchTermGet(
      searchTerm: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchArtistViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchMusicArtistSearchTermGet(searchTerm, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticiplateds tv shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchTvAnticipatedGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchTvAnticipatedGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TvMaze as the Provider
     * @summary Gets extra show information.
     * @param {string} tvdbId The TVDB identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchTvInfoTvdbIdGet(
      tvdbId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchSearchTvShowViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchTvInfoTvdbIdGet(tvdbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchTvMostwatchedGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchTvMostwatchedGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchTvPopularGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchTvPopularGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TvMaze as the Provider
     * @summary Searches for a Tv Show.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchTvSearchTermGet(
      searchTerm: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchTvSearchTermGet(searchTerm, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchTvTrendingGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV1SearchTvTrendingGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns all the movies that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchActorActorIdMovieGet(
      actorId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiApiTheMovieDbModelsActorCredits>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchActorActorIdMovieGet(actorId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns all the tv shows that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchActorActorIdTvGet(
      actorId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiApiTheMovieDbModelsActorCredits>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchActorActorIdTvGet(actorId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Advanced Searched Media using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(
      currentPosition: number,
      amountToLoad: number,
      body?: OmbiApiTheMovieDbModelsDiscoverModel,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(
        currentPosition,
        amountToLoad,
        body,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} albumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchArtistAlbumAlbumIdGet(
      albumId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MusicReleaseGroup>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchArtistAlbumAlbumIdGet(albumId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} artistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchArtistArtistIdGet(
      artistId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MusicArtistInformation>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchArtistArtistIdGet(artistId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchArtistRequestRequestIdGet(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MusicArtistInformation>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchArtistRequestRequestIdGet(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns basic information about the provided collection
     * @param {number} collectionId The collection id from TheMovieDb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieCollectionCollectionIdGet(
      collectionId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MovieCollectionsViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieCollectionCollectionIdGet(collectionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} imdbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieImdbImdbidGet(
      imdbId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MovieFullInfoViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieImdbImdbidGet(imdbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} movieDbId The MovieDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieMovieDbIdGet(
      movieDbId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MovieFullInfoViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieMovieDbIdGet(movieDbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieNowplayingGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieNowplayingGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMoviePopularGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMoviePopularGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieRequestRequestIdGet(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MovieFullInfoViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieRequestRequestIdGet(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Movies using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Seasonal Movies
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieSimilarPost(
      body?: OmbiModelsSimilarMoviesRefineModel,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieSimilarPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieTopratedGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieTopratedGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMovieUpcomingGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMovieUpcomingGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
     * @summary Returns search results for both TV and Movies
     * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
     * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchMultiSearchTermPost(
      searchTerm: string,
      body?: OmbiCoreModelsSearchV2MultiSearchFilter,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchV2MultiSearchResult>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchMultiSearchTermPost(searchTerm, body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchRatingsMovieNameYearGet(
      name: string,
      year: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiApiRottenTomatoesModelsMovieRatings>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchRatingsMovieNameYearGet(name, year, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchRatingsTvNameYearGet(
      name: string,
      year: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiApiRottenTomatoesModelsTvRatings>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchRatingsTvNameYearGet(name, year, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} musicBrainzId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchReleasegroupartMusicBrainzIdGet(
      musicBrainzId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2MusicAlbumArt>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} movieDBId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchStreamMovieMovieDbIdGet(
      movieDBId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchV2StreamingData>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchStreamTvMovieDbIdGet(
      movieDbId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchV2StreamingData>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchStreamTvMovieDbIdGet(movieDbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticipated tv shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns details for a single show
     * @param {string} moviedbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvMoviedbMoviedbidGet(
      moviedbid: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvPopularCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvPopularCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvRequestRequestIdGet(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvRequestRequestIdGet(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Tv using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<
        Array<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel>
      >
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {string} tvdbid The TVDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SearchTvTvdbIdGet(
      tvdbid: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel>
    > {
      const localVarAxiosArgs = await SearchApiAxiosParamCreator(
        configuration
      ).apiV2SearchTvTvdbIdGet(tvdbid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Searches for movies by a certain actor.
     * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieActorPost(
      body?: OmbiModelsSearchActorModel,
      options?: any
    ): AxiosPromise<void> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieActorPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieInfoPost(
      body?: OmbiModelsSearchMovieExtraInfoRefineModel,
      options?: any
    ): AxiosPromise<void> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieInfoPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {number} theMovieDbId The movie database identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieInfoTheMovieDbIdGet(
      theMovieDbId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchSearchMovieViewModel> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Retuns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieNowplayingGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieNowplayingGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMoviePopularGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMoviePopularGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMoviePost(
      body?: OmbiModelsSearchMovieRefineModel,
      options?: any
    ): AxiosPromise<void> {
      return SearchApiFp(configuration)
        .apiV1SearchMoviePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieSearchTermGet(
      searchTerm: string,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieSearchTermGet(searchTerm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieSimilarPost(
      body?: OmbiModelsSimilarMoviesRefineModel,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieSimilarPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {number} theMovieDbId ID of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieTheMovieDbIdSimilarGet(
      theMovieDbId: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieTopratedGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieTopratedGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMovieUpcomingGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMovieUpcomingGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information specified by the foreignAlbumId passed in
     * @param {string} foreignAlbumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicAlbumInfoForeignAlbumIdGet(
      foreignAlbumId: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchSearchAlbumViewModel> {
      return SearchApiFp(configuration)
        .apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicAlbumSearchTermGet(
      searchTerm: string,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchAlbumViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMusicAlbumSearchTermGet(searchTerm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns all albums for the artist using the ForeignArtistId
     * @param {string} foreignArtistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicArtistAlbumForeignArtistIdGet(
      foreignArtistId: string,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchAlbumViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Lidarr as the Provider
     * @summary Returns the artist information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchMusicArtistSearchTermGet(
      searchTerm: string,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchArtistViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchMusicArtistSearchTermGet(searchTerm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticiplateds tv shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvAnticipatedGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchTvAnticipatedGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TvMaze as the Provider
     * @summary Gets extra show information.
     * @param {string} tvdbId The TVDB identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvInfoTvdbIdGet(
      tvdbId: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchSearchTvShowViewModel> {
      return SearchApiFp(configuration)
        .apiV1SearchTvInfoTvdbIdGet(tvdbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvMostwatchedGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchTvMostwatchedGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvPopularGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchTvPopularGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TvMaze as the Provider
     * @summary Searches for a Tv Show.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvSearchTermGet(
      searchTerm: string,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchTvSearchTermGet(searchTerm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchTvTrendingGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV1SearchTvTrendingGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns all the movies that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchActorActorIdMovieGet(
      actorId: number,
      options?: any
    ): AxiosPromise<OmbiApiTheMovieDbModelsActorCredits> {
      return SearchApiFp(configuration)
        .apiV2SearchActorActorIdMovieGet(actorId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns all the tv shows that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchActorActorIdTvGet(
      actorId: number,
      options?: any
    ): AxiosPromise<OmbiApiTheMovieDbModelsActorCredits> {
      return SearchApiFp(configuration)
        .apiV2SearchActorActorIdTvGet(actorId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Advanced Searched Media using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(
      currentPosition: number,
      amountToLoad: number,
      body?: OmbiApiTheMovieDbModelsDiscoverModel,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(
          currentPosition,
          amountToLoad,
          body,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} albumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchArtistAlbumAlbumIdGet(
      albumId: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MusicReleaseGroup> {
      return SearchApiFp(configuration)
        .apiV2SearchArtistAlbumAlbumIdGet(albumId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} artistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchArtistArtistIdGet(
      artistId: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MusicArtistInformation> {
      return SearchApiFp(configuration)
        .apiV2SearchArtistArtistIdGet(artistId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchArtistRequestRequestIdGet(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MusicArtistInformation> {
      return SearchApiFp(configuration)
        .apiV2SearchArtistRequestRequestIdGet(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns basic information about the provided collection
     * @param {number} collectionId The collection id from TheMovieDb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieCollectionCollectionIdGet(
      collectionId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MovieCollectionsViewModel> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieCollectionCollectionIdGet(collectionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} imdbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieImdbImdbidGet(
      imdbId: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MovieFullInfoViewModel> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieImdbImdbidGet(imdbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} movieDbId The MovieDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieMovieDbIdGet(
      movieDbId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MovieFullInfoViewModel> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieMovieDbIdGet(movieDbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieNowplayingGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieNowplayingGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMoviePopularGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMoviePopularGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieRequestRequestIdGet(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MovieFullInfoViewModel> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieRequestRequestIdGet(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Movies using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Seasonal Movies
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieSimilarPost(
      body?: OmbiModelsSimilarMoviesRefineModel,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieSimilarPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieTopratedGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieTopratedGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMovieUpcomingGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchMovieUpcomingGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
     * @summary Returns search results for both TV and Movies
     * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
     * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchMultiSearchTermPost(
      searchTerm: string,
      body?: OmbiCoreModelsSearchV2MultiSearchFilter,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchV2MultiSearchResult>> {
      return SearchApiFp(configuration)
        .apiV2SearchMultiSearchTermPost(searchTerm, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchRatingsMovieNameYearGet(
      name: string,
      year: number,
      options?: any
    ): AxiosPromise<OmbiApiRottenTomatoesModelsMovieRatings> {
      return SearchApiFp(configuration)
        .apiV2SearchRatingsMovieNameYearGet(name, year, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchRatingsTvNameYearGet(
      name: string,
      year: number,
      options?: any
    ): AxiosPromise<OmbiApiRottenTomatoesModelsTvRatings> {
      return SearchApiFp(configuration)
        .apiV2SearchRatingsTvNameYearGet(name, year, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} musicBrainzId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchReleasegroupartMusicBrainzIdGet(
      musicBrainzId: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2MusicAlbumArt> {
      return SearchApiFp(configuration)
        .apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} movieDBId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchStreamMovieMovieDbIdGet(
      movieDBId: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchV2StreamingData>> {
      return SearchApiFp(configuration)
        .apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchStreamTvMovieDbIdGet(
      movieDbId: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchV2StreamingData>> {
      return SearchApiFp(configuration)
        .apiV2SearchStreamTvMovieDbIdGet(movieDbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticipated tv shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns details for a single show
     * @param {string} moviedbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvMoviedbMoviedbidGet(
      moviedbid: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel> {
      return SearchApiFp(configuration)
        .apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvPopularCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchTvPopularCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvRequestRequestIdGet(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel> {
      return SearchApiFp(configuration)
        .apiV2SearchTvRequestRequestIdGet(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Tv using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<
      Array<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel>
    > {
      return SearchApiFp(configuration)
        .apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(
      currentPosition: number,
      amountToLoad: number,
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
      return SearchApiFp(configuration)
        .apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(
          currentPosition,
          amountToLoad,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {string} tvdbid The TVDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SearchTvTvdbIdGet(
      tvdbid: string,
      options?: any
    ): AxiosPromise<OmbiCoreModelsSearchV2SearchFullInfoTvShowViewModel> {
      return SearchApiFp(configuration)
        .apiV2SearchTvTvdbIdGet(tvdbid, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
  /**
   *
   * @summary Searches for movies by a certain actor.
   * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieActorPost(
    body?: OmbiModelsSearchActorModel,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieActorPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Gets extra information on the movie e.g. IMDBId
   * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieInfoPost(
    body?: OmbiModelsSearchMovieExtraInfoRefineModel,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieInfoPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Gets extra information on the movie e.g. IMDBId
   * @param {number} theMovieDbId The movie database identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieInfoTheMovieDbIdGet(
    theMovieDbId: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Retuns Now Playing Movies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieNowplayingGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieNowplayingGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Popular Movies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMoviePopularGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMoviePopularGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Searches for a movie.
   * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMoviePost(
    body?: OmbiModelsSearchMovieRefineModel,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMoviePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Searches for a movie.
   * @param {string} searchTerm The search term.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieSearchTermGet(searchTerm: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieSearchTermGet(searchTerm, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns similar movies to the movie id passed in
   * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieSimilarPost(
    body?: OmbiModelsSimilarMoviesRefineModel,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieSimilarPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns similar movies to the movie id passed in
   * @param {number} theMovieDbId ID of the movie
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieTheMovieDbIdSimilarGet(
    theMovieDbId: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns top rated movies.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieTopratedGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieTopratedGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Upcoming movies.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMovieUpcomingGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMovieUpcomingGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Lidarr as the Provider
   * @summary Returns the album information specified by the foreignAlbumId passed in
   * @param {string} foreignAlbumId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMusicAlbumInfoForeignAlbumIdGet(
    foreignAlbumId: string,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Lidarr as the Provider
   * @summary Returns the album information we searched for
   * @param {string} searchTerm
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMusicAlbumSearchTermGet(searchTerm: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMusicAlbumSearchTermGet(searchTerm, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Lidarr as the Provider
   * @summary Returns all albums for the artist using the ForeignArtistId
   * @param {string} foreignArtistId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMusicArtistAlbumForeignArtistIdGet(
    foreignArtistId: string,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Lidarr as the Provider
   * @summary Returns the artist information we searched for
   * @param {string} searchTerm
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchMusicArtistSearchTermGet(
    searchTerm: string,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV1SearchMusicArtistSearchTermGet(searchTerm, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns most Anticiplateds tv shows.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchTvAnticipatedGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchTvAnticipatedGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TvMaze as the Provider
   * @summary Gets extra show information.
   * @param {string} tvdbId The TVDB identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchTvInfoTvdbIdGet(tvdbId: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchTvInfoTvdbIdGet(tvdbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns Most watched shows.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchTvMostwatchedGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchTvMostwatchedGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns Popular Tv Shows
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchTvPopularGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchTvPopularGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TvMaze as the Provider
   * @summary Searches for a Tv Show.
   * @param {string} searchTerm The search term.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchTvSearchTermGet(searchTerm: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchTvSearchTermGet(searchTerm, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns trending shows
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV1SearchTvTrendingGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV1SearchTvTrendingGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns all the movies that is by the actor id
   * @param {number} actorId TheMovieDb Actor ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchActorActorIdMovieGet(actorId: number, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchActorActorIdMovieGet(actorId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns all the tv shows that is by the actor id
   * @param {number} actorId TheMovieDb Actor ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchActorActorIdTvGet(actorId: number, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchActorActorIdTvGet(actorId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Advanced Searched Media using paging
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(
    currentPosition: number,
    amountToLoad: number,
    body?: OmbiApiTheMovieDbModelsDiscoverModel,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(
        currentPosition,
        amountToLoad,
        body,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} albumId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchArtistAlbumAlbumIdGet(albumId: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchArtistAlbumAlbumIdGet(albumId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} artistId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchArtistArtistIdGet(artistId: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchArtistArtistIdGet(artistId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchArtistRequestRequestIdGet(
    requestId: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchArtistRequestRequestIdGet(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns basic information about the provided collection
   * @param {number} collectionId The collection id from TheMovieDb
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieCollectionCollectionIdGet(
    collectionId: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieCollectionCollectionIdGet(collectionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} imdbId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieImdbImdbidGet(imdbId: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieImdbImdbidGet(imdbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns details for a single movie
   * @param {number} movieDbId The MovieDB Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieMovieDbIdGet(movieDbId: number, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieMovieDbIdGet(movieDbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Now Playing Movies by page
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Now Playing Movies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieNowplayingGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieNowplayingGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Popular Movies using paging
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Popular Movies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMoviePopularGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMoviePopularGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns details for a single movie
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieRequestRequestIdGet(requestId: number, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieRequestRequestIdGet(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Recently Requested Movies using Paging
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Seasonal Movies
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns similar movies to the movie id passed in
   * @param {OmbiModelsSimilarMoviesRefineModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieSimilarPost(
    body?: OmbiModelsSimilarMoviesRefineModel,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieSimilarPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns top rated movies by page.
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns top rated movies.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieTopratedGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieTopratedGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Upcoming movies by page.
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Upcoming movies.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMovieUpcomingGet(options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMovieUpcomingGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
   * @summary Returns search results for both TV and Movies
   * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
   * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchMultiSearchTermPost(
    searchTerm: string,
    body?: OmbiCoreModelsSearchV2MultiSearchFilter,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchMultiSearchTermPost(searchTerm, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} name
   * @param {number} year
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchRatingsMovieNameYearGet(
    name: string,
    year: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchRatingsMovieNameYearGet(name, year, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} name
   * @param {number} year
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchRatingsTvNameYearGet(
    name: string,
    year: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchRatingsTvNameYearGet(name, year, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} musicBrainzId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchReleasegroupartMusicBrainzIdGet(
    musicBrainzId: string,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} movieDBId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchStreamMovieMovieDbIdGet(movieDBId: number, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} movieDbId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchStreamTvMovieDbIdGet(movieDbId: number, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchStreamTvMovieDbIdGet(movieDbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns most Anticipated tv shows by page.
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns Most watched shows by page.
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns details for a single show
   * @param {string} moviedbid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvMoviedbMoviedbidGet(moviedbid: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns Popular Tv Shows
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvPopularCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvPopularCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * TVMaze is the TV Show Provider
   * @summary Returns details for a single show
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvRequestRequestIdGet(requestId: number, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvRequestRequestIdGet(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use TheMovieDb as the Movie Provider
   * @summary Returns Recently Requested Tv using Paging
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * We use Trakt.tv as the Provider
   * @summary Returns trending shows by page
   * @param {number} currentPosition
   * @param {number} amountToLoad
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(
    currentPosition: number,
    amountToLoad: number,
    options?: any
  ) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(
        currentPosition,
        amountToLoad,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * TVMaze is the TV Show Provider
   * @summary Returns details for a single show
   * @param {string} tvdbid The TVDB Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApi
   */
  public apiV2SearchTvTvdbIdGet(tvdbid: string, options?: any) {
    return SearchApiFp(this.configuration)
      .apiV2SearchTvTvdbIdGet(tvdbid, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
