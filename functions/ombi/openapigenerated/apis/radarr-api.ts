/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI } from "../base";
import { OmbiApiRadarrModelsRadarrRootFolder } from "../models";
import { OmbiApiRadarrModelsTag } from "../models";
import { OmbiSettingsSettingsModelsExternalRadarrSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalSonarrSettings } from "../models";
/**
 * RadarrApi - axios parameter creator
 * @export
 */
export const RadarrApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrEnabledGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Radarr/enabled`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Radarr profiles using the saved settings  <remarks>The data is cached for an hour</remarks>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrProfilesGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Radarr/Profiles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Radarr profiles.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrProfilesPost: async (
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Radarr/Profiles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Radarr root folders using the saved settings.  <remarks>The data is cached for an hour</remarks>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrRootFoldersGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Radarr/RootFolders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Radarr root folders.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrRootFoldersPost: async (
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Radarr/RootFolders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Radarr tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrTagsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Radarr/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Radarr tags
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrTagsPost: async (
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Radarr/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RadarrApi - functional programming interface
 * @export
 */
export const RadarrApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RadarrEnabledGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await RadarrApiAxiosParamCreator(
        configuration
      ).apiV1RadarrEnabledGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Radarr profiles using the saved settings  <remarks>The data is cached for an hour</remarks>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RadarrProfilesGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await RadarrApiAxiosParamCreator(
        configuration
      ).apiV1RadarrProfilesGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Radarr profiles.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RadarrProfilesPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await RadarrApiAxiosParamCreator(
        configuration
      ).apiV1RadarrProfilesPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Radarr root folders using the saved settings.  <remarks>The data is cached for an hour</remarks>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RadarrRootFoldersGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiApiRadarrModelsRadarrRootFolder>>
    > {
      const localVarAxiosArgs = await RadarrApiAxiosParamCreator(
        configuration
      ).apiV1RadarrRootFoldersGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Radarr root folders.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RadarrRootFoldersPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiApiRadarrModelsRadarrRootFolder>>
    > {
      const localVarAxiosArgs = await RadarrApiAxiosParamCreator(
        configuration
      ).apiV1RadarrRootFoldersPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Radarr tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RadarrTagsGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiApiRadarrModelsTag>>
    > {
      const localVarAxiosArgs = await RadarrApiAxiosParamCreator(
        configuration
      ).apiV1RadarrTagsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Radarr tags
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RadarrTagsPost(
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiApiRadarrModelsTag>>
    > {
      const localVarAxiosArgs = await RadarrApiAxiosParamCreator(
        configuration
      ).apiV1RadarrTagsPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * RadarrApi - factory interface
 * @export
 */
export const RadarrApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrEnabledGet(options?: any): AxiosPromise<boolean> {
      return RadarrApiFp(configuration)
        .apiV1RadarrEnabledGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Radarr profiles using the saved settings  <remarks>The data is cached for an hour</remarks>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrProfilesGet(options?: any): AxiosPromise<void> {
      return RadarrApiFp(configuration)
        .apiV1RadarrProfilesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Radarr profiles.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrProfilesPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): AxiosPromise<void> {
      return RadarrApiFp(configuration)
        .apiV1RadarrProfilesPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Radarr root folders using the saved settings.  <remarks>The data is cached for an hour</remarks>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrRootFoldersGet(
      options?: any
    ): AxiosPromise<Array<OmbiApiRadarrModelsRadarrRootFolder>> {
      return RadarrApiFp(configuration)
        .apiV1RadarrRootFoldersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Radarr root folders.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrRootFoldersPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): AxiosPromise<Array<OmbiApiRadarrModelsRadarrRootFolder>> {
      return RadarrApiFp(configuration)
        .apiV1RadarrRootFoldersPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Radarr tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrTagsGet(
      options?: any
    ): AxiosPromise<Array<OmbiApiRadarrModelsTag>> {
      return RadarrApiFp(configuration)
        .apiV1RadarrTagsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Radarr tags
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RadarrTagsPost(
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options?: any
    ): AxiosPromise<Array<OmbiApiRadarrModelsTag>> {
      return RadarrApiFp(configuration)
        .apiV1RadarrTagsPost(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RadarrApi - object-oriented interface
 * @export
 * @class RadarrApi
 * @extends {BaseAPI}
 */
export class RadarrApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarrApi
   */
  public apiV1RadarrEnabledGet(options?: any) {
    return RadarrApiFp(this.configuration)
      .apiV1RadarrEnabledGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Radarr profiles using the saved settings  <remarks>The data is cached for an hour</remarks>
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarrApi
   */
  public apiV1RadarrProfilesGet(options?: any) {
    return RadarrApiFp(this.configuration)
      .apiV1RadarrProfilesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Radarr profiles.
   * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarrApi
   */
  public apiV1RadarrProfilesPost(
    body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
    options?: any
  ) {
    return RadarrApiFp(this.configuration)
      .apiV1RadarrProfilesPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Radarr root folders using the saved settings.  <remarks>The data is cached for an hour</remarks>
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarrApi
   */
  public apiV1RadarrRootFoldersGet(options?: any) {
    return RadarrApiFp(this.configuration)
      .apiV1RadarrRootFoldersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Radarr root folders.
   * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarrApi
   */
  public apiV1RadarrRootFoldersPost(
    body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
    options?: any
  ) {
    return RadarrApiFp(this.configuration)
      .apiV1RadarrRootFoldersPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Radarr tags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarrApi
   */
  public apiV1RadarrTagsGet(options?: any) {
    return RadarrApiFp(this.configuration)
      .apiV1RadarrTagsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Radarr tags
   * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarrApi
   */
  public apiV1RadarrTagsPost(
    body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
    options?: any
  ) {
    return RadarrApiFp(this.configuration)
      .apiV1RadarrTagsPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
