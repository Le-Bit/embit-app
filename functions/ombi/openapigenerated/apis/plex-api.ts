/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from "../base";
import { OmbiApiPlexModelsPlexAuthentication } from "../models";
import { OmbiApiPlexModelsUserRequest } from "../models";
import { OmbiCoreSettingsModelsExternalPlexServers } from "../models";
import { OmbiModelsExternalPlexLibrariesLiteResponse } from "../models";
import { OmbiModelsExternalPlexLibrariesResponse } from "../models";
import { OmbiModelsExternalPlexServersViewModel } from "../models";
import { OmbiModelsExternalPlexUserViewModel } from "../models";
import { OmbiModelsExternalUsersViewModel } from "../models";
import { OmbiModelsPlexOAuthViewModel } from "../models";
/**
 * PlexApi - axios parameter creator
 * @export
 */
export const PlexApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Gets the plex friends.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexFriendsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Plex/friends`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexLibrariesMachineIdGet: async (
      machineId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      if (machineId === null || machineId === undefined) {
        throw new RequiredError(
          "machineId",
          "Required parameter machineId was null or undefined when calling apiV1PlexLibrariesMachineIdGet."
        );
      }
      const localVarPath = `/api/v1/Plex/Libraries/{machineId}`.replace(
        `{${"machineId"}}`,
        encodeURIComponent(String(machineId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the plex libraries.
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexLibrariesPost: async (
      body?: OmbiCoreSettingsModelsExternalPlexServers,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Plex/Libraries`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiModelsPlexOAuthViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexOauthPost: async (
      body?: OmbiModelsPlexOAuthViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Plex/oauth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Signs into the Plex API.
     * @param {OmbiApiPlexModelsUserRequest} [body] The request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexPost: async (
      body?: OmbiApiPlexModelsUserRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Plex`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the plex servers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexServersGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Plex/servers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the plex servers.
     * @param {OmbiApiPlexModelsUserRequest} [body] The u.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexServersPost: async (
      body?: OmbiApiPlexModelsUserRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Plex/servers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiModelsExternalPlexUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexUserPost: async (
      body?: OmbiModelsExternalPlexUserViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Plex/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlexApi - functional programming interface
 * @export
 */
export const PlexApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Gets the plex friends.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexFriendsGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiModelsExternalUsersViewModel>>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexFriendsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexLibrariesMachineIdGet(
      machineId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsExternalPlexLibrariesLiteResponse>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexLibrariesMachineIdGet(machineId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the plex libraries.
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexLibrariesPost(
      body?: OmbiCoreSettingsModelsExternalPlexServers,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsExternalPlexLibrariesResponse>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexLibrariesPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiModelsPlexOAuthViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexOauthPost(
      body?: OmbiModelsPlexOAuthViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexOauthPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Signs into the Plex API.
     * @param {OmbiApiPlexModelsUserRequest} [body] The request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexPost(
      body?: OmbiApiPlexModelsUserRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiApiPlexModelsPlexAuthentication>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the plex servers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexServersGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexServersGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the plex servers.
     * @param {OmbiApiPlexModelsUserRequest} [body] The u.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexServersPost(
      body?: OmbiApiPlexModelsUserRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsExternalPlexServersViewModel>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexServersPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiModelsExternalPlexUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PlexUserPost(
      body?: OmbiModelsExternalPlexUserViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await PlexApiAxiosParamCreator(
        configuration
      ).apiV1PlexUserPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * PlexApi - factory interface
 * @export
 */
export const PlexApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Gets the plex friends.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexFriendsGet(
      options?: any
    ): AxiosPromise<Array<OmbiModelsExternalUsersViewModel>> {
      return PlexApiFp(configuration)
        .apiV1PlexFriendsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexLibrariesMachineIdGet(
      machineId: string,
      options?: any
    ): AxiosPromise<OmbiModelsExternalPlexLibrariesLiteResponse> {
      return PlexApiFp(configuration)
        .apiV1PlexLibrariesMachineIdGet(machineId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the plex libraries.
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexLibrariesPost(
      body?: OmbiCoreSettingsModelsExternalPlexServers,
      options?: any
    ): AxiosPromise<OmbiModelsExternalPlexLibrariesResponse> {
      return PlexApiFp(configuration)
        .apiV1PlexLibrariesPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiModelsPlexOAuthViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexOauthPost(
      body?: OmbiModelsPlexOAuthViewModel,
      options?: any
    ): AxiosPromise<void> {
      return PlexApiFp(configuration)
        .apiV1PlexOauthPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Signs into the Plex API.
     * @param {OmbiApiPlexModelsUserRequest} [body] The request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexPost(
      body?: OmbiApiPlexModelsUserRequest,
      options?: any
    ): AxiosPromise<OmbiApiPlexModelsPlexAuthentication> {
      return PlexApiFp(configuration)
        .apiV1PlexPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the plex servers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexServersGet(options?: any): AxiosPromise<void> {
      return PlexApiFp(configuration)
        .apiV1PlexServersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the plex servers.
     * @param {OmbiApiPlexModelsUserRequest} [body] The u.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexServersPost(
      body?: OmbiApiPlexModelsUserRequest,
      options?: any
    ): AxiosPromise<OmbiModelsExternalPlexServersViewModel> {
      return PlexApiFp(configuration)
        .apiV1PlexServersPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiModelsExternalPlexUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PlexUserPost(
      body?: OmbiModelsExternalPlexUserViewModel,
      options?: any
    ): AxiosPromise<void> {
      return PlexApiFp(configuration)
        .apiV1PlexUserPost(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PlexApi - object-oriented interface
 * @export
 * @class PlexApi
 * @extends {BaseAPI}
 */
export class PlexApi extends BaseAPI {
  /**
   *
   * @summary Gets the plex friends.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexFriendsGet(options?: any) {
    return PlexApiFp(this.configuration)
      .apiV1PlexFriendsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} machineId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexLibrariesMachineIdGet(machineId: string, options?: any) {
    return PlexApiFp(this.configuration)
      .apiV1PlexLibrariesMachineIdGet(machineId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the plex libraries.
   * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexLibrariesPost(
    body?: OmbiCoreSettingsModelsExternalPlexServers,
    options?: any
  ) {
    return PlexApiFp(this.configuration)
      .apiV1PlexLibrariesPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiModelsPlexOAuthViewModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexOauthPost(
    body?: OmbiModelsPlexOAuthViewModel,
    options?: any
  ) {
    return PlexApiFp(this.configuration)
      .apiV1PlexOauthPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Signs into the Plex API.
   * @param {OmbiApiPlexModelsUserRequest} [body] The request.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexPost(body?: OmbiApiPlexModelsUserRequest, options?: any) {
    return PlexApiFp(this.configuration)
      .apiV1PlexPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the plex servers.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexServersGet(options?: any) {
    return PlexApiFp(this.configuration)
      .apiV1PlexServersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the plex servers.
   * @param {OmbiApiPlexModelsUserRequest} [body] The u.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexServersPost(
    body?: OmbiApiPlexModelsUserRequest,
    options?: any
  ) {
    return PlexApiFp(this.configuration)
      .apiV1PlexServersPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiModelsExternalPlexUserViewModel} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlexApi
   */
  public apiV1PlexUserPost(
    body?: OmbiModelsExternalPlexUserViewModel,
    options?: any
  ) {
    return PlexApiFp(this.configuration)
      .apiV1PlexUserPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
