/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from "../base";
/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBackgroundGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Images/background`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBackgroundMovieMovieDbIdGet: async (
      movieDbId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'movieDbId' is not null or undefined
      if (movieDbId === null || movieDbId === undefined) {
        throw new RequiredError(
          "movieDbId",
          "Required parameter movieDbId was null or undefined when calling apiV1ImagesBackgroundMovieMovieDbIdGet."
        );
      }
      const localVarPath =
        `/api/v1/Images/background/movie/{movieDbId}`.replace(
          `{${"movieDbId"}}`,
          encodeURIComponent(String(movieDbId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBackgroundTvTvdbidGet: async (
      tvdbid: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tvdbid' is not null or undefined
      if (tvdbid === null || tvdbid === undefined) {
        throw new RequiredError(
          "tvdbid",
          "Required parameter tvdbid was null or undefined when calling apiV1ImagesBackgroundTvTvdbidGet."
        );
      }
      const localVarPath = `/api/v1/Images/background/tv/{tvdbid}`.replace(
        `{${"tvdbid"}}`,
        encodeURIComponent(String(tvdbid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBannerMovieMovieDbIdGet: async (
      movieDbId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'movieDbId' is not null or undefined
      if (movieDbId === null || movieDbId === undefined) {
        throw new RequiredError(
          "movieDbId",
          "Required parameter movieDbId was null or undefined when calling apiV1ImagesBannerMovieMovieDbIdGet."
        );
      }
      const localVarPath = `/api/v1/Images/banner/movie/{movieDbId}`.replace(
        `{${"movieDbId"}}`,
        encodeURIComponent(String(movieDbId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPosterGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Images/poster`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPosterMovieMovieDbIdGet: async (
      movieDbId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'movieDbId' is not null or undefined
      if (movieDbId === null || movieDbId === undefined) {
        throw new RequiredError(
          "movieDbId",
          "Required parameter movieDbId was null or undefined when calling apiV1ImagesPosterMovieMovieDbIdGet."
        );
      }
      const localVarPath = `/api/v1/Images/poster/movie/{movieDbId}`.replace(
        `{${"movieDbId"}}`,
        encodeURIComponent(String(movieDbId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPosterTvTvdbidGet: async (
      tvdbid: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tvdbid' is not null or undefined
      if (tvdbid === null || tvdbid === undefined) {
        throw new RequiredError(
          "tvdbid",
          "Required parameter tvdbid was null or undefined when calling apiV1ImagesPosterTvTvdbidGet."
        );
      }
      const localVarPath = `/api/v1/Images/poster/tv/{tvdbid}`.replace(
        `{${"tvdbid"}}`,
        encodeURIComponent(String(tvdbid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesTvTvdbidGet: async (
      tvdbid: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tvdbid' is not null or undefined
      if (tvdbid === null || tvdbid === undefined) {
        throw new RequiredError(
          "tvdbid",
          "Required parameter tvdbid was null or undefined when calling apiV1ImagesTvTvdbidGet."
        );
      }
      const localVarPath = `/api/v1/Images/tv/{tvdbid}`.replace(
        `{${"tvdbid"}}`,
        encodeURIComponent(String(tvdbid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesBackgroundGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesBackgroundGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesBackgroundMovieMovieDbIdGet(
      movieDbId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesBackgroundTvTvdbidGet(
      tvdbid: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesBannerMovieMovieDbIdGet(
      movieDbId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesPosterGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesPosterGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesPosterMovieMovieDbIdGet(
      movieDbId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesPosterTvTvdbidGet(
      tvdbid: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesPosterTvTvdbidGet(tvdbid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ImagesTvTvdbidGet(
      tvdbid: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ImagesApiAxiosParamCreator(
        configuration
      ).apiV1ImagesTvTvdbidGet(tvdbid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBackgroundGet(options?: any): AxiosPromise<void> {
      return ImagesApiFp(configuration)
        .apiV1ImagesBackgroundGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBackgroundMovieMovieDbIdGet(
      movieDbId: string,
      options?: any
    ): AxiosPromise<string> {
      return ImagesApiFp(configuration)
        .apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBackgroundTvTvdbidGet(
      tvdbid: number,
      options?: any
    ): AxiosPromise<string> {
      return ImagesApiFp(configuration)
        .apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesBannerMovieMovieDbIdGet(
      movieDbId: string,
      options?: any
    ): AxiosPromise<string> {
      return ImagesApiFp(configuration)
        .apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPosterGet(options?: any): AxiosPromise<string> {
      return ImagesApiFp(configuration)
        .apiV1ImagesPosterGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPosterMovieMovieDbIdGet(
      movieDbId: string,
      options?: any
    ): AxiosPromise<string> {
      return ImagesApiFp(configuration)
        .apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPosterTvTvdbidGet(
      tvdbid: number,
      options?: any
    ): AxiosPromise<string> {
      return ImagesApiFp(configuration)
        .apiV1ImagesPosterTvTvdbidGet(tvdbid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesTvTvdbidGet(
      tvdbid: number,
      options?: any
    ): AxiosPromise<string> {
      return ImagesApiFp(configuration)
        .apiV1ImagesTvTvdbidGet(tvdbid, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesBackgroundGet(options?: any) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesBackgroundGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} movieDbId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesBackgroundMovieMovieDbIdGet(
    movieDbId: string,
    options?: any
  ) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} tvdbid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesBackgroundTvTvdbidGet(tvdbid: number, options?: any) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} movieDbId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesBannerMovieMovieDbIdGet(movieDbId: string, options?: any) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesPosterGet(options?: any) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesPosterGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} movieDbId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesPosterMovieMovieDbIdGet(movieDbId: string, options?: any) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} tvdbid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesPosterTvTvdbidGet(tvdbid: number, options?: any) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesPosterTvTvdbidGet(tvdbid, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} tvdbid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public apiV1ImagesTvTvdbidGet(tvdbid: number, options?: any) {
    return ImagesApiFp(this.configuration)
      .apiV1ImagesTvTvdbidGet(tvdbid, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
