/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  RequestArgs,
  BaseAPI,
} from "../base";
import { OmbiCoreModelsUIDiscordNotificationsViewModel } from "../models";
import { OmbiCoreModelsUIEmailNotificationsViewModel } from "../models";
import { OmbiCoreModelsUIGotifyNotificationViewModel } from "../models";
import { OmbiCoreModelsUIMattermostNotificationsViewModel } from "../models";
import { OmbiCoreModelsUIMobileNotificationsViewModel } from "../models";
import { OmbiCoreModelsUINewsletterNotificationViewModel } from "../models";
import { OmbiCoreModelsUIPushbulletNotificationViewModel } from "../models";
import { OmbiCoreModelsUIPushoverNotificationViewModel } from "../models";
import { OmbiCoreModelsUISlackNotificationsViewModel } from "../models";
import { OmbiCoreModelsUITelegramNotificationsViewModel } from "../models";
import { OmbiCoreModelsUITwilioSettingsViewModel } from "../models";
import { OmbiCoreModelsUIWebhookNotificationViewModel } from "../models";
import { OmbiCoreSettingsModelsExternalEmbySettings } from "../models";
import { OmbiCoreSettingsModelsExternalJellyfinSettings } from "../models";
import { OmbiCoreSettingsModelsExternalPlexSettings } from "../models";
import { OmbiCoreSettingsModelsExternalTheMovieDbSettings } from "../models";
import { OmbiCoreSettingsModelsLandingPageSettings } from "../models";
import { OmbiModelsAboutViewModel } from "../models";
import { OmbiModelsCronTestModel } from "../models";
import { OmbiModelsCronViewModelBody } from "../models";
import { OmbiModelsJobSettingsViewModel } from "../models";
import { OmbiModelsPresetThemeViewModel } from "../models";
import { OmbiSettingsSettingsModelsAuthenticationSettings } from "../models";
import { OmbiSettingsSettingsModelsCustomizationSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalCouchPotatoSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalDogNzbSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalLidarrSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalRadarrSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalSickRageSettings } from "../models";
import { OmbiSettingsSettingsModelsExternalSonarrSettings } from "../models";
import { OmbiSettingsSettingsModelsIssueSettings } from "../models";
import { OmbiSettingsSettingsModelsJobSettings } from "../models";
import { OmbiSettingsSettingsModelsOmbiSettings } from "../models";
import { OmbiSettingsSettingsModelsUpdateSettings } from "../models";
import { OmbiSettingsSettingsModelsUserManagementSettings } from "../models";
import { OmbiSettingsSettingsModelsVoteSettings } from "../models";
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsAboutGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/about`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Authentication Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsAuthenticationGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/authentication`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Authentication settings.
     * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsAuthenticationPost: async (
      body?: OmbiSettingsSettingsModelsAuthenticationSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/authentication`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the base url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsBaseurlGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/baseurl`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsClientidGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/clientid`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the CouchPotatoSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCouchPotatoGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/CouchPotato`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the CouchPotatoSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCouchPotatoPost: async (
      body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/CouchPotato`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Customization Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCustomizationGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/customization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Customization settings.
     * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCustomizationPost: async (
      body?: OmbiSettingsSettingsModelsCustomizationSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/customization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the default language set in Ombi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsDefaultlanguageGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/defaultlanguage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the DogNzbSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsDogNzbGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/DogNzb`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the DogNzbSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsDogNzbPost: async (
      body?: OmbiSettingsSettingsModelsExternalDogNzbSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/DogNzb`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Emby Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsEmbyGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/emby`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Emby settings.
     * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsEmbyPost: async (
      body?: OmbiCoreSettingsModelsExternalEmbySettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/emby`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Issues Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsIssuesGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/Issues`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsIssuesPost: async (
      body?: OmbiSettingsSettingsModelsIssueSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/Issues`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsIssuesenabledGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/issuesenabled`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Jellyfin Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJellyfinGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/jellyfin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Jellyfin settings.
     * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJellyfinPost: async (
      body?: OmbiCoreSettingsModelsExternalJellyfinSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/jellyfin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the JobSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJobsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/jobs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the JobSettings settings.
     * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJobsPost: async (
      body?: OmbiSettingsSettingsModelsJobSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/jobs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Landing Page Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLandingpageGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/landingpage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Landing Page settings.
     * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLandingpagePost: async (
      body?: OmbiCoreSettingsModelsLandingPageSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/landingpage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLidarrGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/lidarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Lidarr settings.
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLidarrPost: async (
      body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/lidarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLidarrenabledGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/lidarrenabled`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the discord Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsDiscordGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/discord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the discord notification settings.
     * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsDiscordPost: async (
      body?: OmbiCoreModelsUIDiscordNotificationsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/discord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsEmailEnabledGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/email/enabled`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsEmailGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/email`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the email notification settings.
     * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsEmailPost: async (
      body?: OmbiCoreModelsUIEmailNotificationsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/email`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the gotify Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsGotifyGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/gotify`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the gotify notification settings.
     * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsGotifyPost: async (
      body?: OmbiCoreModelsUIGotifyNotificationViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/gotify`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Mattermost Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMattermostGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/mattermost`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMattermostPost: async (
      body?: OmbiCoreModelsUIMattermostNotificationsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/mattermost`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Mobile Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMobileGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/mobile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the Mobile notification settings.
     * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMobilePost: async (
      body?: OmbiCoreModelsUIMobileNotificationsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/mobile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Newsletter Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsNewsletterGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/newsletter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the Newsletter notification settings.
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsNewsletterPost: async (
      body?: OmbiCoreModelsUINewsletterNotificationViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/newsletter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the pushbullet Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushbulletGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/pushbullet`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the pushbullet notification settings.
     * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushbulletPost: async (
      body?: OmbiCoreModelsUIPushbulletNotificationViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/pushbullet`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the pushover Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushoverGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/pushover`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the pushover notification settings.
     * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushoverPost: async (
      body?: OmbiCoreModelsUIPushoverNotificationViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/pushover`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the slack Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsSlackGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/slack`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the slack notification settings.
     * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsSlackPost: async (
      body?: OmbiCoreModelsUISlackNotificationsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/slack`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the telegram Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTelegramGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/telegram`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the telegram notification settings.
     * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTelegramPost: async (
      body?: OmbiCoreModelsUITelegramNotificationsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/telegram`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Twilio Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTwilioGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/twilio`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTwilioPost: async (
      body?: OmbiCoreModelsUITwilioSettingsViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/twilio`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the webhook notification settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsWebhookGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/webhook`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the webhook notification settings.
     * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsWebhookPost: async (
      body?: OmbiCoreModelsUIWebhookNotificationViewModel,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/notifications/webhook`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Ombi settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsOmbiGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/ombi`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Ombi settings.
     * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsOmbiPost: async (
      body?: OmbiSettingsSettingsModelsOmbiSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/ombi`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsOmbiResetApiPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/ombi/resetApi`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Plex Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsPlexGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/plex`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Plex settings.
     * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsPlexPost: async (
      body?: OmbiCoreSettingsModelsExternalPlexSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/plex`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Radarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsRadarrGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/radarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Radarr settings.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsRadarrPost: async (
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/radarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the SickRage Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSickRageGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/SickRage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the SickRage settings.
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSickRagePost: async (
      body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/SickRage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Sonarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSonarrGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/sonarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Sonarr settings.
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSonarrPost: async (
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/sonarr`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OmbiModelsCronViewModelBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsTestcronPost: async (
      body?: OmbiModelsCronViewModelBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/testcron`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get's the preset themes available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsThemesGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/themes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get The Movie DB settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsThemoviedbGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/themoviedb`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save The Movie DB settings.
     * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsThemoviedbPost: async (
      body?: OmbiCoreSettingsModelsExternalTheMovieDbSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/themoviedb`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Update Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUpdateGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/Update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Update settings.
     * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUpdatePost: async (
      body?: OmbiSettingsSettingsModelsUpdateSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/Update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the UserManagement Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUserManagementGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/UserManagement`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the UserManagement settings.
     * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUserManagementPost: async (
      body?: OmbiSettingsSettingsModelsUserManagementSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/UserManagement`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the Vote Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsVoteGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/vote`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsVotePost: async (
      body?: OmbiSettingsSettingsModelsVoteSettings,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/vote`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsVoteenabledGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Settings/voteenabled`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsAboutGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsAboutViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsAboutGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Authentication Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsAuthenticationGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsAuthenticationSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsAuthenticationGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Authentication settings.
     * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsAuthenticationPost(
      body?: OmbiSettingsSettingsModelsAuthenticationSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsAuthenticationPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the base url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsBaseurlGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsBaseurlGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsClientidGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsClientidGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the CouchPotatoSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsCouchPotatoGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsExternalCouchPotatoSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsCouchPotatoGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the CouchPotatoSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsCouchPotatoPost(
      body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsCouchPotatoPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Customization Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsCustomizationGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsCustomizationSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsCustomizationGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Customization settings.
     * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsCustomizationPost(
      body?: OmbiSettingsSettingsModelsCustomizationSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsCustomizationPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the default language set in Ombi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsDefaultlanguageGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsDefaultlanguageGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the DogNzbSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsDogNzbGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsExternalDogNzbSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsDogNzbGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the DogNzbSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsDogNzbPost(
      body?: OmbiSettingsSettingsModelsExternalDogNzbSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsDogNzbPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Emby Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsEmbyGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreSettingsModelsExternalEmbySettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsEmbyGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Emby settings.
     * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsEmbyPost(
      body?: OmbiCoreSettingsModelsExternalEmbySettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsEmbyPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Issues Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsIssuesGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsIssueSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsIssuesGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsIssuesPost(
      body?: OmbiSettingsSettingsModelsIssueSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsIssuesPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsIssuesenabledGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsIssuesenabledGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Jellyfin Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsJellyfinGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreSettingsModelsExternalJellyfinSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsJellyfinGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Jellyfin settings.
     * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsJellyfinPost(
      body?: OmbiCoreSettingsModelsExternalJellyfinSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsJellyfinPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the JobSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsJobsGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsJobSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsJobsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the JobSettings settings.
     * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsJobsPost(
      body?: OmbiSettingsSettingsModelsJobSettings,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsJobSettingsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsJobsPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Landing Page Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsLandingpageGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreSettingsModelsLandingPageSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsLandingpageGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Landing Page settings.
     * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsLandingpagePost(
      body?: OmbiCoreSettingsModelsLandingPageSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsLandingpagePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsLidarrGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsExternalLidarrSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsLidarrGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Lidarr settings.
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsLidarrPost(
      body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsLidarrPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsLidarrenabledGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsLidarrenabledGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the discord Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsDiscordGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIDiscordNotificationsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsDiscordGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the discord notification settings.
     * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsDiscordPost(
      body?: OmbiCoreModelsUIDiscordNotificationsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsDiscordPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsEmailEnabledGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsEmailEnabledGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsEmailGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIEmailNotificationsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsEmailGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the email notification settings.
     * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsEmailPost(
      body?: OmbiCoreModelsUIEmailNotificationsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsEmailPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the gotify Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsGotifyGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIGotifyNotificationViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsGotifyGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the gotify notification settings.
     * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsGotifyPost(
      body?: OmbiCoreModelsUIGotifyNotificationViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsGotifyPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Mattermost Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsMattermostGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIMattermostNotificationsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsMattermostGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsMattermostPost(
      body?: OmbiCoreModelsUIMattermostNotificationsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsMattermostPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Mobile Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsMobileGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIMobileNotificationsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsMobileGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the Mobile notification settings.
     * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsMobilePost(
      body?: OmbiCoreModelsUIMobileNotificationsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsMobilePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Newsletter Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsNewsletterGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUINewsletterNotificationViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsNewsletterGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the Newsletter notification settings.
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsNewsletterPost(
      body?: OmbiCoreModelsUINewsletterNotificationViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsNewsletterPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the pushbullet Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsPushbulletGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIPushbulletNotificationViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsPushbulletGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the pushbullet notification settings.
     * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsPushbulletPost(
      body?: OmbiCoreModelsUIPushbulletNotificationViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsPushbulletPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the pushover Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsPushoverGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIPushoverNotificationViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsPushoverGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the pushover notification settings.
     * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsPushoverPost(
      body?: OmbiCoreModelsUIPushoverNotificationViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsPushoverPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the slack Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsSlackGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUISlackNotificationsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsSlackGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the slack notification settings.
     * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsSlackPost(
      body?: OmbiCoreModelsUISlackNotificationsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsSlackPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the telegram Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsTelegramGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUITelegramNotificationsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsTelegramGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the telegram notification settings.
     * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsTelegramPost(
      body?: OmbiCoreModelsUITelegramNotificationsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsTelegramPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Twilio Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsTwilioGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUITwilioSettingsViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsTwilioGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsTwilioPost(
      body?: OmbiCoreModelsUITwilioSettingsViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsTwilioPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the webhook notification settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsWebhookGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsUIWebhookNotificationViewModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsWebhookGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Saves the webhook notification settings.
     * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsNotificationsWebhookPost(
      body?: OmbiCoreModelsUIWebhookNotificationViewModel,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsNotificationsWebhookPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Ombi settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsOmbiGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsOmbiSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsOmbiGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Ombi settings.
     * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsOmbiPost(
      body?: OmbiSettingsSettingsModelsOmbiSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsOmbiPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsOmbiResetApiPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsOmbiResetApiPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Plex Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsPlexGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreSettingsModelsExternalPlexSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsPlexGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Plex settings.
     * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsPlexPost(
      body?: OmbiCoreSettingsModelsExternalPlexSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsPlexPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Radarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsRadarrGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsExternalRadarrSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsRadarrGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Radarr settings.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsRadarrPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsRadarrPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the SickRage Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsSickRageGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsExternalSickRageSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsSickRageGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the SickRage settings.
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsSickRagePost(
      body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsSickRagePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Sonarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsSonarrGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsExternalSonarrSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsSonarrGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Sonarr settings.
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsSonarrPost(
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsSonarrPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {OmbiModelsCronViewModelBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsTestcronPost(
      body?: OmbiModelsCronViewModelBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiModelsCronTestModel>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsTestcronPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get's the preset themes available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsThemesGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiModelsPresetThemeViewModel>>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsThemesGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get The Movie DB settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsThemoviedbGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreSettingsModelsExternalTheMovieDbSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsThemoviedbGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save The Movie DB settings.
     * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsThemoviedbPost(
      body?: OmbiCoreSettingsModelsExternalTheMovieDbSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsThemoviedbPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Update Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsUpdateGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsUpdateSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsUpdateGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Update settings.
     * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsUpdatePost(
      body?: OmbiSettingsSettingsModelsUpdateSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsUpdatePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the UserManagement Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsUserManagementGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsUserManagementSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsUserManagementGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the UserManagement settings.
     * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsUserManagementPost(
      body?: OmbiSettingsSettingsModelsUserManagementSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsUserManagementPost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the Vote Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsVoteGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiSettingsSettingsModelsVoteSettings>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsVoteGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsVotePost(
      body?: OmbiSettingsSettingsModelsVoteSettings,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsVotePost(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SettingsVoteenabledGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await SettingsApiAxiosParamCreator(
        configuration
      ).apiV1SettingsVoteenabledGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsAboutGet(
      options?: any
    ): AxiosPromise<OmbiModelsAboutViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsAboutGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Authentication Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsAuthenticationGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsAuthenticationSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsAuthenticationGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Authentication settings.
     * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsAuthenticationPost(
      body?: OmbiSettingsSettingsModelsAuthenticationSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsAuthenticationPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the base url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsBaseurlGet(options?: any): AxiosPromise<string> {
      return SettingsApiFp(configuration)
        .apiV1SettingsBaseurlGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsClientidGet(options?: any): AxiosPromise<string> {
      return SettingsApiFp(configuration)
        .apiV1SettingsClientidGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the CouchPotatoSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCouchPotatoGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsExternalCouchPotatoSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsCouchPotatoGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the CouchPotatoSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCouchPotatoPost(
      body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsCouchPotatoPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Customization Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCustomizationGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsCustomizationSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsCustomizationGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Customization settings.
     * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsCustomizationPost(
      body?: OmbiSettingsSettingsModelsCustomizationSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsCustomizationPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the default language set in Ombi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsDefaultlanguageGet(options?: any): AxiosPromise<string> {
      return SettingsApiFp(configuration)
        .apiV1SettingsDefaultlanguageGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the DogNzbSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsDogNzbGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsExternalDogNzbSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsDogNzbGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the DogNzbSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsDogNzbPost(
      body?: OmbiSettingsSettingsModelsExternalDogNzbSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsDogNzbPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Emby Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsEmbyGet(
      options?: any
    ): AxiosPromise<OmbiCoreSettingsModelsExternalEmbySettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsEmbyGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Emby settings.
     * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsEmbyPost(
      body?: OmbiCoreSettingsModelsExternalEmbySettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsEmbyPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Issues Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsIssuesGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsIssueSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsIssuesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsIssuesPost(
      body?: OmbiSettingsSettingsModelsIssueSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsIssuesPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsIssuesenabledGet(options?: any): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsIssuesenabledGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Jellyfin Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJellyfinGet(
      options?: any
    ): AxiosPromise<OmbiCoreSettingsModelsExternalJellyfinSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsJellyfinGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Jellyfin settings.
     * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJellyfinPost(
      body?: OmbiCoreSettingsModelsExternalJellyfinSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsJellyfinPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the JobSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJobsGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsJobSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsJobsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the JobSettings settings.
     * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsJobsPost(
      body?: OmbiSettingsSettingsModelsJobSettings,
      options?: any
    ): AxiosPromise<OmbiModelsJobSettingsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsJobsPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Landing Page Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLandingpageGet(
      options?: any
    ): AxiosPromise<OmbiCoreSettingsModelsLandingPageSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsLandingpageGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Landing Page settings.
     * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLandingpagePost(
      body?: OmbiCoreSettingsModelsLandingPageSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsLandingpagePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLidarrGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsExternalLidarrSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsLidarrGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Lidarr settings.
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLidarrPost(
      body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsLidarrPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsLidarrenabledGet(options?: any): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsLidarrenabledGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the discord Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsDiscordGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIDiscordNotificationsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsDiscordGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the discord notification settings.
     * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsDiscordPost(
      body?: OmbiCoreModelsUIDiscordNotificationsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsDiscordPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsEmailEnabledGet(
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsEmailEnabledGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsEmailGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIEmailNotificationsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsEmailGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the email notification settings.
     * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsEmailPost(
      body?: OmbiCoreModelsUIEmailNotificationsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsEmailPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the gotify Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsGotifyGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIGotifyNotificationViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsGotifyGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the gotify notification settings.
     * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsGotifyPost(
      body?: OmbiCoreModelsUIGotifyNotificationViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsGotifyPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Mattermost Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMattermostGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIMattermostNotificationsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsMattermostGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMattermostPost(
      body?: OmbiCoreModelsUIMattermostNotificationsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsMattermostPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Mobile Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMobileGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIMobileNotificationsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsMobileGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the Mobile notification settings.
     * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsMobilePost(
      body?: OmbiCoreModelsUIMobileNotificationsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsMobilePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Newsletter Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsNewsletterGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUINewsletterNotificationViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsNewsletterGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the Newsletter notification settings.
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsNewsletterPost(
      body?: OmbiCoreModelsUINewsletterNotificationViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsNewsletterPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the pushbullet Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushbulletGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIPushbulletNotificationViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsPushbulletGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the pushbullet notification settings.
     * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushbulletPost(
      body?: OmbiCoreModelsUIPushbulletNotificationViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsPushbulletPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the pushover Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushoverGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIPushoverNotificationViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsPushoverGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the pushover notification settings.
     * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsPushoverPost(
      body?: OmbiCoreModelsUIPushoverNotificationViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsPushoverPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the slack Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsSlackGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUISlackNotificationsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsSlackGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the slack notification settings.
     * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsSlackPost(
      body?: OmbiCoreModelsUISlackNotificationsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsSlackPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the telegram Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTelegramGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUITelegramNotificationsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsTelegramGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the telegram notification settings.
     * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTelegramPost(
      body?: OmbiCoreModelsUITelegramNotificationsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsTelegramPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Twilio Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTwilioGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUITwilioSettingsViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsTwilioGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsTwilioPost(
      body?: OmbiCoreModelsUITwilioSettingsViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsTwilioPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the webhook notification settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsWebhookGet(
      options?: any
    ): AxiosPromise<OmbiCoreModelsUIWebhookNotificationViewModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsWebhookGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the webhook notification settings.
     * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsNotificationsWebhookPost(
      body?: OmbiCoreModelsUIWebhookNotificationViewModel,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsNotificationsWebhookPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Ombi settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsOmbiGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsOmbiSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsOmbiGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Ombi settings.
     * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsOmbiPost(
      body?: OmbiSettingsSettingsModelsOmbiSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsOmbiPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsOmbiResetApiPost(options?: any): AxiosPromise<string> {
      return SettingsApiFp(configuration)
        .apiV1SettingsOmbiResetApiPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Plex Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsPlexGet(
      options?: any
    ): AxiosPromise<OmbiCoreSettingsModelsExternalPlexSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsPlexGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Plex settings.
     * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsPlexPost(
      body?: OmbiCoreSettingsModelsExternalPlexSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsPlexPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Radarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsRadarrGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsExternalRadarrSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsRadarrGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Radarr settings.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsRadarrPost(
      body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsRadarrPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the SickRage Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSickRageGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsExternalSickRageSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsSickRageGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the SickRage settings.
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSickRagePost(
      body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsSickRagePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Sonarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSonarrGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsExternalSonarrSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsSonarrGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Sonarr settings.
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsSonarrPost(
      body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsSonarrPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OmbiModelsCronViewModelBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsTestcronPost(
      body?: OmbiModelsCronViewModelBody,
      options?: any
    ): AxiosPromise<OmbiModelsCronTestModel> {
      return SettingsApiFp(configuration)
        .apiV1SettingsTestcronPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get's the preset themes available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsThemesGet(
      options?: any
    ): AxiosPromise<Array<OmbiModelsPresetThemeViewModel>> {
      return SettingsApiFp(configuration)
        .apiV1SettingsThemesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get The Movie DB settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsThemoviedbGet(
      options?: any
    ): AxiosPromise<OmbiCoreSettingsModelsExternalTheMovieDbSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsThemoviedbGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save The Movie DB settings.
     * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsThemoviedbPost(
      body?: OmbiCoreSettingsModelsExternalTheMovieDbSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsThemoviedbPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Update Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUpdateGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsUpdateSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsUpdateGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Update settings.
     * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUpdatePost(
      body?: OmbiSettingsSettingsModelsUpdateSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsUpdatePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the UserManagement Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUserManagementGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsUserManagementSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsUserManagementGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the UserManagement settings.
     * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsUserManagementPost(
      body?: OmbiSettingsSettingsModelsUserManagementSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsUserManagementPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the Vote Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsVoteGet(
      options?: any
    ): AxiosPromise<OmbiSettingsSettingsModelsVoteSettings> {
      return SettingsApiFp(configuration)
        .apiV1SettingsVoteGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsVotePost(
      body?: OmbiSettingsSettingsModelsVoteSettings,
      options?: any
    ): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsVotePost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SettingsVoteenabledGet(options?: any): AxiosPromise<boolean> {
      return SettingsApiFp(configuration)
        .apiV1SettingsVoteenabledGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsAboutGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsAboutGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Authentication Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsAuthenticationGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsAuthenticationGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Authentication settings.
   * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsAuthenticationPost(
    body?: OmbiSettingsSettingsModelsAuthenticationSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsAuthenticationPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the base url.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsBaseurlGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsBaseurlGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsClientidGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsClientidGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the CouchPotatoSettings Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsCouchPotatoGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsCouchPotatoGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the CouchPotatoSettings settings.
   * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsCouchPotatoPost(
    body?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsCouchPotatoPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Customization Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsCustomizationGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsCustomizationGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Customization settings.
   * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsCustomizationPost(
    body?: OmbiSettingsSettingsModelsCustomizationSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsCustomizationPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the default language set in Ombi
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsDefaultlanguageGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsDefaultlanguageGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the DogNzbSettings Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsDogNzbGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsDogNzbGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the DogNzbSettings settings.
   * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsDogNzbPost(
    body?: OmbiSettingsSettingsModelsExternalDogNzbSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsDogNzbPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Emby Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsEmbyGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsEmbyGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Emby settings.
   * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsEmbyPost(
    body?: OmbiCoreSettingsModelsExternalEmbySettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsEmbyPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Issues Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsIssuesGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsIssuesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Vote settings.
   * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsIssuesPost(
    body?: OmbiSettingsSettingsModelsIssueSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsIssuesPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsIssuesenabledGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsIssuesenabledGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Jellyfin Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsJellyfinGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsJellyfinGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Jellyfin settings.
   * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsJellyfinPost(
    body?: OmbiCoreSettingsModelsExternalJellyfinSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsJellyfinPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the JobSettings Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsJobsGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsJobsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the JobSettings settings.
   * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsJobsPost(
    body?: OmbiSettingsSettingsModelsJobSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsJobsPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Landing Page Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsLandingpageGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsLandingpageGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Landing Page settings.
   * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsLandingpagePost(
    body?: OmbiCoreSettingsModelsLandingPageSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsLandingpagePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Lidarr Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsLidarrGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsLidarrGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Lidarr settings.
   * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsLidarrPost(
    body?: OmbiSettingsSettingsModelsExternalLidarrSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsLidarrPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Lidarr Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsLidarrenabledGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsLidarrenabledGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the discord Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsDiscordGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsDiscordGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the discord notification settings.
   * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsDiscordPost(
    body?: OmbiCoreModelsUIDiscordNotificationsViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsDiscordPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Email Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsEmailEnabledGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsEmailEnabledGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Email Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsEmailGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsEmailGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the email notification settings.
   * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsEmailPost(
    body?: OmbiCoreModelsUIEmailNotificationsViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsEmailPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the gotify Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsGotifyGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsGotifyGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the gotify notification settings.
   * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsGotifyPost(
    body?: OmbiCoreModelsUIGotifyNotificationViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsGotifyPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Mattermost Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsMattermostGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsMattermostGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the Mattermost notification settings.
   * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsMattermostPost(
    body?: OmbiCoreModelsUIMattermostNotificationsViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsMattermostPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Mobile Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsMobileGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsMobileGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the Mobile notification settings.
   * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsMobilePost(
    body?: OmbiCoreModelsUIMobileNotificationsViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsMobilePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Newsletter Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsNewsletterGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsNewsletterGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the Newsletter notification settings.
   * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsNewsletterPost(
    body?: OmbiCoreModelsUINewsletterNotificationViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsNewsletterPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the pushbullet Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsPushbulletGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsPushbulletGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the pushbullet notification settings.
   * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsPushbulletPost(
    body?: OmbiCoreModelsUIPushbulletNotificationViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsPushbulletPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the pushover Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsPushoverGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsPushoverGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the pushover notification settings.
   * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsPushoverPost(
    body?: OmbiCoreModelsUIPushoverNotificationViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsPushoverPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the slack Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsSlackGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsSlackGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the slack notification settings.
   * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsSlackPost(
    body?: OmbiCoreModelsUISlackNotificationsViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsSlackPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the telegram Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsTelegramGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsTelegramGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the telegram notification settings.
   * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsTelegramPost(
    body?: OmbiCoreModelsUITelegramNotificationsViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsTelegramPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Twilio Notification Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsTwilioGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsTwilioGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the Mattermost notification settings.
   * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsTwilioPost(
    body?: OmbiCoreModelsUITwilioSettingsViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsTwilioPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the webhook notification settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsWebhookGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsWebhookGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Saves the webhook notification settings.
   * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsNotificationsWebhookPost(
    body?: OmbiCoreModelsUIWebhookNotificationViewModel,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsNotificationsWebhookPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Ombi settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsOmbiGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsOmbiGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Ombi settings.
   * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsOmbiPost(
    body?: OmbiSettingsSettingsModelsOmbiSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsOmbiPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsOmbiResetApiPost(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsOmbiResetApiPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Plex Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsPlexGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsPlexGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Plex settings.
   * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsPlexPost(
    body?: OmbiCoreSettingsModelsExternalPlexSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsPlexPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Radarr Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsRadarrGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsRadarrGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Radarr settings.
   * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsRadarrPost(
    body?: OmbiSettingsSettingsModelsExternalRadarrSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsRadarrPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the SickRage Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsSickRageGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsSickRageGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the SickRage settings.
   * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsSickRagePost(
    body?: OmbiSettingsSettingsModelsExternalSickRageSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsSickRagePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Sonarr Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsSonarrGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsSonarrGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Sonarr settings.
   * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsSonarrPost(
    body?: OmbiSettingsSettingsModelsExternalSonarrSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsSonarrPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {OmbiModelsCronViewModelBody} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsTestcronPost(
    body?: OmbiModelsCronViewModelBody,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsTestcronPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get's the preset themes available
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsThemesGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsThemesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get The Movie DB settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsThemoviedbGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsThemoviedbGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save The Movie DB settings.
   * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsThemoviedbPost(
    body?: OmbiCoreSettingsModelsExternalTheMovieDbSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsThemoviedbPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Update Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsUpdateGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsUpdateGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Update settings.
   * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsUpdatePost(
    body?: OmbiSettingsSettingsModelsUpdateSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsUpdatePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the UserManagement Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsUserManagementGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsUserManagementGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the UserManagement settings.
   * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsUserManagementPost(
    body?: OmbiSettingsSettingsModelsUserManagementSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsUserManagementPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the Vote Settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsVoteGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsVoteGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Save the Vote settings.
   * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsVotePost(
    body?: OmbiSettingsSettingsModelsVoteSettings,
    options?: any
  ) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsVotePost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public apiV1SettingsVoteenabledGet(options?: any) {
    return SettingsApiFp(this.configuration)
      .apiV1SettingsVoteenabledGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
