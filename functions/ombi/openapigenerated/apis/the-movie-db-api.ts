/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from "../base";
import { OmbiApiTheMovieDbModelsTheMovidDbKeyValue } from "../models";
import { OmbiApiTheMovieDbModelsWatchProvidersResults } from "../models";
import { OmbiTheMovieDbApiModelsGenre } from "../models";
/**
 * TheMovieDbApi - axios parameter creator
 * @export
 */
export const TheMovieDbApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Gets the genres for either Tv or Movies depending on media type
     * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbGenresMediaGet: async (
      media: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'media' is not null or undefined
      if (media === null || media === undefined) {
        throw new RequiredError(
          "media",
          "Required parameter media was null or undefined when calling apiV1TheMovieDbGenresMediaGet."
        );
      }
      const localVarPath = `/api/v1/TheMovieDb/Genres/{media}`.replace(
        `{${"media"}}`,
        encodeURIComponent(String(media))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Searches for keywords matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbKeywordsGet: async (
      searchTerm?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/TheMovieDb/Keywords`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (searchTerm !== undefined) {
        localVarQueryParameter["searchTerm"] = searchTerm;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the keyword matching the specified ID.
     * @param {number} keywordId The keyword ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbKeywordsKeywordIdGet: async (
      keywordId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'keywordId' is not null or undefined
      if (keywordId === null || keywordId === undefined) {
        throw new RequiredError(
          "keywordId",
          "Required parameter keywordId was null or undefined when calling apiV1TheMovieDbKeywordsKeywordIdGet."
        );
      }
      const localVarPath = `/api/v1/TheMovieDb/Keywords/{keywordId}`.replace(
        `{${"keywordId"}}`,
        encodeURIComponent(String(keywordId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbWatchProvidersMovieGet: async (
      searchTerm?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/TheMovieDb/WatchProviders/movie`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (searchTerm !== undefined) {
        localVarQueryParameter["searchTerm"] = searchTerm;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbWatchProvidersTvGet: async (
      searchTerm?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/TheMovieDb/WatchProviders/tv`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (searchTerm !== undefined) {
        localVarQueryParameter["searchTerm"] = searchTerm;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TheMovieDbApi - functional programming interface
 * @export
 */
export const TheMovieDbApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Gets the genres for either Tv or Movies depending on media type
     * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TheMovieDbGenresMediaGet(
      media: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiTheMovieDbApiModelsGenre>>
    > {
      const localVarAxiosArgs = await TheMovieDbApiAxiosParamCreator(
        configuration
      ).apiV1TheMovieDbGenresMediaGet(media, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Searches for keywords matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TheMovieDbKeywordsGet(
      searchTerm?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiApiTheMovieDbModelsTheMovidDbKeyValue>>
    > {
      const localVarAxiosArgs = await TheMovieDbApiAxiosParamCreator(
        configuration
      ).apiV1TheMovieDbKeywordsGet(searchTerm, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Gets the keyword matching the specified ID.
     * @param {number} keywordId The keyword ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TheMovieDbKeywordsKeywordIdGet(
      keywordId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await TheMovieDbApiAxiosParamCreator(
        configuration
      ).apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TheMovieDbWatchProvidersMovieGet(
      searchTerm?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiApiTheMovieDbModelsWatchProvidersResults>>
    > {
      const localVarAxiosArgs = await TheMovieDbApiAxiosParamCreator(
        configuration
      ).apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TheMovieDbWatchProvidersTvGet(
      searchTerm?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiApiTheMovieDbModelsWatchProvidersResults>>
    > {
      const localVarAxiosArgs = await TheMovieDbApiAxiosParamCreator(
        configuration
      ).apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * TheMovieDbApi - factory interface
 * @export
 */
export const TheMovieDbApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Gets the genres for either Tv or Movies depending on media type
     * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbGenresMediaGet(
      media: string,
      options?: any
    ): AxiosPromise<Array<OmbiTheMovieDbApiModelsGenre>> {
      return TheMovieDbApiFp(configuration)
        .apiV1TheMovieDbGenresMediaGet(media, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Searches for keywords matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbKeywordsGet(
      searchTerm?: string,
      options?: any
    ): AxiosPromise<Array<OmbiApiTheMovieDbModelsTheMovidDbKeyValue>> {
      return TheMovieDbApiFp(configuration)
        .apiV1TheMovieDbKeywordsGet(searchTerm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the keyword matching the specified ID.
     * @param {number} keywordId The keyword ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbKeywordsKeywordIdGet(
      keywordId: number,
      options?: any
    ): AxiosPromise<void> {
      return TheMovieDbApiFp(configuration)
        .apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbWatchProvidersMovieGet(
      searchTerm?: string,
      options?: any
    ): AxiosPromise<Array<OmbiApiTheMovieDbModelsWatchProvidersResults>> {
      return TheMovieDbApiFp(configuration)
        .apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TheMovieDbWatchProvidersTvGet(
      searchTerm?: string,
      options?: any
    ): AxiosPromise<Array<OmbiApiTheMovieDbModelsWatchProvidersResults>> {
      return TheMovieDbApiFp(configuration)
        .apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TheMovieDbApi - object-oriented interface
 * @export
 * @class TheMovieDbApi
 * @extends {BaseAPI}
 */
export class TheMovieDbApi extends BaseAPI {
  /**
   *
   * @summary Gets the genres for either Tv or Movies depending on media type
   * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TheMovieDbApi
   */
  public apiV1TheMovieDbGenresMediaGet(media: string, options?: any) {
    return TheMovieDbApiFp(this.configuration)
      .apiV1TheMovieDbGenresMediaGet(media, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Searches for keywords matching the specified term.
   * @param {string} [searchTerm] The search term.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TheMovieDbApi
   */
  public apiV1TheMovieDbKeywordsGet(searchTerm?: string, options?: any) {
    return TheMovieDbApiFp(this.configuration)
      .apiV1TheMovieDbKeywordsGet(searchTerm, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Gets the keyword matching the specified ID.
   * @param {number} keywordId The keyword ID.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TheMovieDbApi
   */
  public apiV1TheMovieDbKeywordsKeywordIdGet(keywordId: number, options?: any) {
    return TheMovieDbApiFp(this.configuration)
      .apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Searches for the watch providers matching the specified term.
   * @param {string} [searchTerm] The search term.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TheMovieDbApi
   */
  public apiV1TheMovieDbWatchProvidersMovieGet(
    searchTerm?: string,
    options?: any
  ) {
    return TheMovieDbApiFp(this.configuration)
      .apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Searches for the watch providers matching the specified term.
   * @param {string} [searchTerm] The search term.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TheMovieDbApi
   */
  public apiV1TheMovieDbWatchProvidersTvGet(
    searchTerm?: string,
    options?: any
  ) {
    return TheMovieDbApiFp(this.configuration)
      .apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
