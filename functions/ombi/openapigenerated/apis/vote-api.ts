/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from "../base";
import { OmbiCoreModelsUIVoteViewModel } from "../models";
import { OmbiCoreModelsVoteEngineResult } from "../models";
import { OmbiStoreEntitiesVotes } from "../models";
/**
 * VoteApi - axios parameter creator
 * @export
 */
export const VoteApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Downvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteDownAlbumRequestIdPost: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteDownAlbumRequestIdPost."
        );
      }
      const localVarPath = `/api/v1/Vote/down/album/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Downvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteDownMovieRequestIdPost: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteDownMovieRequestIdPost."
        );
      }
      const localVarPath = `/api/v1/Vote/down/movie/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Downvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteDownTvRequestIdPost: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteDownTvRequestIdPost."
        );
      }
      const localVarPath = `/api/v1/Vote/down/tv/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns the viewmodel to render on the UI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Vote`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteMovieRequestIdGet: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteMovieRequestIdGet."
        );
      }
      const localVarPath = `/api/v1/Vote/movie/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteMusicRequestIdGet: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteMusicRequestIdGet."
        );
      }
      const localVarPath = `/api/v1/Vote/music/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteTvRequestIdGet: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteTvRequestIdGet."
        );
      }
      const localVarPath = `/api/v1/Vote/tv/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteUpAlbumRequestIdPost: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteUpAlbumRequestIdPost."
        );
      }
      const localVarPath = `/api/v1/Vote/up/album/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteUpMovieRequestIdPost: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteUpMovieRequestIdPost."
        );
      }
      const localVarPath = `/api/v1/Vote/up/movie/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteUpTvRequestIdPost: async (
      requestId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          "requestId",
          "Required parameter requestId was null or undefined when calling apiV1VoteUpTvRequestIdPost."
        );
      }
      const localVarPath = `/api/v1/Vote/up/tv/{requestId}`.replace(
        `{${"requestId"}}`,
        encodeURIComponent(String(requestId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VoteApi - functional programming interface
 * @export
 */
export const VoteApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Downvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteDownAlbumRequestIdPost(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsVoteEngineResult>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteDownAlbumRequestIdPost(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Downvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteDownMovieRequestIdPost(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsVoteEngineResult>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteDownMovieRequestIdPost(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Downvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteDownTvRequestIdPost(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsVoteEngineResult>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteDownTvRequestIdPost(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Returns the viewmodel to render on the UI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiCoreModelsUIVoteViewModel>>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteMovieRequestIdGet(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiStoreEntitiesVotes>>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteMovieRequestIdGet(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteMusicRequestIdGet(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiStoreEntitiesVotes>>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteMusicRequestIdGet(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteTvRequestIdGet(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OmbiStoreEntitiesVotes>>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteTvRequestIdGet(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Upvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteUpAlbumRequestIdPost(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsVoteEngineResult>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteUpAlbumRequestIdPost(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Upvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteUpMovieRequestIdPost(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsVoteEngineResult>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteUpMovieRequestIdPost(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Upvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1VoteUpTvRequestIdPost(
      requestId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OmbiCoreModelsVoteEngineResult>
    > {
      const localVarAxiosArgs = await VoteApiAxiosParamCreator(
        configuration
      ).apiV1VoteUpTvRequestIdPost(requestId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * VoteApi - factory interface
 * @export
 */
export const VoteApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Downvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteDownAlbumRequestIdPost(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsVoteEngineResult> {
      return VoteApiFp(configuration)
        .apiV1VoteDownAlbumRequestIdPost(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Downvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteDownMovieRequestIdPost(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsVoteEngineResult> {
      return VoteApiFp(configuration)
        .apiV1VoteDownMovieRequestIdPost(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Downvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteDownTvRequestIdPost(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsVoteEngineResult> {
      return VoteApiFp(configuration)
        .apiV1VoteDownTvRequestIdPost(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns the viewmodel to render on the UI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteGet(
      options?: any
    ): AxiosPromise<Array<OmbiCoreModelsUIVoteViewModel>> {
      return VoteApiFp(configuration)
        .apiV1VoteGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteMovieRequestIdGet(
      requestId: number,
      options?: any
    ): AxiosPromise<Array<OmbiStoreEntitiesVotes>> {
      return VoteApiFp(configuration)
        .apiV1VoteMovieRequestIdGet(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteMusicRequestIdGet(
      requestId: number,
      options?: any
    ): AxiosPromise<Array<OmbiStoreEntitiesVotes>> {
      return VoteApiFp(configuration)
        .apiV1VoteMusicRequestIdGet(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteTvRequestIdGet(
      requestId: number,
      options?: any
    ): AxiosPromise<Array<OmbiStoreEntitiesVotes>> {
      return VoteApiFp(configuration)
        .apiV1VoteTvRequestIdGet(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteUpAlbumRequestIdPost(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsVoteEngineResult> {
      return VoteApiFp(configuration)
        .apiV1VoteUpAlbumRequestIdPost(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteUpMovieRequestIdPost(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsVoteEngineResult> {
      return VoteApiFp(configuration)
        .apiV1VoteUpMovieRequestIdPost(requestId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1VoteUpTvRequestIdPost(
      requestId: number,
      options?: any
    ): AxiosPromise<OmbiCoreModelsVoteEngineResult> {
      return VoteApiFp(configuration)
        .apiV1VoteUpTvRequestIdPost(requestId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VoteApi - object-oriented interface
 * @export
 * @class VoteApi
 * @extends {BaseAPI}
 */
export class VoteApi extends BaseAPI {
  /**
   *
   * @summary Downvotes a album
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteDownAlbumRequestIdPost(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteDownAlbumRequestIdPost(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Downvotes a movie
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteDownMovieRequestIdPost(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteDownMovieRequestIdPost(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Downvotes a tv show
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteDownTvRequestIdPost(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteDownTvRequestIdPost(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Returns the viewmodel to render on the UI
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteGet(options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get's all the votes for the request id
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteMovieRequestIdGet(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteMovieRequestIdGet(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get's all the votes for the request id
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteMusicRequestIdGet(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteMusicRequestIdGet(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get's all the votes for the request id
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteTvRequestIdGet(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteTvRequestIdGet(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Upvotes a album
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteUpAlbumRequestIdPost(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteUpAlbumRequestIdPost(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Upvotes a movie
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteUpMovieRequestIdPost(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteUpMovieRequestIdPost(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Upvotes a tv show
   * @param {number} requestId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoteApi
   */
  public apiV1VoteUpTvRequestIdPost(requestId: number, options?: any) {
    return VoteApiFp(this.configuration)
      .apiV1VoteUpTvRequestIdPost(requestId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
