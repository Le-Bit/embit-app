/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI } from "../base";
/**
 * JobApi - axios parameter creator
 * @export
 */
export const JobApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Runs the Arr Availability Checker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobArrAvailabilityPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/arrAvailability`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobAutodeleterequestsPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/autodeleterequests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Clear out the media server and resync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobClearmediaserverdataPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/clearmediaserverdata`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the Emby Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobEmbycontentcacherPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/embycontentcacher`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the Emby User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobEmbyuserimporterPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/embyuserimporter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the Jellyfin Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobJellyfincontentcacherPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/jellyfincontentcacher`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the Jellyfin User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobJellyfinuserimporterPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/jellyfinuserimporter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the newsletter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobNewsletterPost: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/newsletter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the Plex Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobPlexcontentcacherPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/plexcontentcacher`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs a smaller version of the content cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobPlexrecentlyaddedPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/plexrecentlyadded`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the Plex User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobPlexuserimporterPost: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/plexuserimporter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Checks for an update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobUpdateGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Runs the update job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobUpdatePost: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Job/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * JobApi - functional programming interface
 * @export
 */
export const JobApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Runs the Arr Availability Checker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobArrAvailabilityPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobArrAvailabilityPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobAutodeleterequestsPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobAutodeleterequestsPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Clear out the media server and resync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobClearmediaserverdataPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobClearmediaserverdataPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the Emby Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobEmbycontentcacherPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobEmbycontentcacherPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the Emby User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobEmbyuserimporterPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobEmbyuserimporterPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the Jellyfin Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobJellyfincontentcacherPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobJellyfincontentcacherPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the Jellyfin User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobJellyfinuserimporterPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobJellyfinuserimporterPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the newsletter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobNewsletterPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobNewsletterPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the Plex Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobPlexcontentcacherPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobPlexcontentcacherPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs a smaller version of the content cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobPlexrecentlyaddedPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobPlexrecentlyaddedPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the Plex User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobPlexuserimporterPost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobPlexuserimporterPost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Checks for an update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobUpdateGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobUpdateGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Runs the update job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1JobUpdatePost(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await JobApiAxiosParamCreator(
        configuration
      ).apiV1JobUpdatePost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * JobApi - factory interface
 * @export
 */
export const JobApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Runs the Arr Availability Checker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobArrAvailabilityPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobArrAvailabilityPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobAutodeleterequestsPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobAutodeleterequestsPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Clear out the media server and resync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobClearmediaserverdataPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobClearmediaserverdataPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the Emby Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobEmbycontentcacherPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobEmbycontentcacherPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the Emby User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobEmbyuserimporterPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobEmbyuserimporterPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the Jellyfin Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobJellyfincontentcacherPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobJellyfincontentcacherPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the Jellyfin User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobJellyfinuserimporterPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobJellyfinuserimporterPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the newsletter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobNewsletterPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobNewsletterPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the Plex Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobPlexcontentcacherPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobPlexcontentcacherPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs a smaller version of the content cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobPlexrecentlyaddedPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobPlexrecentlyaddedPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the Plex User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobPlexuserimporterPost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobPlexuserimporterPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Checks for an update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobUpdateGet(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobUpdateGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Runs the update job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1JobUpdatePost(options?: any): AxiosPromise<boolean> {
      return JobApiFp(configuration)
        .apiV1JobUpdatePost(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
export class JobApi extends BaseAPI {
  /**
   *
   * @summary Runs the Arr Availability Checker
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobArrAvailabilityPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobArrAvailabilityPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobAutodeleterequestsPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobAutodeleterequestsPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Clear out the media server and resync
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobClearmediaserverdataPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobClearmediaserverdataPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the Emby Content Cacher
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobEmbycontentcacherPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobEmbycontentcacherPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the Emby User importer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobEmbyuserimporterPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobEmbyuserimporterPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the Jellyfin Content Cacher
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobJellyfincontentcacherPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobJellyfincontentcacherPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the Jellyfin User importer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobJellyfinuserimporterPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobJellyfinuserimporterPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the newsletter
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobNewsletterPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobNewsletterPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the Plex Content Cacher
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobPlexcontentcacherPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobPlexcontentcacherPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs a smaller version of the content cacher
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobPlexrecentlyaddedPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobPlexrecentlyaddedPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the Plex User importer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobPlexuserimporterPost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobPlexuserimporterPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Checks for an update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobUpdateGet(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobUpdateGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Runs the update job
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobApi
   */
  public apiV1JobUpdatePost(options?: any) {
    return JobApiFp(this.configuration)
      .apiV1JobUpdatePost(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
