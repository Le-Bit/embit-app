"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TheMovieDbApi = exports.TheMovieDbApiFactory = exports.TheMovieDbApiFp = exports.TheMovieDbApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * TheMovieDbApi - axios parameter creator
 * @export
 */
const TheMovieDbApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Gets the genres for either Tv or Movies depending on media type
         * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbGenresMediaGet: async (media, options = {}) => {
            // verify required parameter 'media' is not null or undefined
            if (media === null || media === undefined) {
                throw new base_1.RequiredError("media", "Required parameter media was null or undefined when calling apiV1TheMovieDbGenresMediaGet.");
            }
            const localVarPath = `/api/v1/TheMovieDb/Genres/{media}`.replace(`{${"media"}}`, encodeURIComponent(String(media)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for keywords matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbKeywordsGet: async (searchTerm, options = {}) => {
            const localVarPath = `/api/v1/TheMovieDb/Keywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter["searchTerm"] = searchTerm;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the keyword matching the specified ID.
         * @param {number} keywordId The keyword ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbKeywordsKeywordIdGet: async (keywordId, options = {}) => {
            // verify required parameter 'keywordId' is not null or undefined
            if (keywordId === null || keywordId === undefined) {
                throw new base_1.RequiredError("keywordId", "Required parameter keywordId was null or undefined when calling apiV1TheMovieDbKeywordsKeywordIdGet.");
            }
            const localVarPath = `/api/v1/TheMovieDb/Keywords/{keywordId}`.replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for the watch providers matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbWatchProvidersMovieGet: async (searchTerm, options = {}) => {
            const localVarPath = `/api/v1/TheMovieDb/WatchProviders/movie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter["searchTerm"] = searchTerm;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for the watch providers matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbWatchProvidersTvGet: async (searchTerm, options = {}) => {
            const localVarPath = `/api/v1/TheMovieDb/WatchProviders/tv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter["searchTerm"] = searchTerm;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TheMovieDbApiAxiosParamCreator = TheMovieDbApiAxiosParamCreator;
/**
 * TheMovieDbApi - functional programming interface
 * @export
 */
const TheMovieDbApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Gets the genres for either Tv or Movies depending on media type
         * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TheMovieDbGenresMediaGet(media, options) {
            const localVarAxiosArgs = await (0, exports.TheMovieDbApiAxiosParamCreator)(configuration).apiV1TheMovieDbGenresMediaGet(media, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Searches for keywords matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TheMovieDbKeywordsGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.TheMovieDbApiAxiosParamCreator)(configuration).apiV1TheMovieDbKeywordsGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the keyword matching the specified ID.
         * @param {number} keywordId The keyword ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options) {
            const localVarAxiosArgs = await (0, exports.TheMovieDbApiAxiosParamCreator)(configuration).apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Searches for the watch providers matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.TheMovieDbApiAxiosParamCreator)(configuration).apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Searches for the watch providers matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.TheMovieDbApiAxiosParamCreator)(configuration).apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.TheMovieDbApiFp = TheMovieDbApiFp;
/**
 * TheMovieDbApi - factory interface
 * @export
 */
const TheMovieDbApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Gets the genres for either Tv or Movies depending on media type
         * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbGenresMediaGet(media, options) {
            return (0, exports.TheMovieDbApiFp)(configuration)
                .apiV1TheMovieDbGenresMediaGet(media, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Searches for keywords matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbKeywordsGet(searchTerm, options) {
            return (0, exports.TheMovieDbApiFp)(configuration)
                .apiV1TheMovieDbKeywordsGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the keyword matching the specified ID.
         * @param {number} keywordId The keyword ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options) {
            return (0, exports.TheMovieDbApiFp)(configuration)
                .apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Searches for the watch providers matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options) {
            return (0, exports.TheMovieDbApiFp)(configuration)
                .apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Searches for the watch providers matching the specified term.
         * @param {string} [searchTerm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options) {
            return (0, exports.TheMovieDbApiFp)(configuration)
                .apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.TheMovieDbApiFactory = TheMovieDbApiFactory;
/**
 * TheMovieDbApi - object-oriented interface
 * @export
 * @class TheMovieDbApi
 * @extends {BaseAPI}
 */
class TheMovieDbApi extends base_1.BaseAPI {
    /**
     *
     * @summary Gets the genres for either Tv or Movies depending on media type
     * @param {string} media Either &#x60;tv&#x60; or &#x60;movie&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TheMovieDbApi
     */
    apiV1TheMovieDbGenresMediaGet(media, options) {
        return (0, exports.TheMovieDbApiFp)(this.configuration)
            .apiV1TheMovieDbGenresMediaGet(media, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Searches for keywords matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TheMovieDbApi
     */
    apiV1TheMovieDbKeywordsGet(searchTerm, options) {
        return (0, exports.TheMovieDbApiFp)(this.configuration)
            .apiV1TheMovieDbKeywordsGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the keyword matching the specified ID.
     * @param {number} keywordId The keyword ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TheMovieDbApi
     */
    apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options) {
        return (0, exports.TheMovieDbApiFp)(this.configuration)
            .apiV1TheMovieDbKeywordsKeywordIdGet(keywordId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TheMovieDbApi
     */
    apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options) {
        return (0, exports.TheMovieDbApiFp)(this.configuration)
            .apiV1TheMovieDbWatchProvidersMovieGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Searches for the watch providers matching the specified term.
     * @param {string} [searchTerm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TheMovieDbApi
     */
    apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options) {
        return (0, exports.TheMovieDbApiFp)(this.configuration)
            .apiV1TheMovieDbWatchProvidersTvGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.TheMovieDbApi = TheMovieDbApi;
//# sourceMappingURL=the-movie-db-api.js.map