"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchApi = exports.SearchApiFactory = exports.SearchApiFp = exports.SearchApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * SearchApi - axios parameter creator
 * @export
 */
const SearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Searches for movies by a certain actor.
         * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieActorPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Search/movie/actor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieInfoPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Search/movie/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {number} theMovieDbId The movie database identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieInfoTheMovieDbIdGet: async (theMovieDbId, options = {}) => {
            // verify required parameter 'theMovieDbId' is not null or undefined
            if (theMovieDbId === null || theMovieDbId === undefined) {
                throw new base_1.RequiredError("theMovieDbId", "Required parameter theMovieDbId was null or undefined when calling apiV1SearchMovieInfoTheMovieDbIdGet.");
            }
            const localVarPath = `/api/v1/Search/movie/info/{theMovieDbId}`.replace(`{${"theMovieDbId"}}`, encodeURIComponent(String(theMovieDbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Retuns Now Playing Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieNowplayingGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/movie/nowplaying`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMoviePopularGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/movie/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMoviePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Search/movie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieSearchTermGet: async (searchTerm, options = {}) => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new base_1.RequiredError("searchTerm", "Required parameter searchTerm was null or undefined when calling apiV1SearchMovieSearchTermGet.");
            }
            const localVarPath = `/api/v1/Search/movie/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieSimilarPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Search/movie/similar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {number} theMovieDbId ID of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieTheMovieDbIdSimilarGet: async (theMovieDbId, options = {}) => {
            // verify required parameter 'theMovieDbId' is not null or undefined
            if (theMovieDbId === null || theMovieDbId === undefined) {
                throw new base_1.RequiredError("theMovieDbId", "Required parameter theMovieDbId was null or undefined when calling apiV1SearchMovieTheMovieDbIdSimilarGet.");
            }
            const localVarPath = `/api/v1/Search/movie/{theMovieDbId}/similar`.replace(`{${"theMovieDbId"}}`, encodeURIComponent(String(theMovieDbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieTopratedGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/movie/toprated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieUpcomingGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/movie/upcoming`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information specified by the foreignAlbumId passed in
         * @param {string} foreignAlbumId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicAlbumInfoForeignAlbumIdGet: async (foreignAlbumId, options = {}) => {
            // verify required parameter 'foreignAlbumId' is not null or undefined
            if (foreignAlbumId === null || foreignAlbumId === undefined) {
                throw new base_1.RequiredError("foreignAlbumId", "Required parameter foreignAlbumId was null or undefined when calling apiV1SearchMusicAlbumInfoForeignAlbumIdGet.");
            }
            const localVarPath = `/api/v1/Search/music/album/info/{foreignAlbumId}`.replace(`{${"foreignAlbumId"}}`, encodeURIComponent(String(foreignAlbumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information we searched for
         * @param {string} searchTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicAlbumSearchTermGet: async (searchTerm, options = {}) => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new base_1.RequiredError("searchTerm", "Required parameter searchTerm was null or undefined when calling apiV1SearchMusicAlbumSearchTermGet.");
            }
            const localVarPath = `/api/v1/Search/music/album/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns all albums for the artist using the ForeignArtistId
         * @param {string} foreignArtistId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicArtistAlbumForeignArtistIdGet: async (foreignArtistId, options = {}) => {
            // verify required parameter 'foreignArtistId' is not null or undefined
            if (foreignArtistId === null || foreignArtistId === undefined) {
                throw new base_1.RequiredError("foreignArtistId", "Required parameter foreignArtistId was null or undefined when calling apiV1SearchMusicArtistAlbumForeignArtistIdGet.");
            }
            const localVarPath = `/api/v1/Search/music/artist/album/{foreignArtistId}`.replace(`{${"foreignArtistId"}}`, encodeURIComponent(String(foreignArtistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the artist information we searched for
         * @param {string} searchTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicArtistSearchTermGet: async (searchTerm, options = {}) => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new base_1.RequiredError("searchTerm", "Required parameter searchTerm was null or undefined when calling apiV1SearchMusicArtistSearchTermGet.");
            }
            const localVarPath = `/api/v1/Search/music/artist/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticiplateds tv shows.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvAnticipatedGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/tv/anticipated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Gets extra show information.
         * @param {string} tvdbId The TVDB identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvInfoTvdbIdGet: async (tvdbId, options = {}) => {
            // verify required parameter 'tvdbId' is not null or undefined
            if (tvdbId === null || tvdbId === undefined) {
                throw new base_1.RequiredError("tvdbId", "Required parameter tvdbId was null or undefined when calling apiV1SearchTvInfoTvdbIdGet.");
            }
            const localVarPath = `/api/v1/Search/tv/info/{tvdbId}`.replace(`{${"tvdbId"}}`, encodeURIComponent(String(tvdbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvMostwatchedGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/tv/mostwatched`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvPopularGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/tv/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Searches for a Tv Show.
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvSearchTermGet: async (searchTerm, options = {}) => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new base_1.RequiredError("searchTerm", "Required parameter searchTerm was null or undefined when calling apiV1SearchTvSearchTermGet.");
            }
            const localVarPath = `/api/v1/Search/tv/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvTrendingGet: async (options = {}) => {
            const localVarPath = `/api/v1/Search/tv/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns all the movies that is by the actor id
         * @param {number} actorId TheMovieDb Actor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchActorActorIdMovieGet: async (actorId, options = {}) => {
            // verify required parameter 'actorId' is not null or undefined
            if (actorId === null || actorId === undefined) {
                throw new base_1.RequiredError("actorId", "Required parameter actorId was null or undefined when calling apiV2SearchActorActorIdMovieGet.");
            }
            const localVarPath = `/api/v2/Search/actor/{actorId}/movie`.replace(`{${"actorId"}}`, encodeURIComponent(String(actorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns all the tv shows that is by the actor id
         * @param {number} actorId TheMovieDb Actor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchActorActorIdTvGet: async (actorId, options = {}) => {
            // verify required parameter 'actorId' is not null or undefined
            if (actorId === null || actorId === undefined) {
                throw new base_1.RequiredError("actorId", "Required parameter actorId was null or undefined when calling apiV2SearchActorActorIdTvGet.");
            }
            const localVarPath = `/api/v2/Search/actor/{actorId}/tv`.replace(`{${"actorId"}}`, encodeURIComponent(String(actorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Advanced Searched Media using paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost: async (currentPosition, amountToLoad, body, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost.");
            }
            const localVarPath = `/api/v2/Search/advancedSearch/movie/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} albumId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchArtistAlbumAlbumIdGet: async (albumId, options = {}) => {
            // verify required parameter 'albumId' is not null or undefined
            if (albumId === null || albumId === undefined) {
                throw new base_1.RequiredError("albumId", "Required parameter albumId was null or undefined when calling apiV2SearchArtistAlbumAlbumIdGet.");
            }
            const localVarPath = `/api/v2/Search/artist/album/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(albumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} artistId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchArtistArtistIdGet: async (artistId, options = {}) => {
            // verify required parameter 'artistId' is not null or undefined
            if (artistId === null || artistId === undefined) {
                throw new base_1.RequiredError("artistId", "Required parameter artistId was null or undefined when calling apiV2SearchArtistArtistIdGet.");
            }
            const localVarPath = `/api/v2/Search/artist/{artistId}`.replace(`{${"artistId"}}`, encodeURIComponent(String(artistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchArtistRequestRequestIdGet: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV2SearchArtistRequestRequestIdGet.");
            }
            const localVarPath = `/api/v2/Search/artist/request/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns basic information about the provided collection
         * @param {number} collectionId The collection id from TheMovieDb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieCollectionCollectionIdGet: async (collectionId, options = {}) => {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new base_1.RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling apiV2SearchMovieCollectionCollectionIdGet.");
            }
            const localVarPath = `/api/v2/Search/movie/collection/{collectionId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} imdbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieImdbImdbidGet: async (imdbId, options = {}) => {
            // verify required parameter 'imdbId' is not null or undefined
            if (imdbId === null || imdbId === undefined) {
                throw new base_1.RequiredError("imdbId", "Required parameter imdbId was null or undefined when calling apiV2SearchMovieImdbImdbidGet.");
            }
            const localVarPath = `/api/v2/Search/movie/imdb/{imdbid}`.replace(`{${"imdbId"}}`, encodeURIComponent(String(imdbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns details for a single movie
         * @param {number} movieDbId The MovieDB Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieMovieDbIdGet: async (movieDbId, options = {}) => {
            // verify required parameter 'movieDbId' is not null or undefined
            if (movieDbId === null || movieDbId === undefined) {
                throw new base_1.RequiredError("movieDbId", "Required parameter movieDbId was null or undefined when calling apiV2SearchMovieMovieDbIdGet.");
            }
            const localVarPath = `/api/v2/Search/movie/{movieDbId}`.replace(`{${"movieDbId"}}`, encodeURIComponent(String(movieDbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Now Playing Movies by page
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/movie/nowplaying/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Now Playing Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieNowplayingGet: async (options = {}) => {
            const localVarPath = `/api/v2/Search/movie/nowplaying`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies using paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMoviePopularCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchMoviePopularCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchMoviePopularCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/movie/popular/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMoviePopularGet: async (options = {}) => {
            const localVarPath = `/api/v2/Search/movie/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns details for a single movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieRequestRequestIdGet: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV2SearchMovieRequestRequestIdGet.");
            }
            const localVarPath = `/api/v2/Search/movie/request/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Recently Requested Movies using Paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/movie/requested/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Seasonal Movies
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/movie/seasonal/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {OmbiModelsSimilarMoviesRefineModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieSimilarPost: async (body, options = {}) => {
            const localVarPath = `/api/v2/Search/movie/similar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/movie/toprated/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieTopratedGet: async (options = {}) => {
            const localVarPath = `/api/v2/Search/movie/toprated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/movie/upcoming/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieUpcomingGet: async (options = {}) => {
            const localVarPath = `/api/v2/Search/movie/upcoming`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
         * @summary Returns search results for both TV and Movies
         * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
         * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMultiSearchTermPost: async (searchTerm, body, options = {}) => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new base_1.RequiredError("searchTerm", "Required parameter searchTerm was null or undefined when calling apiV2SearchMultiSearchTermPost.");
            }
            const localVarPath = `/api/v2/Search/multi/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} name
         * @param {number} year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchRatingsMovieNameYearGet: async (name, year, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling apiV2SearchRatingsMovieNameYearGet.");
            }
            // verify required parameter 'year' is not null or undefined
            if (year === null || year === undefined) {
                throw new base_1.RequiredError("year", "Required parameter year was null or undefined when calling apiV2SearchRatingsMovieNameYearGet.");
            }
            const localVarPath = `/api/v2/Search/ratings/movie/{name}/{year}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} name
         * @param {number} year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchRatingsTvNameYearGet: async (name, year, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling apiV2SearchRatingsTvNameYearGet.");
            }
            // verify required parameter 'year' is not null or undefined
            if (year === null || year === undefined) {
                throw new base_1.RequiredError("year", "Required parameter year was null or undefined when calling apiV2SearchRatingsTvNameYearGet.");
            }
            const localVarPath = `/api/v2/Search/ratings/tv/{name}/{year}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} musicBrainzId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchReleasegroupartMusicBrainzIdGet: async (musicBrainzId, options = {}) => {
            // verify required parameter 'musicBrainzId' is not null or undefined
            if (musicBrainzId === null || musicBrainzId === undefined) {
                throw new base_1.RequiredError("musicBrainzId", "Required parameter musicBrainzId was null or undefined when calling apiV2SearchReleasegroupartMusicBrainzIdGet.");
            }
            const localVarPath = `/api/v2/Search/releasegroupart/{musicBrainzId}`.replace(`{${"musicBrainzId"}}`, encodeURIComponent(String(musicBrainzId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} movieDBId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchStreamMovieMovieDbIdGet: async (movieDBId, options = {}) => {
            // verify required parameter 'movieDBId' is not null or undefined
            if (movieDBId === null || movieDBId === undefined) {
                throw new base_1.RequiredError("movieDBId", "Required parameter movieDBId was null or undefined when calling apiV2SearchStreamMovieMovieDbIdGet.");
            }
            const localVarPath = `/api/v2/Search/stream/movie/{movieDbId}`.replace(`{${"movieDBId"}}`, encodeURIComponent(String(movieDBId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchStreamTvMovieDbIdGet: async (movieDbId, options = {}) => {
            // verify required parameter 'movieDbId' is not null or undefined
            if (movieDbId === null || movieDbId === undefined) {
                throw new base_1.RequiredError("movieDbId", "Required parameter movieDbId was null or undefined when calling apiV2SearchStreamTvMovieDbIdGet.");
            }
            const localVarPath = `/api/v2/Search/stream/tv/{movieDbId}`.replace(`{${"movieDbId"}}`, encodeURIComponent(String(movieDbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticipated tv shows by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/tv/anticipated/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/tv/mostwatched/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns details for a single show
         * @param {string} moviedbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvMoviedbMoviedbidGet: async (moviedbid, options = {}) => {
            // verify required parameter 'moviedbid' is not null or undefined
            if (moviedbid === null || moviedbid === undefined) {
                throw new base_1.RequiredError("moviedbid", "Required parameter moviedbid was null or undefined when calling apiV2SearchTvMoviedbMoviedbidGet.");
            }
            const localVarPath = `/api/v2/Search/tv/moviedb/{moviedbid}`.replace(`{${"moviedbid"}}`, encodeURIComponent(String(moviedbid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvPopularCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchTvPopularCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvPopularCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/tv/popular/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * TVMaze is the TV Show Provider
         * @summary Returns details for a single show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvRequestRequestIdGet: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV2SearchTvRequestRequestIdGet.");
            }
            const localVarPath = `/api/v2/Search/tv/request/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Recently Requested Tv using Paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvRequestedCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchTvRequestedCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvRequestedCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/tv/requested/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows by page
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvTrendingCurrentPositionAmountToLoadGet: async (currentPosition, amountToLoad, options = {}) => {
            // verify required parameter 'currentPosition' is not null or undefined
            if (currentPosition === null || currentPosition === undefined) {
                throw new base_1.RequiredError("currentPosition", "Required parameter currentPosition was null or undefined when calling apiV2SearchTvTrendingCurrentPositionAmountToLoadGet.");
            }
            // verify required parameter 'amountToLoad' is not null or undefined
            if (amountToLoad === null || amountToLoad === undefined) {
                throw new base_1.RequiredError("amountToLoad", "Required parameter amountToLoad was null or undefined when calling apiV2SearchTvTrendingCurrentPositionAmountToLoadGet.");
            }
            const localVarPath = `/api/v2/Search/tv/trending/{currentPosition}/{amountToLoad}`
                .replace(`{${"currentPosition"}}`, encodeURIComponent(String(currentPosition)))
                .replace(`{${"amountToLoad"}}`, encodeURIComponent(String(amountToLoad)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * TVMaze is the TV Show Provider
         * @summary Returns details for a single show
         * @param {string} tvdbid The TVDB Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvTvdbIdGet: async (tvdbid, options = {}) => {
            // verify required parameter 'tvdbid' is not null or undefined
            if (tvdbid === null || tvdbid === undefined) {
                throw new base_1.RequiredError("tvdbid", "Required parameter tvdbid was null or undefined when calling apiV2SearchTvTvdbIdGet.");
            }
            const localVarPath = `/api/v2/Search/tv/{tvdbId}`.replace(`{${"tvdbid"}}`, encodeURIComponent(String(tvdbid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SearchApiAxiosParamCreator = SearchApiAxiosParamCreator;
/**
 * SearchApi - functional programming interface
 * @export
 */
const SearchApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Searches for movies by a certain actor.
         * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieActorPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieActorPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieInfoPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieInfoPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {number} theMovieDbId The movie database identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Retuns Now Playing Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieNowplayingGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieNowplayingGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMoviePopularGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMoviePopularGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMoviePost(body, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMoviePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieSearchTermGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieSearchTermGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieSimilarPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieSimilarPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {number} theMovieDbId ID of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieTopratedGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieTopratedGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMovieUpcomingGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMovieUpcomingGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information specified by the foreignAlbumId passed in
         * @param {string} foreignAlbumId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information we searched for
         * @param {string} searchTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMusicAlbumSearchTermGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMusicAlbumSearchTermGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns all albums for the artist using the ForeignArtistId
         * @param {string} foreignArtistId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the artist information we searched for
         * @param {string} searchTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchMusicArtistSearchTermGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchMusicArtistSearchTermGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticiplateds tv shows.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchTvAnticipatedGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchTvAnticipatedGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Gets extra show information.
         * @param {string} tvdbId The TVDB identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchTvInfoTvdbIdGet(tvdbId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchTvInfoTvdbIdGet(tvdbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchTvMostwatchedGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchTvMostwatchedGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchTvPopularGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchTvPopularGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Searches for a Tv Show.
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchTvSearchTermGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchTvSearchTermGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SearchTvTrendingGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV1SearchTvTrendingGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns all the movies that is by the actor id
         * @param {number} actorId TheMovieDb Actor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchActorActorIdMovieGet(actorId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchActorActorIdMovieGet(actorId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns all the tv shows that is by the actor id
         * @param {number} actorId TheMovieDb Actor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchActorActorIdTvGet(actorId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchActorActorIdTvGet(actorId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Advanced Searched Media using paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(currentPosition, amountToLoad, body, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(currentPosition, amountToLoad, body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} albumId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchArtistAlbumAlbumIdGet(albumId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchArtistAlbumAlbumIdGet(albumId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} artistId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchArtistArtistIdGet(artistId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchArtistArtistIdGet(artistId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchArtistRequestRequestIdGet(requestId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchArtistRequestRequestIdGet(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns basic information about the provided collection
         * @param {number} collectionId The collection id from TheMovieDb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieCollectionCollectionIdGet(collectionId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieCollectionCollectionIdGet(collectionId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} imdbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieImdbImdbidGet(imdbId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieImdbImdbidGet(imdbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns details for a single movie
         * @param {number} movieDbId The MovieDB Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieMovieDbIdGet(movieDbId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieMovieDbIdGet(movieDbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Now Playing Movies by page
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Now Playing Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieNowplayingGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieNowplayingGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies using paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMoviePopularGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMoviePopularGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns details for a single movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieRequestRequestIdGet(requestId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieRequestRequestIdGet(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Recently Requested Movies using Paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Seasonal Movies
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {OmbiModelsSimilarMoviesRefineModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieSimilarPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieSimilarPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieTopratedGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieTopratedGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMovieUpcomingGet(options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMovieUpcomingGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
         * @summary Returns search results for both TV and Movies
         * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
         * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchMultiSearchTermPost(searchTerm, body, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchMultiSearchTermPost(searchTerm, body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} name
         * @param {number} year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchRatingsMovieNameYearGet(name, year, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchRatingsMovieNameYearGet(name, year, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} name
         * @param {number} year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchRatingsTvNameYearGet(name, year, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchRatingsTvNameYearGet(name, year, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} musicBrainzId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} movieDBId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchStreamTvMovieDbIdGet(movieDbId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchStreamTvMovieDbIdGet(movieDbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticipated tv shows by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns details for a single show
         * @param {string} moviedbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvPopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvPopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * TVMaze is the TV Show Provider
         * @summary Returns details for a single show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvRequestRequestIdGet(requestId, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvRequestRequestIdGet(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Recently Requested Tv using Paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows by page
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * TVMaze is the TV Show Provider
         * @summary Returns details for a single show
         * @param {string} tvdbid The TVDB Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2SearchTvTvdbIdGet(tvdbid, options) {
            const localVarAxiosArgs = await (0, exports.SearchApiAxiosParamCreator)(configuration).apiV2SearchTvTvdbIdGet(tvdbid, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.SearchApiFp = SearchApiFp;
/**
 * SearchApi - factory interface
 * @export
 */
const SearchApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Searches for movies by a certain actor.
         * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieActorPost(body, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieActorPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieInfoPost(body, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieInfoPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {number} theMovieDbId The movie database identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Retuns Now Playing Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieNowplayingGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieNowplayingGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMoviePopularGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMoviePopularGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMoviePost(body, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMoviePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieSearchTermGet(searchTerm, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieSearchTermGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieSimilarPost(body, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieSimilarPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {number} theMovieDbId ID of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieTopratedGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieTopratedGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMovieUpcomingGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMovieUpcomingGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information specified by the foreignAlbumId passed in
         * @param {string} foreignAlbumId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information we searched for
         * @param {string} searchTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicAlbumSearchTermGet(searchTerm, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMusicAlbumSearchTermGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns all albums for the artist using the ForeignArtistId
         * @param {string} foreignArtistId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the artist information we searched for
         * @param {string} searchTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchMusicArtistSearchTermGet(searchTerm, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchMusicArtistSearchTermGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticiplateds tv shows.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvAnticipatedGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchTvAnticipatedGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TvMaze as the Provider
         * @summary Gets extra show information.
         * @param {string} tvdbId The TVDB identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvInfoTvdbIdGet(tvdbId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchTvInfoTvdbIdGet(tvdbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvMostwatchedGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchTvMostwatchedGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvPopularGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchTvPopularGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TvMaze as the Provider
         * @summary Searches for a Tv Show.
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvSearchTermGet(searchTerm, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchTvSearchTermGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchTvTrendingGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV1SearchTvTrendingGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns all the movies that is by the actor id
         * @param {number} actorId TheMovieDb Actor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchActorActorIdMovieGet(actorId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchActorActorIdMovieGet(actorId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns all the tv shows that is by the actor id
         * @param {number} actorId TheMovieDb Actor ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchActorActorIdTvGet(actorId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchActorActorIdTvGet(actorId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Advanced Searched Media using paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(currentPosition, amountToLoad, body, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(currentPosition, amountToLoad, body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} albumId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchArtistAlbumAlbumIdGet(albumId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchArtistAlbumAlbumIdGet(albumId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} artistId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchArtistArtistIdGet(artistId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchArtistArtistIdGet(artistId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchArtistRequestRequestIdGet(requestId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchArtistRequestRequestIdGet(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns basic information about the provided collection
         * @param {number} collectionId The collection id from TheMovieDb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieCollectionCollectionIdGet(collectionId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieCollectionCollectionIdGet(collectionId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} imdbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieImdbImdbidGet(imdbId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieImdbImdbidGet(imdbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns details for a single movie
         * @param {number} movieDbId The MovieDB Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieMovieDbIdGet(movieDbId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieMovieDbIdGet(movieDbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Now Playing Movies by page
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Now Playing Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieNowplayingGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieNowplayingGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies using paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMoviePopularGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMoviePopularGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns details for a single movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieRequestRequestIdGet(requestId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieRequestRequestIdGet(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Recently Requested Movies using Paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Seasonal Movies
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {OmbiModelsSimilarMoviesRefineModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieSimilarPost(body, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieSimilarPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieTopratedGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieTopratedGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMovieUpcomingGet(options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMovieUpcomingGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
         * @summary Returns search results for both TV and Movies
         * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
         * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchMultiSearchTermPost(searchTerm, body, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchMultiSearchTermPost(searchTerm, body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} name
         * @param {number} year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchRatingsMovieNameYearGet(name, year, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchRatingsMovieNameYearGet(name, year, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} name
         * @param {number} year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchRatingsTvNameYearGet(name, year, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchRatingsTvNameYearGet(name, year, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} musicBrainzId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} movieDBId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchStreamTvMovieDbIdGet(movieDbId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchStreamTvMovieDbIdGet(movieDbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticipated tv shows by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows by page.
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns details for a single show
         * @param {string} moviedbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvPopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvPopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * TVMaze is the TV Show Provider
         * @summary Returns details for a single show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvRequestRequestIdGet(requestId, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvRequestRequestIdGet(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Recently Requested Tv using Paging
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows by page
         * @param {number} currentPosition
         * @param {number} amountToLoad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * TVMaze is the TV Show Provider
         * @summary Returns details for a single show
         * @param {string} tvdbid The TVDB Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchTvTvdbIdGet(tvdbid, options) {
            return (0, exports.SearchApiFp)(configuration)
                .apiV2SearchTvTvdbIdGet(tvdbid, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.SearchApiFactory = SearchApiFactory;
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
class SearchApi extends base_1.BaseAPI {
    /**
     *
     * @summary Searches for movies by a certain actor.
     * @param {OmbiModelsSearchActorModel} [body] language code is optional, by default it will be en. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieActorPost(body, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieActorPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [body] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieInfoPost(body, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieInfoPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {number} theMovieDbId The movie database identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieInfoTheMovieDbIdGet(theMovieDbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Retuns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieNowplayingGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieNowplayingGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMoviePopularGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMoviePopularGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {OmbiModelsSearchMovieRefineModel} [body] The refinement model, language code and year are both optional. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMoviePost(body, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMoviePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieSearchTermGet(searchTerm, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieSearchTermGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body] the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieSimilarPost(body, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieSimilarPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {number} theMovieDbId ID of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieTheMovieDbIdSimilarGet(theMovieDbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieTopratedGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieTopratedGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMovieUpcomingGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMovieUpcomingGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information specified by the foreignAlbumId passed in
     * @param {string} foreignAlbumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMusicAlbumInfoForeignAlbumIdGet(foreignAlbumId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMusicAlbumSearchTermGet(searchTerm, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMusicAlbumSearchTermGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Lidarr as the Provider
     * @summary Returns all albums for the artist using the ForeignArtistId
     * @param {string} foreignArtistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMusicArtistAlbumForeignArtistIdGet(foreignArtistId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Lidarr as the Provider
     * @summary Returns the artist information we searched for
     * @param {string} searchTerm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchMusicArtistSearchTermGet(searchTerm, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchMusicArtistSearchTermGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticiplateds tv shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchTvAnticipatedGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchTvAnticipatedGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TvMaze as the Provider
     * @summary Gets extra show information.
     * @param {string} tvdbId The TVDB identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchTvInfoTvdbIdGet(tvdbId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchTvInfoTvdbIdGet(tvdbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchTvMostwatchedGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchTvMostwatchedGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchTvPopularGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchTvPopularGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TvMaze as the Provider
     * @summary Searches for a Tv Show.
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchTvSearchTermGet(searchTerm, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchTvSearchTermGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchTvTrendingGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV1SearchTvTrendingGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns all the movies that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchActorActorIdMovieGet(actorId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchActorActorIdMovieGet(actorId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns all the tv shows that is by the actor id
     * @param {number} actorId TheMovieDb Actor ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchActorActorIdTvGet(actorId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchActorActorIdTvGet(actorId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Advanced Searched Media using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {OmbiApiTheMovieDbModelsDiscoverModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(currentPosition, amountToLoad, body, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchAdvancedSearchMovieCurrentPositionAmountToLoadPost(currentPosition, amountToLoad, body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} albumId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchArtistAlbumAlbumIdGet(albumId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchArtistAlbumAlbumIdGet(albumId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} artistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchArtistArtistIdGet(artistId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchArtistArtistIdGet(artistId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchArtistRequestRequestIdGet(requestId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchArtistRequestRequestIdGet(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns basic information about the provided collection
     * @param {number} collectionId The collection id from TheMovieDb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieCollectionCollectionIdGet(collectionId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieCollectionCollectionIdGet(collectionId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} imdbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieImdbImdbidGet(imdbId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieImdbImdbidGet(imdbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} movieDbId The MovieDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieMovieDbIdGet(movieDbId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieMovieDbIdGet(movieDbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieNowplayingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Now Playing Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieNowplayingGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieNowplayingGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies using paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMoviePopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMoviePopularGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMoviePopularGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns details for a single movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieRequestRequestIdGet(requestId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieRequestRequestIdGet(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Movies using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Seasonal Movies
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieSeasonalCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {OmbiModelsSimilarMoviesRefineModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieSimilarPost(body, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieSimilarPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieTopratedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieTopratedGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieTopratedGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieUpcomingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMovieUpcomingGet(options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMovieUpcomingGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String) to get TV               Show information using the MovieDbId.
     * @summary Returns search results for both TV and Movies
     * @param {string} searchTerm The search you want, this can be for a movie or TV show e.g. Star Wars will return               all Star Wars movies and Star Wars Rebels the TV Sho
     * @param {OmbiCoreModelsSearchV2MultiSearchFilter} [body] Filter for the search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchMultiSearchTermPost(searchTerm, body, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchMultiSearchTermPost(searchTerm, body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchRatingsMovieNameYearGet(name, year, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchRatingsMovieNameYearGet(name, year, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} name
     * @param {number} year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchRatingsTvNameYearGet(name, year, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchRatingsTvNameYearGet(name, year, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} musicBrainzId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchReleasegroupartMusicBrainzIdGet(musicBrainzId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} movieDBId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchStreamMovieMovieDbIdGet(movieDBId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchStreamTvMovieDbIdGet(movieDbId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchStreamTvMovieDbIdGet(movieDbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticipated tv shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvAnticipatedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows by page.
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvMostwatchedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns details for a single show
     * @param {string} moviedbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvMoviedbMoviedbidGet(moviedbid, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvPopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvPopularCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvRequestRequestIdGet(requestId, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvRequestRequestIdGet(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Recently Requested Tv using Paging
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvRequestedCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows by page
     * @param {number} currentPosition
     * @param {number} amountToLoad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvTrendingCurrentPositionAmountToLoadGet(currentPosition, amountToLoad, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * TVMaze is the TV Show Provider
     * @summary Returns details for a single show
     * @param {string} tvdbid The TVDB Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV2SearchTvTvdbIdGet(tvdbid, options) {
        return (0, exports.SearchApiFp)(this.configuration)
            .apiV2SearchTvTvdbIdGet(tvdbid, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.SearchApi = SearchApi;
//# sourceMappingURL=search-api.js.map