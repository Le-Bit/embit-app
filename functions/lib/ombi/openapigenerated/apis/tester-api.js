"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TesterApi = exports.TesterApiFactory = exports.TesterApiFp = exports.TesterApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * TesterApi - axios parameter creator
 * @export
 */
const TesterApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Checks if we can connect to CouchPotato with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterCouchpotatoPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/couchpotato`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to discord using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterDiscordPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/discord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message via email to the admin email using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterEmailPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Checks if we can connect to Emby with the provided settings
         * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterEmbyPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/emby`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to Gotify using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterGotifyPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/gotify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Checks if we can connect to Jellyfin with the provided settings
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterJellyfinPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/jellyfin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterLidarrPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/lidarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to mattermost using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterMattermostPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/mattermost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiModelsMobileNotificationTestViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterMobilePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/mobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterNewsletterPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/newsletter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Checks if we can connect to Plex with the provided settings
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterPlexPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/plex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to Pushbullet using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterPushbulletPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/pushbullet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to Pushover using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterPushoverPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/pushover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Checks if we can connect to Radarr with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterRadarrPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/radarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to Slack using the provided settings
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterSickragePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/sickrage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to Slack using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterSlackPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/slack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterSonarrPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/sonarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to Telegram using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterTelegramPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sends a test message to configured webhook using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterWebhookPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterWhatsappPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Tester/whatsapp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TesterApiAxiosParamCreator = TesterApiAxiosParamCreator;
/**
 * TesterApi - functional programming interface
 * @export
 */
const TesterApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Checks if we can connect to CouchPotato with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterCouchpotatoPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterCouchpotatoPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to discord using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterDiscordPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterDiscordPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message via email to the admin email using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterEmailPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterEmailPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Checks if we can connect to Emby with the provided settings
         * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterEmbyPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterEmbyPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to Gotify using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterGotifyPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterGotifyPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Checks if we can connect to Jellyfin with the provided settings
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterJellyfinPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterJellyfinPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterLidarrPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterLidarrPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to mattermost using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterMattermostPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterMattermostPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiModelsMobileNotificationTestViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterMobilePost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterMobilePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterNewsletterPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterNewsletterPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Checks if we can connect to Plex with the provided settings
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterPlexPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterPlexPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to Pushbullet using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterPushbulletPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterPushbulletPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to Pushover using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterPushoverPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterPushoverPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Checks if we can connect to Radarr with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterRadarrPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterRadarrPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to Slack using the provided settings
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterSickragePost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterSickragePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to Slack using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterSlackPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterSlackPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterSonarrPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterSonarrPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to Telegram using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterTelegramPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterTelegramPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sends a test message to configured webhook using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterWebhookPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterWebhookPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TesterWhatsappPost(body, options) {
            const localVarAxiosArgs = await (0, exports.TesterApiAxiosParamCreator)(configuration).apiV1TesterWhatsappPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.TesterApiFp = TesterApiFp;
/**
 * TesterApi - factory interface
 * @export
 */
const TesterApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Checks if we can connect to CouchPotato with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterCouchpotatoPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterCouchpotatoPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to discord using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterDiscordPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterDiscordPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message via email to the admin email using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterEmailPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterEmailPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Checks if we can connect to Emby with the provided settings
         * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterEmbyPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterEmbyPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to Gotify using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterGotifyPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterGotifyPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Checks if we can connect to Jellyfin with the provided settings
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterJellyfinPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterJellyfinPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterLidarrPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterLidarrPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to mattermost using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterMattermostPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterMattermostPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiModelsMobileNotificationTestViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterMobilePost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterMobilePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterNewsletterPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterNewsletterPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Checks if we can connect to Plex with the provided settings
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterPlexPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterPlexPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to Pushbullet using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterPushbulletPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterPushbulletPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to Pushover using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterPushoverPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterPushoverPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Checks if we can connect to Radarr with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterRadarrPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterRadarrPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to Slack using the provided settings
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterSickragePost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterSickragePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to Slack using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterSlackPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterSlackPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterSonarrPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterSonarrPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to Telegram using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterTelegramPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterTelegramPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sends a test message to configured webhook using the provided settings
         * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterWebhookPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterWebhookPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TesterWhatsappPost(body, options) {
            return (0, exports.TesterApiFp)(configuration)
                .apiV1TesterWhatsappPost(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.TesterApiFactory = TesterApiFactory;
/**
 * TesterApi - object-oriented interface
 * @export
 * @class TesterApi
 * @extends {BaseAPI}
 */
class TesterApi extends base_1.BaseAPI {
    /**
     *
     * @summary Checks if we can connect to CouchPotato with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterCouchpotatoPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterCouchpotatoPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to discord using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterDiscordPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterDiscordPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message via email to the admin email using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterEmailPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterEmailPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Checks if we can connect to Emby with the provided settings
     * @param {OmbiCoreSettingsModelsExternalEmbyServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterEmbyPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterEmbyPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to Gotify using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsGotifySettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterGotifyPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterGotifyPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Checks if we can connect to Jellyfin with the provided settings
     * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterJellyfinPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterJellyfinPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterLidarrPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterLidarrPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to mattermost using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterMattermostPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterMattermostPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiModelsMobileNotificationTestViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterMobilePost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterMobilePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterNewsletterPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterNewsletterPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Checks if we can connect to Plex with the provided settings
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterPlexPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterPlexPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to Pushbullet using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterPushbulletPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterPushbulletPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to Pushover using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterPushoverPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterPushoverPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Checks if we can connect to Radarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterRadarrPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterRadarrPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterSickragePost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterSickragePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to Slack using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterSlackPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterSlackPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Checks if we can connect to Sonarr with the provided settings
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterSonarrPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterSonarrPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to Telegram using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterTelegramPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterTelegramPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sends a test message to configured webhook using the provided settings
     * @param {OmbiSettingsSettingsModelsNotificationsWebhookSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterWebhookPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterWebhookPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiCoreModelsUIWhatsAppSettingsViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    apiV1TesterWhatsappPost(body, options) {
        return (0, exports.TesterApiFp)(this.configuration)
            .apiV1TesterWhatsappPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.TesterApi = TesterApi;
//# sourceMappingURL=tester-api.js.map