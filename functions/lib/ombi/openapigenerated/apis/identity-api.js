"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityApi = exports.IdentityApiFactory = exports.IdentityApiFp = exports.IdentityApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * IdentityApi - axios parameter creator
 * @export
 */
const IdentityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Gets all available claims in the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityClaimsGet: async (options = {}) => {
            const localVarPath = `/api/v1/Identity/claims`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all users for dropdown purposes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityDropdownUsersGet: async (options = {}) => {
            const localVarPath = `/api/v1/Identity/dropdown/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the current logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet: async (options = {}) => {
            const localVarPath = `/api/v1/Identity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sets the current users language
         * @param {OmbiModelsIdentityUserLanguage} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityLanguagePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Identity/language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary This is for the local user to change their details.
         * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityLocalPut: async (body, options = {}) => {
            const localVarPath = `/api/v1/Identity/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNewsletterUnsubscribeUserIdGet: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling apiV1IdentityNewsletterUnsubscribeUserIdGet.");
            }
            const localVarPath = `/api/v1/Identity/newsletter/unsubscribe/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNotificationPreferencesPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Identity/NotificationPreferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNotificationpreferencesGet: async (options = {}) => {
            const localVarPath = `/api/v1/Identity/notificationpreferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNotificationpreferencesUserIdGet: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling apiV1IdentityNotificationpreferencesUserIdGet.");
            }
            const localVarPath = `/api/v1/Identity/notificationpreferences/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates the user.
         * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Identity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates the user.
         * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityPut: async (body, options = {}) => {
            const localVarPath = `/api/v1/Identity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns the supported country codes that we have streaming data for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityStreamingcountryGet: async (options = {}) => {
            const localVarPath = `/api/v1/Identity/streamingcountry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sets the current users country streaming preference
         * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityStreamingcountryPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Identity/streamingcountry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes the user.
         * @param {string} userId The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityUserIdDelete: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling apiV1IdentityUserIdDelete.");
            }
            const localVarPath = `/api/v1/Identity/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the user by the user id.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityUserIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling apiV1IdentityUserIdGet.");
            }
            const localVarPath = `/api/v1/Identity/User/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityUsersGet: async (options = {}) => {
            const localVarPath = `/api/v1/Identity/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiCoreModelsUIUserViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityWelcomeEmailPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Identity/welcomeEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.IdentityApiAxiosParamCreator = IdentityApiAxiosParamCreator;
/**
 * IdentityApi - functional programming interface
 * @export
 */
const IdentityApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Gets all available claims in the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityClaimsGet(options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityClaimsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets all users for dropdown purposes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityDropdownUsersGet(options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityDropdownUsersGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the current logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityGet(options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sets the current users language
         * @param {OmbiModelsIdentityUserLanguage} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityLanguagePost(body, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityLanguagePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary This is for the local user to change their details.
         * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityLocalPut(body, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityLocalPut(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityNotificationPreferencesPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityNotificationPreferencesPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityNotificationpreferencesGet(options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityNotificationpreferencesGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityNotificationpreferencesUserIdGet(userId, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityNotificationpreferencesUserIdGet(userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates the user.
         * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates the user.
         * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityPut(body, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityPut(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns the supported country codes that we have streaming data for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityStreamingcountryGet(options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityStreamingcountryGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Sets the current users country streaming preference
         * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityStreamingcountryPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityStreamingcountryPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes the user.
         * @param {string} userId The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityUserIdDelete(userId, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityUserIdDelete(userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the user by the user id.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityUserIdGet(id, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityUserIdGet(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets all users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityUsersGet(options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityUsersGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiCoreModelsUIUserViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentityWelcomeEmailPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IdentityApiAxiosParamCreator)(configuration).apiV1IdentityWelcomeEmailPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.IdentityApiFp = IdentityApiFp;
/**
 * IdentityApi - factory interface
 * @export
 */
const IdentityApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Gets all available claims in the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityClaimsGet(options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityClaimsGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets all users for dropdown purposes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityDropdownUsersGet(options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityDropdownUsersGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the current logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet(options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sets the current users language
         * @param {OmbiModelsIdentityUserLanguage} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityLanguagePost(body, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityLanguagePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary This is for the local user to change their details.
         * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityLocalPut(body, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityLocalPut(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNotificationPreferencesPost(body, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityNotificationPreferencesPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNotificationpreferencesGet(options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityNotificationpreferencesGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityNotificationpreferencesUserIdGet(userId, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityNotificationpreferencesUserIdGet(userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates the user.
         * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityPost(body, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates the user.
         * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityPut(body, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityPut(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns the supported country codes that we have streaming data for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityStreamingcountryGet(options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityStreamingcountryGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sets the current users country streaming preference
         * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityStreamingcountryPost(body, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityStreamingcountryPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes the user.
         * @param {string} userId The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityUserIdDelete(userId, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityUserIdDelete(userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the user by the user id.
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityUserIdGet(id, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityUserIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets all users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityUsersGet(options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityUsersGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiCoreModelsUIUserViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityWelcomeEmailPost(body, options) {
            return (0, exports.IdentityApiFp)(configuration)
                .apiV1IdentityWelcomeEmailPost(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.IdentityApiFactory = IdentityApiFactory;
/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
class IdentityApi extends base_1.BaseAPI {
    /**
     *
     * @summary Gets all available claims in the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityClaimsGet(options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityClaimsGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets all users for dropdown purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityDropdownUsersGet(options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityDropdownUsersGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the current logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityGet(options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sets the current users language
     * @param {OmbiModelsIdentityUserLanguage} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityLanguagePost(body, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityLanguagePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary This is for the local user to change their details.
     * @param {OmbiModelsIdentityUpdateLocalUserModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityLocalPut(body, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityLocalPut(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityNewsletterUnsubscribeUserIdGet(userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityNotificationPreferencesPost(body, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityNotificationPreferencesPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityNotificationpreferencesGet(options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityNotificationpreferencesGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityNotificationpreferencesUserIdGet(userId, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityNotificationpreferencesUserIdGet(userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityPost(body, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates the user.
     * @param {OmbiCoreModelsUIUserViewModel} [body] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityPut(body, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityPut(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns the supported country codes that we have streaming data for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityStreamingcountryGet(options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityStreamingcountryGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sets the current users country streaming preference
     * @param {OmbiModelsIdentityCountryStreamingPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityStreamingcountryPost(body, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityStreamingcountryPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes the user.
     * @param {string} userId The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityUserIdDelete(userId, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityUserIdDelete(userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the user by the user id.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityUserIdGet(id, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityUserIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets all users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityUsersGet(options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityUsersGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiCoreModelsUIUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityWelcomeEmailPost(body, options) {
        return (0, exports.IdentityApiFp)(this.configuration)
            .apiV1IdentityWelcomeEmailPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.IdentityApi = IdentityApi;
//# sourceMappingURL=identity-api.js.map