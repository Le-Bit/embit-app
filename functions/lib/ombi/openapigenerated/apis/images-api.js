"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagesApi = exports.ImagesApiFactory = exports.ImagesApiFp = exports.ImagesApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ImagesApi - axios parameter creator
 * @export
 */
const ImagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBackgroundGet: async (options = {}) => {
            const localVarPath = `/api/v1/Images/background`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBackgroundMovieMovieDbIdGet: async (movieDbId, options = {}) => {
            // verify required parameter 'movieDbId' is not null or undefined
            if (movieDbId === null || movieDbId === undefined) {
                throw new base_1.RequiredError("movieDbId", "Required parameter movieDbId was null or undefined when calling apiV1ImagesBackgroundMovieMovieDbIdGet.");
            }
            const localVarPath = `/api/v1/Images/background/movie/{movieDbId}`.replace(`{${"movieDbId"}}`, encodeURIComponent(String(movieDbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBackgroundTvTvdbidGet: async (tvdbid, options = {}) => {
            // verify required parameter 'tvdbid' is not null or undefined
            if (tvdbid === null || tvdbid === undefined) {
                throw new base_1.RequiredError("tvdbid", "Required parameter tvdbid was null or undefined when calling apiV1ImagesBackgroundTvTvdbidGet.");
            }
            const localVarPath = `/api/v1/Images/background/tv/{tvdbid}`.replace(`{${"tvdbid"}}`, encodeURIComponent(String(tvdbid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBannerMovieMovieDbIdGet: async (movieDbId, options = {}) => {
            // verify required parameter 'movieDbId' is not null or undefined
            if (movieDbId === null || movieDbId === undefined) {
                throw new base_1.RequiredError("movieDbId", "Required parameter movieDbId was null or undefined when calling apiV1ImagesBannerMovieMovieDbIdGet.");
            }
            const localVarPath = `/api/v1/Images/banner/movie/{movieDbId}`.replace(`{${"movieDbId"}}`, encodeURIComponent(String(movieDbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPosterGet: async (options = {}) => {
            const localVarPath = `/api/v1/Images/poster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPosterMovieMovieDbIdGet: async (movieDbId, options = {}) => {
            // verify required parameter 'movieDbId' is not null or undefined
            if (movieDbId === null || movieDbId === undefined) {
                throw new base_1.RequiredError("movieDbId", "Required parameter movieDbId was null or undefined when calling apiV1ImagesPosterMovieMovieDbIdGet.");
            }
            const localVarPath = `/api/v1/Images/poster/movie/{movieDbId}`.replace(`{${"movieDbId"}}`, encodeURIComponent(String(movieDbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPosterTvTvdbidGet: async (tvdbid, options = {}) => {
            // verify required parameter 'tvdbid' is not null or undefined
            if (tvdbid === null || tvdbid === undefined) {
                throw new base_1.RequiredError("tvdbid", "Required parameter tvdbid was null or undefined when calling apiV1ImagesPosterTvTvdbidGet.");
            }
            const localVarPath = `/api/v1/Images/poster/tv/{tvdbid}`.replace(`{${"tvdbid"}}`, encodeURIComponent(String(tvdbid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesTvTvdbidGet: async (tvdbid, options = {}) => {
            // verify required parameter 'tvdbid' is not null or undefined
            if (tvdbid === null || tvdbid === undefined) {
                throw new base_1.RequiredError("tvdbid", "Required parameter tvdbid was null or undefined when calling apiV1ImagesTvTvdbidGet.");
            }
            const localVarPath = `/api/v1/Images/tv/{tvdbid}`.replace(`{${"tvdbid"}}`, encodeURIComponent(String(tvdbid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ImagesApiAxiosParamCreator = ImagesApiAxiosParamCreator;
/**
 * ImagesApi - functional programming interface
 * @export
 */
const ImagesApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesBackgroundGet(options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesBackgroundGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesPosterGet(options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesPosterGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesPosterTvTvdbidGet(tvdbid, options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesPosterTvTvdbidGet(tvdbid, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ImagesTvTvdbidGet(tvdbid, options) {
            const localVarAxiosArgs = await (0, exports.ImagesApiAxiosParamCreator)(configuration).apiV1ImagesTvTvdbidGet(tvdbid, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ImagesApiFp = ImagesApiFp;
/**
 * ImagesApi - factory interface
 * @export
 */
const ImagesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBackgroundGet(options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesBackgroundGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPosterGet(options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesPosterGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} movieDbId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPosterTvTvdbidGet(tvdbid, options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesPosterTvTvdbidGet(tvdbid, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} tvdbid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesTvTvdbidGet(tvdbid, options) {
            return (0, exports.ImagesApiFp)(configuration)
                .apiV1ImagesTvTvdbidGet(tvdbid, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ImagesApiFactory = ImagesApiFactory;
/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
class ImagesApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesBackgroundGet(options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesBackgroundGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesBackgroundMovieMovieDbIdGet(movieDbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesBackgroundTvTvdbidGet(tvdbid, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesBannerMovieMovieDbIdGet(movieDbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesPosterGet(options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesPosterGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} movieDbId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesPosterMovieMovieDbIdGet(movieDbId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesPosterTvTvdbidGet(tvdbid, options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesPosterTvTvdbidGet(tvdbid, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} tvdbid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesTvTvdbidGet(tvdbid, options) {
        return (0, exports.ImagesApiFp)(this.configuration)
            .apiV1ImagesTvTvdbidGet(tvdbid, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ImagesApi = ImagesApi;
//# sourceMappingURL=images-api.js.map