"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuesApi = exports.IssuesApiFactory = exports.IssuesApiFp = exports.IssuesApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * IssuesApi - axios parameter creator
 * @export
 */
const IssuesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deletes a Category
         * @param {number} catId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCategoriesCatIdDelete: async (catId, options = {}) => {
            // verify required parameter 'catId' is not null or undefined
            if (catId === null || catId === undefined) {
                throw new base_1.RequiredError("catId", "Required parameter catId was null or undefined when calling apiV1IssuesCategoriesCatIdDelete.");
            }
            const localVarPath = `/api/v1/Issues/categories/{catId}`.replace(`{${"catId"}}`, encodeURIComponent(String(catId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get's all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCategoriesGet: async (options = {}) => {
            const localVarPath = `/api/v1/Issues/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new category
         * @param {OmbiStoreEntitiesRequestsIssueCategory} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCategoriesPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Issues/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a comment on a issue
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCommentsIdDelete: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling apiV1IssuesCommentsIdDelete.");
            }
            const localVarPath = `/api/v1/Issues/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Adds a comment on an issue
         * @param {OmbiModelsNewIssueCommentViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCommentsPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Issues/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns all the issues count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCountGet: async (options = {}) => {
            const localVarPath = `/api/v1/Issues/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns all the issues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesGet: async (options = {}) => {
            const localVarPath = `/api/v1/Issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get's all the issue comments by id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesIdCommentsGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling apiV1IssuesIdCommentsGet.");
            }
            const localVarPath = `/api/v1/Issues/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesIdDelete: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling apiV1IssuesIdDelete.");
            }
            const localVarPath = `/api/v1/Issues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns the issue by Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling apiV1IssuesIdGet.");
            }
            const localVarPath = `/api/v1/Issues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Movie Issue
         * @param {OmbiStoreEntitiesRequestsIssues} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesProviderIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling apiV1IssuesProviderIdGet.");
            }
            const localVarPath = `/api/v1/Issues/provider/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesRequestIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling apiV1IssuesRequestIdGet.");
            }
            const localVarPath = `/api/v1/Issues/request/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiModelsIssueStateViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesStatusPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Issues/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns all the issues
         * @param {number} take
         * @param {number} skip
         * @param {OmbiStoreEntitiesRequestsIssueStatus} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesTakeSkipStatusGet: async (take, skip, status, options = {}) => {
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new base_1.RequiredError("take", "Required parameter take was null or undefined when calling apiV1IssuesTakeSkipStatusGet.");
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new base_1.RequiredError("skip", "Required parameter skip was null or undefined when calling apiV1IssuesTakeSkipStatusGet.");
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new base_1.RequiredError("status", "Required parameter status was null or undefined when calling apiV1IssuesTakeSkipStatusGet.");
            }
            const localVarPath = `/api/v1/Issues/{take}/{skip}/{status}`
                .replace(`{${"take"}}`, encodeURIComponent(String(take)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} providerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2IssuesDetailsProviderIdGet: async (providerId, options = {}) => {
            // verify required parameter 'providerId' is not null or undefined
            if (providerId === null || providerId === undefined) {
                throw new base_1.RequiredError("providerId", "Required parameter providerId was null or undefined when calling apiV2IssuesDetailsProviderIdGet.");
            }
            const localVarPath = `/api/v2/Issues/details/{providerId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} position
         * @param {number} take
         * @param {OmbiStoreEntitiesRequestsIssueStatus} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2IssuesPositionTakeStatusGet: async (position, take, status, options = {}) => {
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2IssuesPositionTakeStatusGet.");
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new base_1.RequiredError("take", "Required parameter take was null or undefined when calling apiV2IssuesPositionTakeStatusGet.");
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new base_1.RequiredError("status", "Required parameter status was null or undefined when calling apiV2IssuesPositionTakeStatusGet.");
            }
            const localVarPath = `/api/v2/Issues/{position}/{take}/{status}`
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.IssuesApiAxiosParamCreator = IssuesApiAxiosParamCreator;
/**
 * IssuesApi - functional programming interface
 * @export
 */
const IssuesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Deletes a Category
         * @param {number} catId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesCategoriesCatIdDelete(catId, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesCategoriesCatIdDelete(catId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get's all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesCategoriesGet(options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesCategoriesGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates a new category
         * @param {OmbiStoreEntitiesRequestsIssueCategory} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesCategoriesPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesCategoriesPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a comment on a issue
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesCommentsIdDelete(id, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesCommentsIdDelete(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Adds a comment on an issue
         * @param {OmbiModelsNewIssueCommentViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesCommentsPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesCommentsPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns all the issues count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesCountGet(options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesCountGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns all the issues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesGet(options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get's all the issue comments by id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesIdCommentsGet(id, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesIdCommentsGet(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesIdDelete(id, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesIdDelete(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns the issue by Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesIdGet(id, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesIdGet(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create Movie Issue
         * @param {OmbiStoreEntitiesRequestsIssues} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesProviderIdGet(id, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesProviderIdGet(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesRequestIdGet(id, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesRequestIdGet(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiModelsIssueStateViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesStatusPost(body, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesStatusPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns all the issues
         * @param {number} take
         * @param {number} skip
         * @param {OmbiStoreEntitiesRequestsIssueStatus} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IssuesTakeSkipStatusGet(take, skip, status, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV1IssuesTakeSkipStatusGet(take, skip, status, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} providerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2IssuesDetailsProviderIdGet(providerId, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV2IssuesDetailsProviderIdGet(providerId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} position
         * @param {number} take
         * @param {OmbiStoreEntitiesRequestsIssueStatus} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2IssuesPositionTakeStatusGet(position, take, status, options) {
            const localVarAxiosArgs = await (0, exports.IssuesApiAxiosParamCreator)(configuration).apiV2IssuesPositionTakeStatusGet(position, take, status, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.IssuesApiFp = IssuesApiFp;
/**
 * IssuesApi - factory interface
 * @export
 */
const IssuesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Deletes a Category
         * @param {number} catId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCategoriesCatIdDelete(catId, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesCategoriesCatIdDelete(catId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get's all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCategoriesGet(options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesCategoriesGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new category
         * @param {OmbiStoreEntitiesRequestsIssueCategory} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCategoriesPost(body, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesCategoriesPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a comment on a issue
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCommentsIdDelete(id, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesCommentsIdDelete(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Adds a comment on an issue
         * @param {OmbiModelsNewIssueCommentViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCommentsPost(body, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesCommentsPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns all the issues count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesCountGet(options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesCountGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns all the issues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesGet(options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get's all the issue comments by id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesIdCommentsGet(id, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesIdCommentsGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesIdDelete(id, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesIdDelete(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns the issue by Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesIdGet(id, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create Movie Issue
         * @param {OmbiStoreEntitiesRequestsIssues} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesPost(body, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesProviderIdGet(id, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesProviderIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesRequestIdGet(id, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesRequestIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiModelsIssueStateViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesStatusPost(body, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesStatusPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns all the issues
         * @param {number} take
         * @param {number} skip
         * @param {OmbiStoreEntitiesRequestsIssueStatus} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IssuesTakeSkipStatusGet(take, skip, status, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV1IssuesTakeSkipStatusGet(take, skip, status, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} providerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2IssuesDetailsProviderIdGet(providerId, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV2IssuesDetailsProviderIdGet(providerId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} position
         * @param {number} take
         * @param {OmbiStoreEntitiesRequestsIssueStatus} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2IssuesPositionTakeStatusGet(position, take, status, options) {
            return (0, exports.IssuesApiFp)(configuration)
                .apiV2IssuesPositionTakeStatusGet(position, take, status, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.IssuesApiFactory = IssuesApiFactory;
/**
 * IssuesApi - object-oriented interface
 * @export
 * @class IssuesApi
 * @extends {BaseAPI}
 */
class IssuesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deletes a Category
     * @param {number} catId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesCategoriesCatIdDelete(catId, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesCategoriesCatIdDelete(catId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get's all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesCategoriesGet(options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesCategoriesGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new category
     * @param {OmbiStoreEntitiesRequestsIssueCategory} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesCategoriesPost(body, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesCategoriesPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a comment on a issue
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesCommentsIdDelete(id, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesCommentsIdDelete(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Adds a comment on an issue
     * @param {OmbiModelsNewIssueCommentViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesCommentsPost(body, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesCommentsPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns all the issues count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesCountGet(options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesCountGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns all the issues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesGet(options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get's all the issue comments by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesIdCommentsGet(id, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesIdCommentsGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesIdDelete(id, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesIdDelete(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns the issue by Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesIdGet(id, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create Movie Issue
     * @param {OmbiStoreEntitiesRequestsIssues} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesPost(body, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesProviderIdGet(id, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesProviderIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesRequestIdGet(id, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesRequestIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiModelsIssueStateViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesStatusPost(body, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesStatusPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns all the issues
     * @param {number} take
     * @param {number} skip
     * @param {OmbiStoreEntitiesRequestsIssueStatus} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV1IssuesTakeSkipStatusGet(take, skip, status, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV1IssuesTakeSkipStatusGet(take, skip, status, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} providerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV2IssuesDetailsProviderIdGet(providerId, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV2IssuesDetailsProviderIdGet(providerId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} position
     * @param {number} take
     * @param {OmbiStoreEntitiesRequestsIssueStatus} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    apiV2IssuesPositionTakeStatusGet(position, take, status, options) {
        return (0, exports.IssuesApiFp)(this.configuration)
            .apiV2IssuesPositionTakeStatusGet(position, take, status, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.IssuesApi = IssuesApi;
//# sourceMappingURL=issues-api.js.map