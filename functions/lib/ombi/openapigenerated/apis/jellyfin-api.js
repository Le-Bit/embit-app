"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JellyfinApi = exports.JellyfinApiFactory = exports.JellyfinApiFp = exports.JellyfinApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * JellyfinApi - axios parameter creator
 * @export
 */
const JellyfinApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinInfoPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Jellyfin/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinLibraryPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Jellyfin/Library`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Signs into the Jellyfin Api
         * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Jellyfin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the jellyfin users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinUsersGet: async (options = {}) => {
            const localVarPath = `/api/v1/Jellyfin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.JellyfinApiAxiosParamCreator = JellyfinApiAxiosParamCreator;
/**
 * JellyfinApi - functional programming interface
 * @export
 */
const JellyfinApiFp = function (configuration) {
    return {
        /**
         *
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JellyfinInfoPost(body, options) {
            const localVarAxiosArgs = await (0, exports.JellyfinApiAxiosParamCreator)(configuration).apiV1JellyfinInfoPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JellyfinLibraryPost(body, options) {
            const localVarAxiosArgs = await (0, exports.JellyfinApiAxiosParamCreator)(configuration).apiV1JellyfinLibraryPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Signs into the Jellyfin Api
         * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JellyfinPost(body, options) {
            const localVarAxiosArgs = await (0, exports.JellyfinApiAxiosParamCreator)(configuration).apiV1JellyfinPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the jellyfin users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JellyfinUsersGet(options) {
            const localVarAxiosArgs = await (0, exports.JellyfinApiAxiosParamCreator)(configuration).apiV1JellyfinUsersGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.JellyfinApiFp = JellyfinApiFp;
/**
 * JellyfinApi - factory interface
 * @export
 */
const JellyfinApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinInfoPost(body, options) {
            return (0, exports.JellyfinApiFp)(configuration)
                .apiV1JellyfinInfoPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinLibraryPost(body, options) {
            return (0, exports.JellyfinApiFp)(configuration)
                .apiV1JellyfinLibraryPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Signs into the Jellyfin Api
         * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinPost(body, options) {
            return (0, exports.JellyfinApiFp)(configuration)
                .apiV1JellyfinPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the jellyfin users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JellyfinUsersGet(options) {
            return (0, exports.JellyfinApiFp)(configuration)
                .apiV1JellyfinUsersGet(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.JellyfinApiFactory = JellyfinApiFactory;
/**
 * JellyfinApi - object-oriented interface
 * @export
 * @class JellyfinApi
 * @extends {BaseAPI}
 */
class JellyfinApi extends base_1.BaseAPI {
    /**
     *
     * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JellyfinApi
     */
    apiV1JellyfinInfoPost(body, options) {
        return (0, exports.JellyfinApiFp)(this.configuration)
            .apiV1JellyfinInfoPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiCoreSettingsModelsExternalJellyfinServers} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JellyfinApi
     */
    apiV1JellyfinLibraryPost(body, options) {
        return (0, exports.JellyfinApiFp)(this.configuration)
            .apiV1JellyfinLibraryPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Signs into the Jellyfin Api
     * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JellyfinApi
     */
    apiV1JellyfinPost(body, options) {
        return (0, exports.JellyfinApiFp)(this.configuration)
            .apiV1JellyfinPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the jellyfin users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JellyfinApi
     */
    apiV1JellyfinUsersGet(options) {
        return (0, exports.JellyfinApiFp)(this.configuration)
            .apiV1JellyfinUsersGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.JellyfinApi = JellyfinApi;
//# sourceMappingURL=jellyfin-api.js.map