"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoteApi = exports.VoteApiFactory = exports.VoteApiFp = exports.VoteApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * VoteApi - axios parameter creator
 * @export
 */
const VoteApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Downvotes a album
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteDownAlbumRequestIdPost: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteDownAlbumRequestIdPost.");
            }
            const localVarPath = `/api/v1/Vote/down/album/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Downvotes a movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteDownMovieRequestIdPost: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteDownMovieRequestIdPost.");
            }
            const localVarPath = `/api/v1/Vote/down/movie/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Downvotes a tv show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteDownTvRequestIdPost: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteDownTvRequestIdPost.");
            }
            const localVarPath = `/api/v1/Vote/down/tv/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns the viewmodel to render on the UI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteGet: async (options = {}) => {
            const localVarPath = `/api/v1/Vote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteMovieRequestIdGet: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteMovieRequestIdGet.");
            }
            const localVarPath = `/api/v1/Vote/movie/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteMusicRequestIdGet: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteMusicRequestIdGet.");
            }
            const localVarPath = `/api/v1/Vote/music/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteTvRequestIdGet: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteTvRequestIdGet.");
            }
            const localVarPath = `/api/v1/Vote/tv/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Upvotes a album
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteUpAlbumRequestIdPost: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteUpAlbumRequestIdPost.");
            }
            const localVarPath = `/api/v1/Vote/up/album/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Upvotes a movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteUpMovieRequestIdPost: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteUpMovieRequestIdPost.");
            }
            const localVarPath = `/api/v1/Vote/up/movie/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Upvotes a tv show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteUpTvRequestIdPost: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1VoteUpTvRequestIdPost.");
            }
            const localVarPath = `/api/v1/Vote/up/tv/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.VoteApiAxiosParamCreator = VoteApiAxiosParamCreator;
/**
 * VoteApi - functional programming interface
 * @export
 */
const VoteApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Downvotes a album
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteDownAlbumRequestIdPost(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteDownAlbumRequestIdPost(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Downvotes a movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteDownMovieRequestIdPost(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteDownMovieRequestIdPost(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Downvotes a tv show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteDownTvRequestIdPost(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteDownTvRequestIdPost(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns the viewmodel to render on the UI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteGet(options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteMovieRequestIdGet(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteMovieRequestIdGet(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteMusicRequestIdGet(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteMusicRequestIdGet(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteTvRequestIdGet(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteTvRequestIdGet(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Upvotes a album
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteUpAlbumRequestIdPost(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteUpAlbumRequestIdPost(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Upvotes a movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteUpMovieRequestIdPost(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteUpMovieRequestIdPost(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Upvotes a tv show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteUpTvRequestIdPost(requestId, options) {
            const localVarAxiosArgs = await (0, exports.VoteApiAxiosParamCreator)(configuration).apiV1VoteUpTvRequestIdPost(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.VoteApiFp = VoteApiFp;
/**
 * VoteApi - factory interface
 * @export
 */
const VoteApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Downvotes a album
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteDownAlbumRequestIdPost(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteDownAlbumRequestIdPost(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Downvotes a movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteDownMovieRequestIdPost(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteDownMovieRequestIdPost(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Downvotes a tv show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteDownTvRequestIdPost(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteDownTvRequestIdPost(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns the viewmodel to render on the UI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteGet(options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteMovieRequestIdGet(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteMovieRequestIdGet(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteMusicRequestIdGet(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteMusicRequestIdGet(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get's all the votes for the request id
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteTvRequestIdGet(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteTvRequestIdGet(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Upvotes a album
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteUpAlbumRequestIdPost(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteUpAlbumRequestIdPost(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Upvotes a movie
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteUpMovieRequestIdPost(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteUpMovieRequestIdPost(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Upvotes a tv show
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteUpTvRequestIdPost(requestId, options) {
            return (0, exports.VoteApiFp)(configuration)
                .apiV1VoteUpTvRequestIdPost(requestId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.VoteApiFactory = VoteApiFactory;
/**
 * VoteApi - object-oriented interface
 * @export
 * @class VoteApi
 * @extends {BaseAPI}
 */
class VoteApi extends base_1.BaseAPI {
    /**
     *
     * @summary Downvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteDownAlbumRequestIdPost(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteDownAlbumRequestIdPost(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Downvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteDownMovieRequestIdPost(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteDownMovieRequestIdPost(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Downvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteDownTvRequestIdPost(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteDownTvRequestIdPost(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns the viewmodel to render on the UI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteGet(options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteMovieRequestIdGet(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteMovieRequestIdGet(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteMusicRequestIdGet(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteMusicRequestIdGet(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get's all the votes for the request id
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteTvRequestIdGet(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteTvRequestIdGet(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Upvotes a album
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteUpAlbumRequestIdPost(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteUpAlbumRequestIdPost(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Upvotes a movie
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteUpMovieRequestIdPost(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteUpMovieRequestIdPost(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Upvotes a tv show
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    apiV1VoteUpTvRequestIdPost(requestId, options) {
        return (0, exports.VoteApiFp)(this.configuration)
            .apiV1VoteUpTvRequestIdPost(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.VoteApi = VoteApi;
//# sourceMappingURL=vote-api.js.map