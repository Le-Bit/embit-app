"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestsApi = exports.RequestsApiFactory = exports.RequestsApiFp = exports.RequestsApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * RequestsApi - axios parameter creator
 * @export
 */
const RequestsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/album/available/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/album/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/album/denied/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumPendingCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumPendingCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/album/pending/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/album/processing/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieAdvancedoptionsPost: async (body, options = {}) => {
            const localVarPath = `/api/v2/Requests/movie/advancedoptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieAvailableCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieAvailableCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/movie/available/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/movie/availble/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} collectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieCollectionCollectionIdPost: async (collectionId, options = {}) => {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new base_1.RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling apiV2RequestsMovieCollectionCollectionIdPost.");
            }
            const localVarPath = `/api/v2/Requests/movie/collection/{collectionId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets movie requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/movie/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieDeniedCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieDeniedCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/movie/denied/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMoviePendingCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsMoviePendingCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/movie/pending/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieProcessingCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieProcessingCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/movie/processing/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the unavailable movie requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/movie/unavailable/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiStoreEntitiesRequestType} type
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsReprocessTypeRequestIdPost: async (type, requestId, options = {}) => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new base_1.RequiredError("type", "Required parameter type was null or undefined when calling apiV2RequestsReprocessTypeRequestIdPost.");
            }
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV2RequestsReprocessTypeRequestIdPost.");
            }
            const localVarPath = `/api/v2/Requests/reprocess/{type}/{requestId}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvAdvancedoptionsPost: async (body, options = {}) => {
            const localVarPath = `/api/v2/Requests/tv/advancedoptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvAvailableCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvAvailableCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/tv/available/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets Tv requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/tv/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvDeniedCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvDeniedCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/tv/denied/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvPendingCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvPendingCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/tv/pending/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Requests a tv show/episode/season.
         * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvPost: async (body, options = {}) => {
            const localVarPath = `/api/v2/Requests/tv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvProcessingCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvProcessingCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/tv/processing/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets unavailable Tv requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvUnavailableCountPositionSortSortOrderGet: async (count, position, sort, sortOrder, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new base_1.RequiredError("sort", "Required parameter sort was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet.");
            }
            // verify required parameter 'sortOrder' is not null or undefined
            if (sortOrder === null || sortOrder === undefined) {
                throw new base_1.RequiredError("sortOrder", "Required parameter sortOrder was null or undefined when calling apiV2RequestsTvUnavailableCountPositionSortSortOrderGet.");
            }
            const localVarPath = `/api/v2/Requests/tv/unavailable/{count}/{position}/{sort}/{sortOrder}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)))
                .replace(`{${"sortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.RequestsApiAxiosParamCreator = RequestsApiAxiosParamCreator;
/**
 * RequestsApi - functional programming interface
 * @export
 */
const RequestsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsAlbumCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsAlbumCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieAdvancedoptionsPost(body, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieAdvancedoptionsPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} collectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets movie requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMoviePendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMoviePendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the unavailable movie requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiStoreEntitiesRequestType} type
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvAdvancedoptionsPost(body, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvAdvancedoptionsPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets Tv requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Requests a tv show/episode/season.
         * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvPost(body, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets unavailable Tv requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            const localVarAxiosArgs = await (0, exports.RequestsApiAxiosParamCreator)(configuration).apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.RequestsApiFp = RequestsApiFp;
/**
 * RequestsApi - factory interface
 * @export
 */
const RequestsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsAlbumCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieAdvancedoptionsPost(body, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieAdvancedoptionsPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} collectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets movie requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMoviePendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMoviePendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the unavailable movie requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiStoreEntitiesRequestType} type
         * @param {number} requestId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvAdvancedoptionsPost(body, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvAdvancedoptionsPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets Tv requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Requests a tv show/episode/season.
         * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvPost(body, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} count
         * @param {number} position
         * @param {string} sort
         * @param {string} sortOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets unavailable Tv requests.
         * @param {number} count The count of items you want to return. e.g. 30
         * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
         * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
         * @param {string} sortOrder asc or desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
            return (0, exports.RequestsApiFp)(configuration)
                .apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.RequestsApiFactory = RequestsApiFactory;
/**
 * RequestsApi - object-oriented interface
 * @export
 * @class RequestsApi
 * @extends {BaseAPI}
 */
class RequestsApi extends base_1.BaseAPI {
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsAlbumAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsAlbumCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsAlbumCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsAlbumDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsAlbumPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsAlbumProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieAdvancedoptionsPost(body, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieAdvancedoptionsPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieAvailbleCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieCollectionCollectionIdPost(collectionId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMoviePendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMoviePendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the unavailable movie requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsMovieUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiStoreEntitiesRequestType} type
     * @param {number} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsReprocessTypeRequestIdPost(type, requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiCoreModelsRequestsMediaAdvancedOptions} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvAdvancedoptionsPost(body, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvAdvancedoptionsPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvAvailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvDeniedCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvPendingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Requests a tv show/episode/season.
     * @param {OmbiCoreModelsRequestsTvRequestViewModelV2} [body] The tv.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvPost(body, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} count
     * @param {number} position
     * @param {string} sort
     * @param {string} sortOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvProcessingCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets unavailable Tv requests.
     * @param {number} count The count of items you want to return. e.g. 30
     * @param {number} position The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)
     * @param {string} sort The item to sort on e.g. \&quot;requestDate\&quot;
     * @param {string} sortOrder asc or desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options) {
        return (0, exports.RequestsApiFp)(this.configuration)
            .apiV2RequestsTvUnavailableCountPositionSortSortOrderGet(count, position, sort, sortOrder, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.RequestsApi = RequestsApi;
//# sourceMappingURL=requests-api.js.map