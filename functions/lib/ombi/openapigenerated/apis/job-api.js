"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobApi = exports.JobApiFactory = exports.JobApiFp = exports.JobApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * JobApi - axios parameter creator
 * @export
 */
const JobApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Runs the Arr Availability Checker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobArrAvailabilityPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/arrAvailability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobAutodeleterequestsPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/autodeleterequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Clear out the media server and resync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobClearmediaserverdataPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/clearmediaserverdata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the Emby Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobEmbycontentcacherPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/embycontentcacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the Emby User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobEmbyuserimporterPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/embyuserimporter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the Jellyfin Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobJellyfincontentcacherPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/jellyfincontentcacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the Jellyfin User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobJellyfinuserimporterPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/jellyfinuserimporter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the newsletter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobNewsletterPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/newsletter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the Plex Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobPlexcontentcacherPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/plexcontentcacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs a smaller version of the content cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobPlexrecentlyaddedPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/plexrecentlyadded`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the Plex User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobPlexuserimporterPost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/plexuserimporter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Checks for an update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobUpdateGet: async (options = {}) => {
            const localVarPath = `/api/v1/Job/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Runs the update job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobUpdatePost: async (options = {}) => {
            const localVarPath = `/api/v1/Job/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.JobApiAxiosParamCreator = JobApiAxiosParamCreator;
/**
 * JobApi - functional programming interface
 * @export
 */
const JobApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Runs the Arr Availability Checker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobArrAvailabilityPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobArrAvailabilityPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobAutodeleterequestsPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobAutodeleterequestsPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Clear out the media server and resync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobClearmediaserverdataPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobClearmediaserverdataPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the Emby Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobEmbycontentcacherPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobEmbycontentcacherPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the Emby User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobEmbyuserimporterPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobEmbyuserimporterPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the Jellyfin Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobJellyfincontentcacherPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobJellyfincontentcacherPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the Jellyfin User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobJellyfinuserimporterPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobJellyfinuserimporterPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the newsletter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobNewsletterPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobNewsletterPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the Plex Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobPlexcontentcacherPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobPlexcontentcacherPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs a smaller version of the content cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobPlexrecentlyaddedPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobPlexrecentlyaddedPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the Plex User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobPlexuserimporterPost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobPlexuserimporterPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Checks for an update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobUpdateGet(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobUpdateGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Runs the update job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobUpdatePost(options) {
            const localVarAxiosArgs = await (0, exports.JobApiAxiosParamCreator)(configuration).apiV1JobUpdatePost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.JobApiFp = JobApiFp;
/**
 * JobApi - factory interface
 * @export
 */
const JobApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Runs the Arr Availability Checker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobArrAvailabilityPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobArrAvailabilityPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobAutodeleterequestsPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobAutodeleterequestsPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Clear out the media server and resync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobClearmediaserverdataPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobClearmediaserverdataPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the Emby Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobEmbycontentcacherPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobEmbycontentcacherPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the Emby User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobEmbyuserimporterPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobEmbyuserimporterPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the Jellyfin Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobJellyfincontentcacherPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobJellyfincontentcacherPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the Jellyfin User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobJellyfinuserimporterPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobJellyfinuserimporterPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the newsletter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobNewsletterPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobNewsletterPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the Plex Content Cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobPlexcontentcacherPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobPlexcontentcacherPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs a smaller version of the content cacher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobPlexrecentlyaddedPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobPlexrecentlyaddedPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the Plex User importer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobPlexuserimporterPost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobPlexuserimporterPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Checks for an update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobUpdateGet(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobUpdateGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Runs the update job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobUpdatePost(options) {
            return (0, exports.JobApiFp)(configuration)
                .apiV1JobUpdatePost(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.JobApiFactory = JobApiFactory;
/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
class JobApi extends base_1.BaseAPI {
    /**
     *
     * @summary Runs the Arr Availability Checker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobArrAvailabilityPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobArrAvailabilityPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobAutodeleterequestsPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobAutodeleterequestsPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Clear out the media server and resync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobClearmediaserverdataPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobClearmediaserverdataPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the Emby Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobEmbycontentcacherPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobEmbycontentcacherPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the Emby User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobEmbyuserimporterPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobEmbyuserimporterPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the Jellyfin Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobJellyfincontentcacherPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobJellyfincontentcacherPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the Jellyfin User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobJellyfinuserimporterPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobJellyfinuserimporterPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the newsletter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobNewsletterPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobNewsletterPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the Plex Content Cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobPlexcontentcacherPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobPlexcontentcacherPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs a smaller version of the content cacher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobPlexrecentlyaddedPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobPlexrecentlyaddedPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the Plex User importer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobPlexuserimporterPost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobPlexuserimporterPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Checks for an update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobUpdateGet(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobUpdateGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Runs the update job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    apiV1JobUpdatePost(options) {
        return (0, exports.JobApiFp)(this.configuration)
            .apiV1JobUpdatePost(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.JobApi = JobApi;
//# sourceMappingURL=job-api.js.map