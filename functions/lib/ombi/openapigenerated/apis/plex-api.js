"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlexApi = exports.PlexApiFactory = exports.PlexApiFp = exports.PlexApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * PlexApi - axios parameter creator
 * @export
 */
const PlexApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Gets the plex friends.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexFriendsGet: async (options = {}) => {
            const localVarPath = `/api/v1/Plex/friends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} machineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexLibrariesMachineIdGet: async (machineId, options = {}) => {
            // verify required parameter 'machineId' is not null or undefined
            if (machineId === null || machineId === undefined) {
                throw new base_1.RequiredError("machineId", "Required parameter machineId was null or undefined when calling apiV1PlexLibrariesMachineIdGet.");
            }
            const localVarPath = `/api/v1/Plex/Libraries/{machineId}`.replace(`{${"machineId"}}`, encodeURIComponent(String(machineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the plex libraries.
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexLibrariesPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Plex/Libraries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiModelsPlexOAuthViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexOauthPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Plex/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Signs into the Plex API.
         * @param {OmbiApiPlexModelsUserRequest} [body] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Plex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the plex servers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexServersGet: async (options = {}) => {
            const localVarPath = `/api/v1/Plex/servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the plex servers.
         * @param {OmbiApiPlexModelsUserRequest} [body] The u.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexServersPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Plex/servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiModelsExternalPlexUserViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexUserPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Plex/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlexApiAxiosParamCreator = PlexApiAxiosParamCreator;
/**
 * PlexApi - functional programming interface
 * @export
 */
const PlexApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Gets the plex friends.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexFriendsGet(options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexFriendsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} machineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexLibrariesMachineIdGet(machineId, options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexLibrariesMachineIdGet(machineId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the plex libraries.
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexLibrariesPost(body, options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexLibrariesPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiModelsPlexOAuthViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexOauthPost(body, options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexOauthPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Signs into the Plex API.
         * @param {OmbiApiPlexModelsUserRequest} [body] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexPost(body, options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the plex servers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexServersGet(options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexServersGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the plex servers.
         * @param {OmbiApiPlexModelsUserRequest} [body] The u.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexServersPost(body, options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexServersPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiModelsExternalPlexUserViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PlexUserPost(body, options) {
            const localVarAxiosArgs = await (0, exports.PlexApiAxiosParamCreator)(configuration).apiV1PlexUserPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.PlexApiFp = PlexApiFp;
/**
 * PlexApi - factory interface
 * @export
 */
const PlexApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Gets the plex friends.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexFriendsGet(options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexFriendsGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} machineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexLibrariesMachineIdGet(machineId, options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexLibrariesMachineIdGet(machineId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the plex libraries.
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexLibrariesPost(body, options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexLibrariesPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiModelsPlexOAuthViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexOauthPost(body, options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexOauthPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Signs into the Plex API.
         * @param {OmbiApiPlexModelsUserRequest} [body] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexPost(body, options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the plex servers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexServersGet(options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexServersGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the plex servers.
         * @param {OmbiApiPlexModelsUserRequest} [body] The u.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexServersPost(body, options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexServersPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiModelsExternalPlexUserViewModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PlexUserPost(body, options) {
            return (0, exports.PlexApiFp)(configuration)
                .apiV1PlexUserPost(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.PlexApiFactory = PlexApiFactory;
/**
 * PlexApi - object-oriented interface
 * @export
 * @class PlexApi
 * @extends {BaseAPI}
 */
class PlexApi extends base_1.BaseAPI {
    /**
     *
     * @summary Gets the plex friends.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexFriendsGet(options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexFriendsGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexLibrariesMachineIdGet(machineId, options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexLibrariesMachineIdGet(machineId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the plex libraries.
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexLibrariesPost(body, options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexLibrariesPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiModelsPlexOAuthViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexOauthPost(body, options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexOauthPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Signs into the Plex API.
     * @param {OmbiApiPlexModelsUserRequest} [body] The request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexPost(body, options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the plex servers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexServersGet(options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexServersGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the plex servers.
     * @param {OmbiApiPlexModelsUserRequest} [body] The u.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexServersPost(body, options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexServersPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiModelsExternalPlexUserViewModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    apiV1PlexUserPost(body, options) {
        return (0, exports.PlexApiFp)(this.configuration)
            .apiV1PlexUserPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.PlexApi = PlexApi;
//# sourceMappingURL=plex-api.js.map