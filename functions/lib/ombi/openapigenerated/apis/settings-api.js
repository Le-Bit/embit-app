"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsApi = exports.SettingsApiFactory = exports.SettingsApiFp = exports.SettingsApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * SettingsApi - axios parameter creator
 * @export
 */
const SettingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsAboutGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Authentication Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsAuthenticationGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/authentication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Authentication settings.
         * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsAuthenticationPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/authentication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the base url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsBaseurlGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/baseurl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsClientidGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/clientid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the CouchPotatoSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCouchPotatoGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/CouchPotato`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the CouchPotatoSettings settings.
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCouchPotatoPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/CouchPotato`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Customization Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCustomizationGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Customization settings.
         * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCustomizationPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the default language set in Ombi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsDefaultlanguageGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/defaultlanguage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the DogNzbSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsDogNzbGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/DogNzb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the DogNzbSettings settings.
         * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsDogNzbPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/DogNzb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Emby Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsEmbyGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/emby`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Emby settings.
         * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsEmbyPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/emby`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Issues Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsIssuesGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/Issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Vote settings.
         * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsIssuesPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/Issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsIssuesenabledGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/issuesenabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Jellyfin Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJellyfinGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/jellyfin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Jellyfin settings.
         * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJellyfinPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/jellyfin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the JobSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJobsGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the JobSettings settings.
         * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJobsPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Landing Page Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLandingpageGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/landingpage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Landing Page settings.
         * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLandingpagePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/landingpage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Lidarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLidarrGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/lidarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Lidarr settings.
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLidarrPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/lidarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Lidarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLidarrenabledGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/lidarrenabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the discord Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsDiscordGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/discord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the discord notification settings.
         * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsDiscordPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/discord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Email Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsEmailEnabledGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/email/enabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Email Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsEmailGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the email notification settings.
         * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsEmailPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the gotify Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsGotifyGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/gotify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the gotify notification settings.
         * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsGotifyPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/gotify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Mattermost Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMattermostGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/mattermost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the Mattermost notification settings.
         * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMattermostPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/mattermost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Mobile Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMobileGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/mobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the Mobile notification settings.
         * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMobilePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/mobile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Newsletter Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsNewsletterGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/newsletter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the Newsletter notification settings.
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsNewsletterPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/newsletter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the pushbullet Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushbulletGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/pushbullet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the pushbullet notification settings.
         * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushbulletPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/pushbullet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the pushover Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushoverGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/pushover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the pushover notification settings.
         * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushoverPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/pushover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the slack Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsSlackGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/slack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the slack notification settings.
         * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsSlackPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/slack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the telegram Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTelegramGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the telegram notification settings.
         * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTelegramPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Twilio Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTwilioGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/twilio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the Mattermost notification settings.
         * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTwilioPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/twilio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the webhook notification settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsWebhookGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Saves the webhook notification settings.
         * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsWebhookPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/notifications/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Ombi settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsOmbiGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/ombi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Ombi settings.
         * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsOmbiPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/ombi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsOmbiResetApiPost: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/ombi/resetApi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Plex Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsPlexGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/plex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Plex settings.
         * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsPlexPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/plex`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Radarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsRadarrGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/radarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Radarr settings.
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsRadarrPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/radarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the SickRage Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSickRageGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/SickRage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the SickRage settings.
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSickRagePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/SickRage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Sonarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSonarrGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/sonarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Sonarr settings.
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSonarrPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/sonarr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OmbiModelsCronViewModelBody} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsTestcronPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/testcron`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get's the preset themes available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsThemesGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/themes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get The Movie DB settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsThemoviedbGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/themoviedb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save The Movie DB settings.
         * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsThemoviedbPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/themoviedb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Update Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUpdateGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Update settings.
         * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUpdatePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the UserManagement Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUserManagementGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/UserManagement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the UserManagement settings.
         * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUserManagementPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/UserManagement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the Vote Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsVoteGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/vote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save the Vote settings.
         * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsVotePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/Settings/vote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsVoteenabledGet: async (options = {}) => {
            const localVarPath = `/api/v1/Settings/voteenabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SettingsApiAxiosParamCreator = SettingsApiAxiosParamCreator;
/**
 * SettingsApi - functional programming interface
 * @export
 */
const SettingsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsAboutGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsAboutGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Authentication Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsAuthenticationGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsAuthenticationGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Authentication settings.
         * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsAuthenticationPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsAuthenticationPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the base url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsBaseurlGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsBaseurlGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsClientidGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsClientidGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the CouchPotatoSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsCouchPotatoGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsCouchPotatoGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the CouchPotatoSettings settings.
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsCouchPotatoPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsCouchPotatoPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Customization Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsCustomizationGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsCustomizationGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Customization settings.
         * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsCustomizationPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsCustomizationPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the default language set in Ombi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsDefaultlanguageGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsDefaultlanguageGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the DogNzbSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsDogNzbGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsDogNzbGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the DogNzbSettings settings.
         * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsDogNzbPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsDogNzbPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Emby Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsEmbyGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsEmbyGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Emby settings.
         * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsEmbyPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsEmbyPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Issues Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsIssuesGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsIssuesGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Vote settings.
         * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsIssuesPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsIssuesPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsIssuesenabledGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsIssuesenabledGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Jellyfin Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsJellyfinGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsJellyfinGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Jellyfin settings.
         * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsJellyfinPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsJellyfinPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the JobSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsJobsGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsJobsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the JobSettings settings.
         * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsJobsPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsJobsPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Landing Page Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsLandingpageGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsLandingpageGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Landing Page settings.
         * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsLandingpagePost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsLandingpagePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Lidarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsLidarrGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsLidarrGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Lidarr settings.
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsLidarrPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsLidarrPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Lidarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsLidarrenabledGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsLidarrenabledGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the discord Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsDiscordGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsDiscordGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the discord notification settings.
         * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsDiscordPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsDiscordPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Email Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsEmailEnabledGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsEmailEnabledGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Email Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsEmailGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsEmailGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the email notification settings.
         * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsEmailPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsEmailPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the gotify Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsGotifyGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsGotifyGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the gotify notification settings.
         * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsGotifyPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsGotifyPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Mattermost Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsMattermostGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsMattermostGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the Mattermost notification settings.
         * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsMattermostPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsMattermostPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Mobile Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsMobileGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsMobileGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the Mobile notification settings.
         * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsMobilePost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsMobilePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Newsletter Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsNewsletterGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsNewsletterGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the Newsletter notification settings.
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsNewsletterPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsNewsletterPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the pushbullet Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsPushbulletGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsPushbulletGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the pushbullet notification settings.
         * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsPushbulletPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsPushbulletPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the pushover Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsPushoverGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsPushoverGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the pushover notification settings.
         * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsPushoverPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsPushoverPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the slack Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsSlackGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsSlackGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the slack notification settings.
         * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsSlackPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsSlackPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the telegram Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsTelegramGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsTelegramGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the telegram notification settings.
         * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsTelegramPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsTelegramPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Twilio Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsTwilioGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsTwilioGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the Mattermost notification settings.
         * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsTwilioPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsTwilioPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the webhook notification settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsWebhookGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsWebhookGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Saves the webhook notification settings.
         * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsNotificationsWebhookPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsNotificationsWebhookPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Ombi settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsOmbiGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsOmbiGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Ombi settings.
         * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsOmbiPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsOmbiPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsOmbiResetApiPost(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsOmbiResetApiPost(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Plex Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsPlexGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsPlexGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Plex settings.
         * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsPlexPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsPlexPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Radarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsRadarrGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsRadarrGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Radarr settings.
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsRadarrPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsRadarrPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the SickRage Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsSickRageGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsSickRageGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the SickRage settings.
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsSickRagePost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsSickRagePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Sonarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsSonarrGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsSonarrGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Sonarr settings.
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsSonarrPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsSonarrPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {OmbiModelsCronViewModelBody} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsTestcronPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsTestcronPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get's the preset themes available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsThemesGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsThemesGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get The Movie DB settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsThemoviedbGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsThemoviedbGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save The Movie DB settings.
         * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsThemoviedbPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsThemoviedbPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Update Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsUpdateGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsUpdateGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Update settings.
         * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsUpdatePost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsUpdatePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the UserManagement Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsUserManagementGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsUserManagementGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the UserManagement settings.
         * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsUserManagementPost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsUserManagementPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the Vote Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsVoteGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsVoteGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Save the Vote settings.
         * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsVotePost(body, options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsVotePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SettingsVoteenabledGet(options) {
            const localVarAxiosArgs = await (0, exports.SettingsApiAxiosParamCreator)(configuration).apiV1SettingsVoteenabledGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.SettingsApiFp = SettingsApiFp;
/**
 * SettingsApi - factory interface
 * @export
 */
const SettingsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsAboutGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsAboutGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Authentication Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsAuthenticationGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsAuthenticationGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Authentication settings.
         * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsAuthenticationPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsAuthenticationPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the base url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsBaseurlGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsBaseurlGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsClientidGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsClientidGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the CouchPotatoSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCouchPotatoGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsCouchPotatoGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the CouchPotatoSettings settings.
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCouchPotatoPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsCouchPotatoPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Customization Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCustomizationGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsCustomizationGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Customization settings.
         * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsCustomizationPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsCustomizationPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the default language set in Ombi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsDefaultlanguageGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsDefaultlanguageGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the DogNzbSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsDogNzbGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsDogNzbGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the DogNzbSettings settings.
         * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsDogNzbPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsDogNzbPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Emby Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsEmbyGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsEmbyGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Emby settings.
         * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsEmbyPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsEmbyPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Issues Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsIssuesGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsIssuesGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Vote settings.
         * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsIssuesPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsIssuesPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsIssuesenabledGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsIssuesenabledGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Jellyfin Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJellyfinGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsJellyfinGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Jellyfin settings.
         * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJellyfinPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsJellyfinPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the JobSettings Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJobsGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsJobsGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the JobSettings settings.
         * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsJobsPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsJobsPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Landing Page Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLandingpageGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsLandingpageGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Landing Page settings.
         * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLandingpagePost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsLandingpagePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Lidarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLidarrGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsLidarrGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Lidarr settings.
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLidarrPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsLidarrPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Lidarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsLidarrenabledGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsLidarrenabledGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the discord Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsDiscordGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsDiscordGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the discord notification settings.
         * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsDiscordPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsDiscordPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Email Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsEmailEnabledGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsEmailEnabledGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Email Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsEmailGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsEmailGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the email notification settings.
         * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsEmailPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsEmailPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the gotify Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsGotifyGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsGotifyGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the gotify notification settings.
         * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsGotifyPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsGotifyPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Mattermost Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMattermostGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsMattermostGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the Mattermost notification settings.
         * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMattermostPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsMattermostPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Mobile Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMobileGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsMobileGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the Mobile notification settings.
         * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsMobilePost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsMobilePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Newsletter Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsNewsletterGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsNewsletterGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the Newsletter notification settings.
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsNewsletterPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsNewsletterPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the pushbullet Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushbulletGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsPushbulletGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the pushbullet notification settings.
         * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushbulletPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsPushbulletPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the pushover Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushoverGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsPushoverGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the pushover notification settings.
         * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsPushoverPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsPushoverPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the slack Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsSlackGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsSlackGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the slack notification settings.
         * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsSlackPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsSlackPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the telegram Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTelegramGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsTelegramGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the telegram notification settings.
         * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTelegramPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsTelegramPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Twilio Notification Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTwilioGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsTwilioGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the Mattermost notification settings.
         * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsTwilioPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsTwilioPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the webhook notification settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsWebhookGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsWebhookGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Saves the webhook notification settings.
         * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsNotificationsWebhookPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsNotificationsWebhookPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Ombi settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsOmbiGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsOmbiGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Ombi settings.
         * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsOmbiPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsOmbiPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsOmbiResetApiPost(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsOmbiResetApiPost(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Plex Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsPlexGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsPlexGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Plex settings.
         * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsPlexPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsPlexPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Radarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsRadarrGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsRadarrGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Radarr settings.
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsRadarrPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsRadarrPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the SickRage Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSickRageGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsSickRageGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the SickRage settings.
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSickRagePost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsSickRagePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Sonarr Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSonarrGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsSonarrGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Sonarr settings.
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsSonarrPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsSonarrPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {OmbiModelsCronViewModelBody} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsTestcronPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsTestcronPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get's the preset themes available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsThemesGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsThemesGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get The Movie DB settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsThemoviedbGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsThemoviedbGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save The Movie DB settings.
         * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsThemoviedbPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsThemoviedbPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Update Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUpdateGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsUpdateGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Update settings.
         * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUpdatePost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsUpdatePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the UserManagement Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUserManagementGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsUserManagementGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the UserManagement settings.
         * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsUserManagementPost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsUserManagementPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the Vote Settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsVoteGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsVoteGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save the Vote settings.
         * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsVotePost(body, options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsVotePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SettingsVoteenabledGet(options) {
            return (0, exports.SettingsApiFp)(configuration)
                .apiV1SettingsVoteenabledGet(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.SettingsApiFactory = SettingsApiFactory;
/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
class SettingsApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsAboutGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsAboutGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Authentication Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsAuthenticationGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsAuthenticationGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Authentication settings.
     * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsAuthenticationPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsAuthenticationPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the base url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsBaseurlGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsBaseurlGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsClientidGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsClientidGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the CouchPotatoSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsCouchPotatoGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsCouchPotatoGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the CouchPotatoSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsCouchPotatoPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsCouchPotatoPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Customization Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsCustomizationGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsCustomizationGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Customization settings.
     * @param {OmbiSettingsSettingsModelsCustomizationSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsCustomizationPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsCustomizationPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the default language set in Ombi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsDefaultlanguageGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsDefaultlanguageGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the DogNzbSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsDogNzbGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsDogNzbGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the DogNzbSettings settings.
     * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsDogNzbPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsDogNzbPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Emby Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsEmbyGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsEmbyGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Emby settings.
     * @param {OmbiCoreSettingsModelsExternalEmbySettings} [body] The emby.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsEmbyPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsEmbyPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Issues Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsIssuesGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsIssuesGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsIssueSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsIssuesPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsIssuesPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsIssuesenabledGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsIssuesenabledGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Jellyfin Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsJellyfinGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsJellyfinGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Jellyfin settings.
     * @param {OmbiCoreSettingsModelsExternalJellyfinSettings} [body] The jellyfin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsJellyfinPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsJellyfinPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the JobSettings Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsJobsGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsJobsGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the JobSettings settings.
     * @param {OmbiSettingsSettingsModelsJobSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsJobsPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsJobsPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Landing Page Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsLandingpageGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsLandingpageGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Landing Page settings.
     * @param {OmbiCoreSettingsModelsLandingPageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsLandingpagePost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsLandingpagePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsLidarrGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsLidarrGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Lidarr settings.
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsLidarrPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsLidarrPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Lidarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsLidarrenabledGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsLidarrenabledGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the discord Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsDiscordGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsDiscordGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the discord notification settings.
     * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsDiscordPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsDiscordPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsEmailEnabledGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsEmailEnabledGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Email Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsEmailGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsEmailGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the email notification settings.
     * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsEmailPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsEmailPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the gotify Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsGotifyGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsGotifyGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the gotify notification settings.
     * @param {OmbiCoreModelsUIGotifyNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsGotifyPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsGotifyPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Mattermost Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsMattermostGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsMattermostGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsMattermostPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsMattermostPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Mobile Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsMobileGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsMobileGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the Mobile notification settings.
     * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsMobilePost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsMobilePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Newsletter Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsNewsletterGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsNewsletterGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the Newsletter notification settings.
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsNewsletterPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsNewsletterPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the pushbullet Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsPushbulletGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsPushbulletGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the pushbullet notification settings.
     * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsPushbulletPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsPushbulletPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the pushover Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsPushoverGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsPushoverGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the pushover notification settings.
     * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsPushoverPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsPushoverPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the slack Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsSlackGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsSlackGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the slack notification settings.
     * @param {OmbiCoreModelsUISlackNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsSlackPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsSlackPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the telegram Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsTelegramGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsTelegramGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the telegram notification settings.
     * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsTelegramPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsTelegramPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Twilio Notification Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsTwilioGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsTwilioGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the Mattermost notification settings.
     * @param {OmbiCoreModelsUITwilioSettingsViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsTwilioPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsTwilioPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the webhook notification settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsWebhookGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsWebhookGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Saves the webhook notification settings.
     * @param {OmbiCoreModelsUIWebhookNotificationViewModel} [body] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsNotificationsWebhookPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsNotificationsWebhookPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Ombi settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsOmbiGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsOmbiGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Ombi settings.
     * @param {OmbiSettingsSettingsModelsOmbiSettings} [body] The ombi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsOmbiPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsOmbiPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsOmbiResetApiPost(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsOmbiResetApiPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Plex Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsPlexGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsPlexGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Plex settings.
     * @param {OmbiCoreSettingsModelsExternalPlexSettings} [body] The plex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsPlexPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsPlexPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Radarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsRadarrGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsRadarrGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Radarr settings.
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsRadarrPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsRadarrPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the SickRage Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsSickRageGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsSickRageGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the SickRage settings.
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsSickRagePost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsSickRagePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Sonarr Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsSonarrGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsSonarrGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Sonarr settings.
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsSonarrPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsSonarrPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {OmbiModelsCronViewModelBody} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsTestcronPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsTestcronPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get's the preset themes available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsThemesGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsThemesGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get The Movie DB settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsThemoviedbGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsThemoviedbGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save The Movie DB settings.
     * @param {OmbiCoreSettingsModelsExternalTheMovieDbSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsThemoviedbPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsThemoviedbPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Update Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsUpdateGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsUpdateGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Update settings.
     * @param {OmbiSettingsSettingsModelsUpdateSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsUpdatePost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsUpdatePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the UserManagement Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsUserManagementGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsUserManagementGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the UserManagement settings.
     * @param {OmbiSettingsSettingsModelsUserManagementSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsUserManagementPost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsUserManagementPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the Vote Settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsVoteGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsVoteGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Save the Vote settings.
     * @param {OmbiSettingsSettingsModelsVoteSettings} [body] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsVotePost(body, options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsVotePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    apiV1SettingsVoteenabledGet(options) {
        return (0, exports.SettingsApiFp)(this.configuration)
            .apiV1SettingsVoteenabledGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.SettingsApi = SettingsApi;
//# sourceMappingURL=settings-api.js.map