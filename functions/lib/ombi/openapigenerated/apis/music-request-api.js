"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MusicRequestApi = exports.MusicRequestApiFactory = exports.MusicRequestApiFp = exports.MusicRequestApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Ombi Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * MusicRequestApi - axios parameter creator
 * @export
 */
const MusicRequestApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Approves the specified album request.
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The albums&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicApprovePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/request/music/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set's the specified album as available
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicAvailablePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/request/music/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets album requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType
         * @param {number} availabilityType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet: async (count, position, orderType, statusType, availabilityType, options = {}) => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new base_1.RequiredError("count", "Required parameter count was null or undefined when calling apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet.");
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new base_1.RequiredError("position", "Required parameter position was null or undefined when calling apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet.");
            }
            // verify required parameter 'orderType' is not null or undefined
            if (orderType === null || orderType === undefined) {
                throw new base_1.RequiredError("orderType", "Required parameter orderType was null or undefined when calling apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet.");
            }
            // verify required parameter 'statusType' is not null or undefined
            if (statusType === null || statusType === undefined) {
                throw new base_1.RequiredError("statusType", "Required parameter statusType was null or undefined when calling apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet.");
            }
            // verify required parameter 'availabilityType' is not null or undefined
            if (availabilityType === null || availabilityType === undefined) {
                throw new base_1.RequiredError("availabilityType", "Required parameter availabilityType was null or undefined when calling apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet.");
            }
            const localVarPath = `/api/v1/request/music/{count}/{position}/{orderType}/{statusType}/{availabilityType}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"orderType"}}`, encodeURIComponent(String(orderType)))
                .replace(`{${"statusType"}}`, encodeURIComponent(String(statusType)))
                .replace(`{${"availabilityType"}}`, encodeURIComponent(String(availabilityType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname +
                    localVarUrlObj.search +
                    localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Denies the specified album request.
         * @param {OmbiCoreModelsRequestsDenyAlbumModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicDenyPut: async (body, options = {}) => {
            const localVarPath = `/api/v1/request/music/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets all album requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicGet: async (options = {}) => {
            const localVarPath = `/api/v1/request/music`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Requests a album.
         * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [body] The album.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicPost: async (body, options = {}) => {
            const localVarPath = `/api/v1/request/music`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets model containing remaining number of music requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicRemainingGet: async (options = {}) => {
            const localVarPath = `/api/v1/request/music/remaining`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes the specified album request.
         * @param {number} requestId The request identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicRequestIdDelete: async (requestId, options = {}) => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError("requestId", "Required parameter requestId was null or undefined when calling apiV1RequestMusicRequestIdDelete.");
            }
            const localVarPath = `/api/v1/request/music/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for a specific album request
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicSearchSearchTermGet: async (searchTerm, options = {}) => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new base_1.RequiredError("searchTerm", "Required parameter searchTerm was null or undefined when calling apiV1RequestMusicSearchSearchTermGet.");
            }
            const localVarPath = `/api/v1/request/music/search/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets the total amount of album requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicTotalGet: async (options = {}) => {
            const localVarPath = `/api/v1/request/music/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set's the specified album as unavailable
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicUnavailablePost: async (body, options = {}) => {
            const localVarPath = `/api/v1/request/music/unavailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json-patch+json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MusicRequestApiAxiosParamCreator = MusicRequestApiAxiosParamCreator;
/**
 * MusicRequestApi - functional programming interface
 * @export
 */
const MusicRequestApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Approves the specified album request.
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The albums&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicApprovePost(body, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicApprovePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Set's the specified album as available
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicAvailablePost(body, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicAvailablePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets album requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType
         * @param {number} availabilityType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Denies the specified album request.
         * @param {OmbiCoreModelsRequestsDenyAlbumModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicDenyPut(body, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicDenyPut(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets all album requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicGet(options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Requests a album.
         * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [body] The album.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicPost(body, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicPost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets model containing remaining number of music requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicRemainingGet(options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicRemainingGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes the specified album request.
         * @param {number} requestId The request identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicRequestIdDelete(requestId, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicRequestIdDelete(requestId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Searches for a specific album request
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicSearchSearchTermGet(searchTerm, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicSearchSearchTermGet(searchTerm, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Gets the total amount of album requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicTotalGet(options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicTotalGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Set's the specified album as unavailable
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RequestMusicUnavailablePost(body, options) {
            const localVarAxiosArgs = await (0, exports.MusicRequestApiAxiosParamCreator)(configuration).apiV1RequestMusicUnavailablePost(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.MusicRequestApiFp = MusicRequestApiFp;
/**
 * MusicRequestApi - factory interface
 * @export
 */
const MusicRequestApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Approves the specified album request.
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The albums&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicApprovePost(body, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicApprovePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set's the specified album as available
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicAvailablePost(body, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicAvailablePost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets album requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType
         * @param {number} availabilityType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Denies the specified album request.
         * @param {OmbiCoreModelsRequestsDenyAlbumModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicDenyPut(body, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicDenyPut(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets all album requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicGet(options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Requests a album.
         * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [body] The album.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicPost(body, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicPost(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets model containing remaining number of music requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicRemainingGet(options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicRemainingGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes the specified album request.
         * @param {number} requestId The request identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicRequestIdDelete(requestId, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicRequestIdDelete(requestId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Searches for a specific album request
         * @param {string} searchTerm The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicSearchSearchTermGet(searchTerm, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicSearchSearchTermGet(searchTerm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets the total amount of album requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicTotalGet(options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicTotalGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set's the specified album as unavailable
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RequestMusicUnavailablePost(body, options) {
            return (0, exports.MusicRequestApiFp)(configuration)
                .apiV1RequestMusicUnavailablePost(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.MusicRequestApiFactory = MusicRequestApiFactory;
/**
 * MusicRequestApi - object-oriented interface
 * @export
 * @class MusicRequestApi
 * @extends {BaseAPI}
 */
class MusicRequestApi extends base_1.BaseAPI {
    /**
     *
     * @summary Approves the specified album request.
     * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The albums&#x27;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicApprovePost(body, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicApprovePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set's the specified album as available
     * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicAvailablePost(body, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicAvailablePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets album requests.
     * @param {number} count The count of items you want to return.
     * @param {number} position The position.
     * @param {number} orderType The way we want to order.
     * @param {number} statusType
     * @param {number} availabilityType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicCountPositionOrderTypeStatusTypeAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Denies the specified album request.
     * @param {OmbiCoreModelsRequestsDenyAlbumModel} [body] The album&#x27;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicDenyPut(body, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicDenyPut(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets all album requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicGet(options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Requests a album.
     * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [body] The album.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicPost(body, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicPost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets model containing remaining number of music requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicRemainingGet(options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicRemainingGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes the specified album request.
     * @param {number} requestId The request identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicRequestIdDelete(requestId, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicRequestIdDelete(requestId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Searches for a specific album request
     * @param {string} searchTerm The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicSearchSearchTermGet(searchTerm, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicSearchSearchTermGet(searchTerm, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets the total amount of album requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicTotalGet(options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicTotalGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set's the specified album as unavailable
     * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [body] The album&#x27;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    apiV1RequestMusicUnavailablePost(body, options) {
        return (0, exports.MusicRequestApiFp)(this.configuration)
            .apiV1RequestMusicUnavailablePost(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.MusicRequestApi = MusicRequestApi;
//# sourceMappingURL=music-request-api.js.map