"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageByNameServiceApi = exports.ImageByNameServiceApiFactory = exports.ImageByNameServiceApiFp = exports.ImageByNameServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ImageByNameServiceApi - axios parameter creator
 * @export
 */
const ImageByNameServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets all general images by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesGeneral: async (options = {}) => {
            const localVarPath = `/Images/General`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets a general image by name
         * @param {string} name The name of the image
         * @param {string} type Image Type (primary, backdrop, logo, etc).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesGeneralByNameByType: async (name, type, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling getImagesGeneralByNameByType.");
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new base_1.RequiredError("type", "Required parameter type was null or undefined when calling getImagesGeneralByNameByType.");
            }
            const localVarPath = `/Images/General/{Name}/{Type}`
                .replace(`{${"Name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"Type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all media info image by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesMediainfo: async (options = {}) => {
            const localVarPath = `/Images/MediaInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets a media info image by name
         * @param {string} name The name of the image
         * @param {string} theme The theme to get the image from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesMediainfoByThemeByName: async (name, theme, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling getImagesMediainfoByThemeByName.");
            }
            // verify required parameter 'theme' is not null or undefined
            if (theme === null || theme === undefined) {
                throw new base_1.RequiredError("theme", "Required parameter theme was null or undefined when calling getImagesMediainfoByThemeByName.");
            }
            const localVarPath = `/Images/MediaInfo/{Theme}/{Name}`
                .replace(`{${"Name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"Theme"}}`, encodeURIComponent(String(theme)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all rating images by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesRatings: async (options = {}) => {
            const localVarPath = `/Images/Ratings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets a rating image by name
         * @param {string} name The name of the image
         * @param {string} theme The theme to get the image from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesRatingsByThemeByName: async (name, theme, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling getImagesRatingsByThemeByName.");
            }
            // verify required parameter 'theme' is not null or undefined
            if (theme === null || theme === undefined) {
                throw new base_1.RequiredError("theme", "Required parameter theme was null or undefined when calling getImagesRatingsByThemeByName.");
            }
            const localVarPath = `/Images/Ratings/{Theme}/{Name}`
                .replace(`{${"Name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"Theme"}}`, encodeURIComponent(String(theme)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ImageByNameServiceApiAxiosParamCreator = ImageByNameServiceApiAxiosParamCreator;
/**
 * ImageByNameServiceApi - functional programming interface
 * @export
 */
const ImageByNameServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets all general images by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesGeneral(options) {
            const localVarAxiosArgs = await (0, exports.ImageByNameServiceApiAxiosParamCreator)(configuration).getImagesGeneral(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets a general image by name
         * @param {string} name The name of the image
         * @param {string} type Image Type (primary, backdrop, logo, etc).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesGeneralByNameByType(name, type, options) {
            const localVarAxiosArgs = await (0, exports.ImageByNameServiceApiAxiosParamCreator)(configuration).getImagesGeneralByNameByType(name, type, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all media info image by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesMediainfo(options) {
            const localVarAxiosArgs = await (0, exports.ImageByNameServiceApiAxiosParamCreator)(configuration).getImagesMediainfo(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets a media info image by name
         * @param {string} name The name of the image
         * @param {string} theme The theme to get the image from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesMediainfoByThemeByName(name, theme, options) {
            const localVarAxiosArgs = await (0, exports.ImageByNameServiceApiAxiosParamCreator)(configuration).getImagesMediainfoByThemeByName(name, theme, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all rating images by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesRatings(options) {
            const localVarAxiosArgs = await (0, exports.ImageByNameServiceApiAxiosParamCreator)(configuration).getImagesRatings(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets a rating image by name
         * @param {string} name The name of the image
         * @param {string} theme The theme to get the image from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesRatingsByThemeByName(name, theme, options) {
            const localVarAxiosArgs = await (0, exports.ImageByNameServiceApiAxiosParamCreator)(configuration).getImagesRatingsByThemeByName(name, theme, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ImageByNameServiceApiFp = ImageByNameServiceApiFp;
/**
 * ImageByNameServiceApi - factory interface
 * @export
 */
const ImageByNameServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets all general images by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesGeneral(options) {
            return (0, exports.ImageByNameServiceApiFp)(configuration)
                .getImagesGeneral(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets a general image by name
         * @param {string} name The name of the image
         * @param {string} type Image Type (primary, backdrop, logo, etc).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesGeneralByNameByType(name, type, options) {
            return (0, exports.ImageByNameServiceApiFp)(configuration)
                .getImagesGeneralByNameByType(name, type, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets all media info image by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesMediainfo(options) {
            return (0, exports.ImageByNameServiceApiFp)(configuration)
                .getImagesMediainfo(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets a media info image by name
         * @param {string} name The name of the image
         * @param {string} theme The theme to get the image from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesMediainfoByThemeByName(name, theme, options) {
            return (0, exports.ImageByNameServiceApiFp)(configuration)
                .getImagesMediainfoByThemeByName(name, theme, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets all rating images by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesRatings(options) {
            return (0, exports.ImageByNameServiceApiFp)(configuration)
                .getImagesRatings(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets a rating image by name
         * @param {string} name The name of the image
         * @param {string} theme The theme to get the image from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesRatingsByThemeByName(name, theme, options) {
            return (0, exports.ImageByNameServiceApiFp)(configuration)
                .getImagesRatingsByThemeByName(name, theme, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ImageByNameServiceApiFactory = ImageByNameServiceApiFactory;
/**
 * ImageByNameServiceApi - object-oriented interface
 * @export
 * @class ImageByNameServiceApi
 * @extends {BaseAPI}
 */
class ImageByNameServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets all general images by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameServiceApi
     */
    getImagesGeneral(options) {
        return (0, exports.ImageByNameServiceApiFp)(this.configuration)
            .getImagesGeneral(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets a general image by name
     * @param {string} name The name of the image
     * @param {string} type Image Type (primary, backdrop, logo, etc).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameServiceApi
     */
    getImagesGeneralByNameByType(name, type, options) {
        return (0, exports.ImageByNameServiceApiFp)(this.configuration)
            .getImagesGeneralByNameByType(name, type, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets all media info image by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameServiceApi
     */
    getImagesMediainfo(options) {
        return (0, exports.ImageByNameServiceApiFp)(this.configuration)
            .getImagesMediainfo(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets a media info image by name
     * @param {string} name The name of the image
     * @param {string} theme The theme to get the image from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameServiceApi
     */
    getImagesMediainfoByThemeByName(name, theme, options) {
        return (0, exports.ImageByNameServiceApiFp)(this.configuration)
            .getImagesMediainfoByThemeByName(name, theme, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets all rating images by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameServiceApi
     */
    getImagesRatings(options) {
        return (0, exports.ImageByNameServiceApiFp)(this.configuration)
            .getImagesRatings(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets a rating image by name
     * @param {string} name The name of the image
     * @param {string} theme The theme to get the image from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageByNameServiceApi
     */
    getImagesRatingsByThemeByName(name, theme, options) {
        return (0, exports.ImageByNameServiceApiFp)(this.configuration)
            .getImagesRatingsByThemeByName(name, theme, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ImageByNameServiceApi = ImageByNameServiceApi;
//# sourceMappingURL=image-by-name-service-api.js.map