"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibraryStructureServiceApi = exports.LibraryStructureServiceApiFactory = exports.LibraryStructureServiceApiFp = exports.LibraryStructureServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * LibraryStructureServiceApi - axios parameter creator
 * @export
 */
const LibraryStructureServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfolders: async (options = {}) => {
            const localVarPath = `/Library/VirtualFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfoldersPaths: async (options = {}) => {
            const localVarPath = `/Library/VirtualFolders/Paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryVirtualfoldersQuery: async (startIndex, limit, options = {}) => {
            const localVarPath = `/Library/VirtualFolders/Query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddVirtualFolder} body AddVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfolders: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postLibraryVirtualfolders.");
            }
            const localVarPath = `/Library/VirtualFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersLibraryoptions: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postLibraryVirtualfoldersLibraryoptions.");
            }
            const localVarPath = `/Library/VirtualFolders/LibraryOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersName: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postLibraryVirtualfoldersName.");
            }
            const localVarPath = `/Library/VirtualFolders/Name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddMediaPath} body AddMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPaths: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postLibraryVirtualfoldersPaths.");
            }
            const localVarPath = `/Library/VirtualFolders/Paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateMediaPath} body UpdateMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPathsUpdate: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postLibraryVirtualfoldersPathsUpdate.");
            }
            const localVarPath = `/Library/VirtualFolders/Paths/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LibraryStructureServiceApiAxiosParamCreator = LibraryStructureServiceApiAxiosParamCreator;
/**
 * LibraryStructureServiceApi - functional programming interface
 * @export
 */
const LibraryStructureServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLibraryVirtualfolders(options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).deleteLibraryVirtualfolders(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLibraryVirtualfoldersPaths(options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).deleteLibraryVirtualfoldersPaths(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibraryVirtualfoldersQuery(startIndex, limit, options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).getLibraryVirtualfoldersQuery(startIndex, limit, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddVirtualFolder} body AddVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfolders(body, options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).postLibraryVirtualfolders(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersLibraryoptions(body, options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).postLibraryVirtualfoldersLibraryoptions(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersName(body, options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).postLibraryVirtualfoldersName(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddMediaPath} body AddMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersPaths(body, options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).postLibraryVirtualfoldersPaths(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateMediaPath} body UpdateMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersPathsUpdate(body, options) {
            const localVarAxiosArgs = await (0, exports.LibraryStructureServiceApiAxiosParamCreator)(configuration).postLibraryVirtualfoldersPathsUpdate(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.LibraryStructureServiceApiFp = LibraryStructureServiceApiFp;
/**
 * LibraryStructureServiceApi - factory interface
 * @export
 */
const LibraryStructureServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfolders(options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .deleteLibraryVirtualfolders(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfoldersPaths(options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .deleteLibraryVirtualfoldersPaths(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryVirtualfoldersQuery(startIndex, limit, options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .getLibraryVirtualfoldersQuery(startIndex, limit, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddVirtualFolder} body AddVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfolders(body, options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .postLibraryVirtualfolders(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersLibraryoptions(body, options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .postLibraryVirtualfoldersLibraryoptions(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersName(body, options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .postLibraryVirtualfoldersName(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddMediaPath} body AddMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPaths(body, options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .postLibraryVirtualfoldersPaths(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateMediaPath} body UpdateMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPathsUpdate(body, options) {
            return (0, exports.LibraryStructureServiceApiFp)(configuration)
                .postLibraryVirtualfoldersPathsUpdate(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.LibraryStructureServiceApiFactory = LibraryStructureServiceApiFactory;
/**
 * LibraryStructureServiceApi - object-oriented interface
 * @export
 * @class LibraryStructureServiceApi
 * @extends {BaseAPI}
 */
class LibraryStructureServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    deleteLibraryVirtualfolders(options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .deleteLibraryVirtualfolders(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    deleteLibraryVirtualfoldersPaths(options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .deleteLibraryVirtualfoldersPaths(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    getLibraryVirtualfoldersQuery(startIndex, limit, options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .getLibraryVirtualfoldersQuery(startIndex, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryAddVirtualFolder} body AddVirtualFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    postLibraryVirtualfolders(body, options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .postLibraryVirtualfolders(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    postLibraryVirtualfoldersLibraryoptions(body, options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .postLibraryVirtualfoldersLibraryoptions(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    postLibraryVirtualfoldersName(body, options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .postLibraryVirtualfoldersName(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryAddMediaPath} body AddMediaPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    postLibraryVirtualfoldersPaths(body, options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .postLibraryVirtualfoldersPaths(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryUpdateMediaPath} body UpdateMediaPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    postLibraryVirtualfoldersPathsUpdate(body, options) {
        return (0, exports.LibraryStructureServiceApiFp)(this.configuration)
            .postLibraryVirtualfoldersPathsUpdate(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.LibraryStructureServiceApi = LibraryStructureServiceApi;
//# sourceMappingURL=library-structure-service-api.js.map