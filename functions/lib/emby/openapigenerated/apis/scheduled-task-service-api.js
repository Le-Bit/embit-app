"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledTaskServiceApi = exports.ScheduledTaskServiceApiFactory = exports.ScheduledTaskServiceApiFp = exports.ScheduledTaskServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ScheduledTaskServiceApi - axios parameter creator
 * @export
 */
const ScheduledTaskServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Stops a scheduled task
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledtasksRunningById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteScheduledtasksRunningById.");
            }
            const localVarPath = `/ScheduledTasks/Running/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets scheduled tasks
         * @param {boolean} [isHidden] Optional filter tasks that are hidden, or not.
         * @param {boolean} [isEnabled] Optional filter tasks that are enabled, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledtasks: async (isHidden, isEnabled, options = {}) => {
            const localVarPath = `/ScheduledTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (isHidden !== undefined) {
                localVarQueryParameter["IsHidden"] = isHidden;
            }
            if (isEnabled !== undefined) {
                localVarQueryParameter["IsEnabled"] = isEnabled;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a scheduled task, by Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledtasksById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getScheduledtasksById.");
            }
            const localVarPath = `/ScheduledTasks/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates the triggers for a scheduled task
         * @param {Array&lt;TasksTaskTriggerInfo&gt;} body List&#x60;1:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScheduledtasksByIdTriggers: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postScheduledtasksByIdTriggers.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postScheduledtasksByIdTriggers.");
            }
            const localVarPath = `/ScheduledTasks/{Id}/Triggers`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Starts a scheduled task
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScheduledtasksRunningById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postScheduledtasksRunningById.");
            }
            const localVarPath = `/ScheduledTasks/Running/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ScheduledTaskServiceApiAxiosParamCreator = ScheduledTaskServiceApiAxiosParamCreator;
/**
 * ScheduledTaskServiceApi - functional programming interface
 * @export
 */
const ScheduledTaskServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Stops a scheduled task
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduledtasksRunningById(id, options) {
            const localVarAxiosArgs = await (0, exports.ScheduledTaskServiceApiAxiosParamCreator)(configuration).deleteScheduledtasksRunningById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets scheduled tasks
         * @param {boolean} [isHidden] Optional filter tasks that are hidden, or not.
         * @param {boolean} [isEnabled] Optional filter tasks that are enabled, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduledtasks(isHidden, isEnabled, options) {
            const localVarAxiosArgs = await (0, exports.ScheduledTaskServiceApiAxiosParamCreator)(configuration).getScheduledtasks(isHidden, isEnabled, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a scheduled task, by Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduledtasksById(id, options) {
            const localVarAxiosArgs = await (0, exports.ScheduledTaskServiceApiAxiosParamCreator)(configuration).getScheduledtasksById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates the triggers for a scheduled task
         * @param {Array&lt;TasksTaskTriggerInfo&gt;} body List&#x60;1:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScheduledtasksByIdTriggers(body, id, options) {
            const localVarAxiosArgs = await (0, exports.ScheduledTaskServiceApiAxiosParamCreator)(configuration).postScheduledtasksByIdTriggers(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Starts a scheduled task
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScheduledtasksRunningById(id, options) {
            const localVarAxiosArgs = await (0, exports.ScheduledTaskServiceApiAxiosParamCreator)(configuration).postScheduledtasksRunningById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ScheduledTaskServiceApiFp = ScheduledTaskServiceApiFp;
/**
 * ScheduledTaskServiceApi - factory interface
 * @export
 */
const ScheduledTaskServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Stops a scheduled task
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledtasksRunningById(id, options) {
            return (0, exports.ScheduledTaskServiceApiFp)(configuration)
                .deleteScheduledtasksRunningById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets scheduled tasks
         * @param {boolean} [isHidden] Optional filter tasks that are hidden, or not.
         * @param {boolean} [isEnabled] Optional filter tasks that are enabled, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledtasks(isHidden, isEnabled, options) {
            return (0, exports.ScheduledTaskServiceApiFp)(configuration)
                .getScheduledtasks(isHidden, isEnabled, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a scheduled task, by Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledtasksById(id, options) {
            return (0, exports.ScheduledTaskServiceApiFp)(configuration)
                .getScheduledtasksById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Updates the triggers for a scheduled task
         * @param {Array&lt;TasksTaskTriggerInfo&gt;} body List&#x60;1:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScheduledtasksByIdTriggers(body, id, options) {
            return (0, exports.ScheduledTaskServiceApiFp)(configuration)
                .postScheduledtasksByIdTriggers(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Starts a scheduled task
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScheduledtasksRunningById(id, options) {
            return (0, exports.ScheduledTaskServiceApiFp)(configuration)
                .postScheduledtasksRunningById(id, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ScheduledTaskServiceApiFactory = ScheduledTaskServiceApiFactory;
/**
 * ScheduledTaskServiceApi - object-oriented interface
 * @export
 * @class ScheduledTaskServiceApi
 * @extends {BaseAPI}
 */
class ScheduledTaskServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Stops a scheduled task
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskServiceApi
     */
    deleteScheduledtasksRunningById(id, options) {
        return (0, exports.ScheduledTaskServiceApiFp)(this.configuration)
            .deleteScheduledtasksRunningById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets scheduled tasks
     * @param {boolean} [isHidden] Optional filter tasks that are hidden, or not.
     * @param {boolean} [isEnabled] Optional filter tasks that are enabled, or not.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskServiceApi
     */
    getScheduledtasks(isHidden, isEnabled, options) {
        return (0, exports.ScheduledTaskServiceApiFp)(this.configuration)
            .getScheduledtasks(isHidden, isEnabled, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a scheduled task, by Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskServiceApi
     */
    getScheduledtasksById(id, options) {
        return (0, exports.ScheduledTaskServiceApiFp)(this.configuration)
            .getScheduledtasksById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Updates the triggers for a scheduled task
     * @param {Array&lt;TasksTaskTriggerInfo&gt;} body List&#x60;1:
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskServiceApi
     */
    postScheduledtasksByIdTriggers(body, id, options) {
        return (0, exports.ScheduledTaskServiceApiFp)(this.configuration)
            .postScheduledtasksByIdTriggers(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Starts a scheduled task
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskServiceApi
     */
    postScheduledtasksRunningById(id, options) {
        return (0, exports.ScheduledTaskServiceApiFp)(this.configuration)
            .postScheduledtasksRunningById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ScheduledTaskServiceApi = ScheduledTaskServiceApi;
//# sourceMappingURL=scheduled-task-service-api.js.map