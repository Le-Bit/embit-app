"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelServiceApi = exports.ChannelServiceApiFactory = exports.ChannelServiceApiFp = exports.ChannelServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ChannelServiceApi - axios parameter creator
 * @export
 */
const ChannelServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets available channels
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels: async (userId, startIndex, limit, options = {}) => {
            const localVarPath = `/Channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChannelServiceApiAxiosParamCreator = ChannelServiceApiAxiosParamCreator;
/**
 * ChannelServiceApi - functional programming interface
 * @export
 */
const ChannelServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets available channels
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannels(userId, startIndex, limit, options) {
            const localVarAxiosArgs = await (0, exports.ChannelServiceApiAxiosParamCreator)(configuration).getChannels(userId, startIndex, limit, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ChannelServiceApiFp = ChannelServiceApiFp;
/**
 * ChannelServiceApi - factory interface
 * @export
 */
const ChannelServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets available channels
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(userId, startIndex, limit, options) {
            return (0, exports.ChannelServiceApiFp)(configuration)
                .getChannels(userId, startIndex, limit, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ChannelServiceApiFactory = ChannelServiceApiFactory;
/**
 * ChannelServiceApi - object-oriented interface
 * @export
 * @class ChannelServiceApi
 * @extends {BaseAPI}
 */
class ChannelServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets available channels
     * @param {string} [userId] User Id
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelServiceApi
     */
    getChannels(userId, startIndex, limit, options) {
        return (0, exports.ChannelServiceApiFp)(this.configuration)
            .getChannels(userId, startIndex, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelServiceApi = ChannelServiceApi;
//# sourceMappingURL=channel-service-api.js.map