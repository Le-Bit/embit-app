"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemLookupServiceApi = exports.ItemLookupServiceApiFactory = exports.ItemLookupServiceApiFp = exports.ItemLookupServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ItemLookupServiceApi - axios parameter creator
 * @export
 */
const ItemLookupServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets external id infos for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdExternalidinfos: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdExternalidinfos.");
            }
            const localVarPath = `/Items/{Id}/ExternalIdInfos`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {string} providerName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsRemotesearchImage: async (imageUrl, providerName, options = {}) => {
            // verify required parameter 'imageUrl' is not null or undefined
            if (imageUrl === null || imageUrl === undefined) {
                throw new base_1.RequiredError("imageUrl", "Required parameter imageUrl was null or undefined when calling getItemsRemotesearchImage.");
            }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new base_1.RequiredError("providerName", "Required parameter providerName was null or undefined when calling getItemsRemotesearchImage.");
            }
            const localVarPath = `/Items/RemoteSearch/Image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (imageUrl !== undefined) {
                localVarQueryParameter["ImageUrl"] = imageUrl;
            }
            if (providerName !== undefined) {
                localVarQueryParameter["ProviderName"] = providerName;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Applies search criteria to an item and refreshes metadata
         * @param {RemoteSearchResult} body RemoteSearchResult:
         * @param {string} id The item id
         * @param {boolean} [replaceAllImages] Whether or not to replace all images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchApplyById: async (body, id, replaceAllImages, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchApplyById.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postItemsRemotesearchApplyById.");
            }
            const localVarPath = `/Items/RemoteSearch/Apply/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (replaceAllImages !== undefined) {
                localVarQueryParameter["ReplaceAllImages"] = replaceAllImages;
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBook: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchBook.");
            }
            const localVarPath = `/Items/RemoteSearch/Book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersItemLookupInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBoxset: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchBoxset.");
            }
            const localVarPath = `/Items/RemoteSearch/BoxSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchGame: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchGame.");
            }
            const localVarPath = `/Items/RemoteSearch/Game`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMovie: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchMovie.");
            }
            const localVarPath = `/Items/RemoteSearch/Movie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicalbum: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchMusicalbum.");
            }
            const localVarPath = `/Items/RemoteSearch/MusicAlbum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicartist: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchMusicartist.");
            }
            const localVarPath = `/Items/RemoteSearch/MusicArtist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicvideo: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchMusicvideo.");
            }
            const localVarPath = `/Items/RemoteSearch/MusicVideo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchPerson: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchPerson.");
            }
            const localVarPath = `/Items/RemoteSearch/Person`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchSeries: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchSeries.");
            }
            const localVarPath = `/Items/RemoteSearch/Series`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchTrailer: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsRemotesearchTrailer.");
            }
            const localVarPath = `/Items/RemoteSearch/Trailer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ItemLookupServiceApiAxiosParamCreator = ItemLookupServiceApiAxiosParamCreator;
/**
 * ItemLookupServiceApi - functional programming interface
 * @export
 */
const ItemLookupServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets external id infos for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdExternalidinfos(id, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).getItemsByIdExternalidinfos(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {string} providerName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsRemotesearchImage(imageUrl, providerName, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).getItemsRemotesearchImage(imageUrl, providerName, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Applies search criteria to an item and refreshes metadata
         * @param {RemoteSearchResult} body RemoteSearchResult:
         * @param {string} id The item id
         * @param {boolean} [replaceAllImages] Whether or not to replace all images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchApplyById(body, id, replaceAllImages, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchApplyById(body, id, replaceAllImages, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchBook(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchBook(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersItemLookupInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchBoxset(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchBoxset(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchGame(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchGame(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMovie(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchMovie(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMusicalbum(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchMusicalbum(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMusicartist(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchMusicartist(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMusicvideo(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchMusicvideo(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchPerson(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchPerson(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchSeries(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchSeries(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchTrailer(body, options) {
            const localVarAxiosArgs = await (0, exports.ItemLookupServiceApiAxiosParamCreator)(configuration).postItemsRemotesearchTrailer(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ItemLookupServiceApiFp = ItemLookupServiceApiFp;
/**
 * ItemLookupServiceApi - factory interface
 * @export
 */
const ItemLookupServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets external id infos for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdExternalidinfos(id, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .getItemsByIdExternalidinfos(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {string} providerName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsRemotesearchImage(imageUrl, providerName, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .getItemsRemotesearchImage(imageUrl, providerName, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Applies search criteria to an item and refreshes metadata
         * @param {RemoteSearchResult} body RemoteSearchResult:
         * @param {string} id The item id
         * @param {boolean} [replaceAllImages] Whether or not to replace all images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchApplyById(body, id, replaceAllImages, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchApplyById(body, id, replaceAllImages, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBook(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchBook(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersItemLookupInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBoxset(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchBoxset(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchGame(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchGame(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMovie(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchMovie(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicalbum(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchMusicalbum(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicartist(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchMusicartist(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicvideo(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchMusicvideo(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchPerson(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchPerson(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchSeries(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchSeries(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchTrailer(body, options) {
            return (0, exports.ItemLookupServiceApiFp)(configuration)
                .postItemsRemotesearchTrailer(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ItemLookupServiceApiFactory = ItemLookupServiceApiFactory;
/**
 * ItemLookupServiceApi - object-oriented interface
 * @export
 * @class ItemLookupServiceApi
 * @extends {BaseAPI}
 */
class ItemLookupServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Gets external id infos for an item
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    getItemsByIdExternalidinfos(id, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .getItemsByIdExternalidinfos(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a remote image
     * @param {string} imageUrl The image url
     * @param {string} providerName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    getItemsRemotesearchImage(imageUrl, providerName, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .getItemsRemotesearchImage(imageUrl, providerName, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Applies search criteria to an item and refreshes metadata
     * @param {RemoteSearchResult} body RemoteSearchResult:
     * @param {string} id The item id
     * @param {boolean} [replaceAllImages] Whether or not to replace all images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchApplyById(body, id, replaceAllImages, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchApplyById(body, id, replaceAllImages, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchBook(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchBook(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersItemLookupInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchBoxset(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchBoxset(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchGame(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchGame(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchMovie(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchMovie(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchMusicalbum(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchMusicalbum(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchMusicartist(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchMusicartist(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchMusicvideo(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchMusicvideo(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchPerson(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchPerson(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchSeries(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchSeries(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    postItemsRemotesearchTrailer(body, options) {
        return (0, exports.ItemLookupServiceApiFp)(this.configuration)
            .postItemsRemotesearchTrailer(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ItemLookupServiceApi = ItemLookupServiceApi;
//# sourceMappingURL=item-lookup-service-api.js.map