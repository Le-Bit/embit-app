"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserActivityAPIApi = exports.UserActivityAPIApiFactory = exports.UserActivityAPIApiFp = exports.UserActivityAPIApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * UserActivityAPIApi - axios parameter creator
 * @export
 */
const UserActivityAPIApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets a breakdown of a usage metric
         * @param {string} breakdownType Breakdown type
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsByBreakdowntypeBreakdownreport: async (breakdownType, userId, days, endDate, options = {}) => {
            // verify required parameter 'breakdownType' is not null or undefined
            if (breakdownType === null || breakdownType === undefined) {
                throw new base_1.RequiredError("breakdownType", "Required parameter breakdownType was null or undefined when calling getUserUsageStatsByBreakdowntypeBreakdownreport.");
            }
            const localVarPath = `/user_usage_stats/{BreakdownType}/BreakdownReport`.replace(`{${"BreakdownType"}}`, encodeURIComponent(String(breakdownType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["user_id"] = userId;
            }
            if (days !== undefined) {
                localVarQueryParameter["days"] = days;
            }
            if (endDate !== undefined) {
                localVarQueryParameter["end_date"] = endDate;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
         * @param {string} userID User Id
         * @param {string} date UTC DateTime, Format yyyy-MM-dd
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsByUseridByDateGetitems: async (userID, date, filter, options = {}) => {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError("userID", "Required parameter userID was null or undefined when calling getUserUsageStatsByUseridByDateGetitems.");
            }
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new base_1.RequiredError("date", "Required parameter date was null or undefined when calling getUserUsageStatsByUseridByDateGetitems.");
            }
            const localVarPath = `/user_usage_stats/{UserID}/{Date}/GetItems`
                .replace(`{${"UserID"}}`, encodeURIComponent(String(userID)))
                .replace(`{${"Date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (filter !== undefined) {
                localVarQueryParameter["Filter"] = filter;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of the available activity per hour
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsHourlyreport: async (userId, days, endDate, filter, options = {}) => {
            const localVarPath = `/user_usage_stats/HourlyReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["user_id"] = userId;
            }
            if (days !== undefined) {
                localVarQueryParameter["days"] = days;
            }
            if (endDate !== undefined) {
                localVarQueryParameter["end_date"] = endDate;
            }
            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Loads a backup from a file
         * @param {string} backupfile File name of file to load
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsLoadBackup: async (backupfile, options = {}) => {
            // verify required parameter 'backupfile' is not null or undefined
            if (backupfile === null || backupfile === undefined) {
                throw new base_1.RequiredError("backupfile", "Required parameter backupfile was null or undefined when calling getUserUsageStatsLoadBackup.");
            }
            const localVarPath = `/user_usage_stats/load_backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (backupfile !== undefined) {
                localVarQueryParameter["backupfile"] = backupfile;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets Movies counts
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsMoviesreport: async (userId, days, endDate, options = {}) => {
            const localVarPath = `/user_usage_stats/MoviesReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["user_id"] = userId;
            }
            if (days !== undefined) {
                localVarQueryParameter["days"] = days;
            }
            if (endDate !== undefined) {
                localVarQueryParameter["end_date"] = endDate;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets play activity for number of days
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {string} [dataType] Data type to return (count,time)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsPlayactivity: async (days, endDate, filter, dataType, options = {}) => {
            const localVarPath = `/user_usage_stats/PlayActivity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (days !== undefined) {
                localVarQueryParameter["days"] = days;
            }
            if (endDate !== undefined) {
                localVarQueryParameter["end_date"] = endDate;
            }
            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }
            if (dataType !== undefined) {
                localVarQueryParameter["data_type"] = dataType;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Saves a backup of the playback report data to the backup path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsSaveBackup: async (options = {}) => {
            const localVarPath = `/user_usage_stats/save_backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets Session Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsSessionList: async (options = {}) => {
            const localVarPath = `/user_usage_stats/session_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets TV Shows counts
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsTvshowsreport: async (userId, days, endDate, options = {}) => {
            const localVarPath = `/user_usage_stats/TvShowsReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["user_id"] = userId;
            }
            if (days !== undefined) {
                localVarQueryParameter["days"] = days;
            }
            if (endDate !== undefined) {
                localVarQueryParameter["end_date"] = endDate;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets types filter list items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsTypeFilterList: async (options = {}) => {
            const localVarPath = `/user_usage_stats/type_filter_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of the available activity per hour
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserActivity: async (days, endDate, options = {}) => {
            const localVarPath = `/user_usage_stats/user_activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (days !== undefined) {
                localVarQueryParameter["days"] = days;
            }
            if (endDate !== undefined) {
                localVarQueryParameter["end_date"] = endDate;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserList: async (options = {}) => {
            const localVarPath = `/user_usage_stats/user_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Get users
         * @param {string} action action to perform
         * @param {string} id user Id to perform the action on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserManageByActionById: async (action, id, options = {}) => {
            // verify required parameter 'action' is not null or undefined
            if (action === null || action === undefined) {
                throw new base_1.RequiredError("action", "Required parameter action was null or undefined when calling getUserUsageStatsUserManageByActionById.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getUserUsageStatsUserManageByActionById.");
            }
            const localVarPath = `/user_usage_stats/user_manage/{Action}/{Id}`
                .replace(`{${"Action"}}`, encodeURIComponent(String(action)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of all played items for a user in a date period
         * @param {string} userId User Id
         * @param {boolean} aggregateData Aggregate the data to total duration per user per item
         * @param {string} [filterName] Name Filter
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserplaylist: async (userId, aggregateData, filterName, days, endDate, filter, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUserUsageStatsUserplaylist.");
            }
            // verify required parameter 'aggregateData' is not null or undefined
            if (aggregateData === null || aggregateData === undefined) {
                throw new base_1.RequiredError("aggregateData", "Required parameter aggregateData was null or undefined when calling getUserUsageStatsUserplaylist.");
            }
            const localVarPath = `/user_usage_stats/UserPlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["user_id"] = userId;
            }
            if (aggregateData !== undefined) {
                localVarQueryParameter["aggregate_data"] = aggregateData;
            }
            if (filterName !== undefined) {
                localVarQueryParameter["filter_name"] = filterName;
            }
            if (days !== undefined) {
                localVarQueryParameter["days"] = days;
            }
            if (endDate !== undefined) {
                localVarQueryParameter["end_date"] = endDate;
            }
            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Post a backup for importing
         * @param {Object} body Binary stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUsageStatsImportBackup: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUserUsageStatsImportBackup.");
            }
            const localVarPath = `/user_usage_stats/import_backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/octet-stream";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Submit an SQL query
         * @param {PlaybackReportingApiCustomQuery} body CustomQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUsageStatsSubmitCustomQuery: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUserUsageStatsSubmitCustomQuery.");
            }
            const localVarPath = `/user_usage_stats/submit_custom_query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserActivityAPIApiAxiosParamCreator = UserActivityAPIApiAxiosParamCreator;
/**
 * UserActivityAPIApi - functional programming interface
 * @export
 */
const UserActivityAPIApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets a breakdown of a usage metric
         * @param {string} breakdownType Breakdown type
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsByBreakdowntypeBreakdownreport(breakdownType, userId, days, endDate, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsByBreakdowntypeBreakdownreport(breakdownType, userId, days, endDate, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
         * @param {string} userID User Id
         * @param {string} date UTC DateTime, Format yyyy-MM-dd
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of the available activity per hour
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsHourlyreport(userId, days, endDate, filter, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsHourlyreport(userId, days, endDate, filter, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Loads a backup from a file
         * @param {string} backupfile File name of file to load
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsLoadBackup(backupfile, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsLoadBackup(backupfile, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets Movies counts
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsMoviesreport(userId, days, endDate, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsMoviesreport(userId, days, endDate, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets play activity for number of days
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {string} [dataType] Data type to return (count,time)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Saves a backup of the playback report data to the backup path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsSaveBackup(options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsSaveBackup(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets Session Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsSessionList(options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsSessionList(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets TV Shows counts
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsTvshowsreport(userId, days, endDate, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsTvshowsreport(userId, days, endDate, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets types filter list items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsTypeFilterList(options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsTypeFilterList(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of the available activity per hour
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsUserActivity(days, endDate, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsUserActivity(days, endDate, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsUserList(options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsUserList(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Get users
         * @param {string} action action to perform
         * @param {string} id user Id to perform the action on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsUserManageByActionById(action, id, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsUserManageByActionById(action, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of all played items for a user in a date period
         * @param {string} userId User Id
         * @param {boolean} aggregateData Aggregate the data to total duration per user per item
         * @param {string} [filterName] Name Filter
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsageStatsUserplaylist(userId, aggregateData, filterName, days, endDate, filter, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).getUserUsageStatsUserplaylist(userId, aggregateData, filterName, days, endDate, filter, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Post a backup for importing
         * @param {Object} body Binary stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserUsageStatsImportBackup(body, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).postUserUsageStatsImportBackup(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Submit an SQL query
         * @param {PlaybackReportingApiCustomQuery} body CustomQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserUsageStatsSubmitCustomQuery(body, options) {
            const localVarAxiosArgs = await (0, exports.UserActivityAPIApiAxiosParamCreator)(configuration).postUserUsageStatsSubmitCustomQuery(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.UserActivityAPIApiFp = UserActivityAPIApiFp;
/**
 * UserActivityAPIApi - factory interface
 * @export
 */
const UserActivityAPIApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets a breakdown of a usage metric
         * @param {string} breakdownType Breakdown type
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsByBreakdowntypeBreakdownreport(breakdownType, userId, days, endDate, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsByBreakdowntypeBreakdownreport(breakdownType, userId, days, endDate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
         * @param {string} userID User Id
         * @param {string} date UTC DateTime, Format yyyy-MM-dd
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of the available activity per hour
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsHourlyreport(userId, days, endDate, filter, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsHourlyreport(userId, days, endDate, filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Loads a backup from a file
         * @param {string} backupfile File name of file to load
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsLoadBackup(backupfile, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsLoadBackup(backupfile, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets Movies counts
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsMoviesreport(userId, days, endDate, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsMoviesreport(userId, days, endDate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets play activity for number of days
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {string} [dataType] Data type to return (count,time)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Saves a backup of the playback report data to the backup path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsSaveBackup(options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsSaveBackup(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets Session Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsSessionList(options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsSessionList(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets TV Shows counts
         * @param {string} [userId] User Id
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsTvshowsreport(userId, days, endDate, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsTvshowsreport(userId, days, endDate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets types filter list items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsTypeFilterList(options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsTypeFilterList(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of the available activity per hour
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserActivity(days, endDate, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsUserActivity(days, endDate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserList(options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsUserList(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Get users
         * @param {string} action action to perform
         * @param {string} id user Id to perform the action on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserManageByActionById(action, id, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsUserManageByActionById(action, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a report of all played items for a user in a date period
         * @param {string} userId User Id
         * @param {boolean} aggregateData Aggregate the data to total duration per user per item
         * @param {string} [filterName] Name Filter
         * @param {number} [days] Number of Days
         * @param {string} [endDate] End date of the report in yyyy-MM-dd format
         * @param {string} [filter] Comma separated list of media types to filter (movies,series)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsageStatsUserplaylist(userId, aggregateData, filterName, days, endDate, filter, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .getUserUsageStatsUserplaylist(userId, aggregateData, filterName, days, endDate, filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Post a backup for importing
         * @param {Object} body Binary stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUsageStatsImportBackup(body, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .postUserUsageStatsImportBackup(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Submit an SQL query
         * @param {PlaybackReportingApiCustomQuery} body CustomQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUsageStatsSubmitCustomQuery(body, options) {
            return (0, exports.UserActivityAPIApiFp)(configuration)
                .postUserUsageStatsSubmitCustomQuery(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.UserActivityAPIApiFactory = UserActivityAPIApiFactory;
/**
 * UserActivityAPIApi - object-oriented interface
 * @export
 * @class UserActivityAPIApi
 * @extends {BaseAPI}
 */
class UserActivityAPIApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets a breakdown of a usage metric
     * @param {string} breakdownType Breakdown type
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsByBreakdowntypeBreakdownreport(breakdownType, userId, days, endDate, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsByBreakdowntypeBreakdownreport(breakdownType, userId, days, endDate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
     * @param {string} userID User Id
     * @param {string} date UTC DateTime, Format yyyy-MM-dd
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsHourlyreport(userId, days, endDate, filter, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsHourlyreport(userId, days, endDate, filter, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Loads a backup from a file
     * @param {string} backupfile File name of file to load
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsLoadBackup(backupfile, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsLoadBackup(backupfile, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets Movies counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsMoviesreport(userId, days, endDate, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsMoviesreport(userId, days, endDate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets play activity for number of days
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {string} [dataType] Data type to return (count,time)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Saves a backup of the playback report data to the backup path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsSaveBackup(options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsSaveBackup(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets Session Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsSessionList(options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsSessionList(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets TV Shows counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsTvshowsreport(userId, days, endDate, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsTvshowsreport(userId, days, endDate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets types filter list items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsTypeFilterList(options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsTypeFilterList(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsUserActivity(days, endDate, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsUserActivity(days, endDate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsUserList(options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsUserList(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {string} action action to perform
     * @param {string} id user Id to perform the action on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsUserManageByActionById(action, id, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsUserManageByActionById(action, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a report of all played items for a user in a date period
     * @param {string} userId User Id
     * @param {boolean} aggregateData Aggregate the data to total duration per user per item
     * @param {string} [filterName] Name Filter
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    getUserUsageStatsUserplaylist(userId, aggregateData, filterName, days, endDate, filter, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .getUserUsageStatsUserplaylist(userId, aggregateData, filterName, days, endDate, filter, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Post a backup for importing
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    postUserUsageStatsImportBackup(body, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .postUserUsageStatsImportBackup(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Submit an SQL query
     * @param {PlaybackReportingApiCustomQuery} body CustomQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserActivityAPIApi
     */
    postUserUsageStatsSubmitCustomQuery(body, options) {
        return (0, exports.UserActivityAPIApiFp)(this.configuration)
            .postUserUsageStatsSubmitCustomQuery(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.UserActivityAPIApi = UserActivityAPIApi;
//# sourceMappingURL=user-activity-apiapi.js.map