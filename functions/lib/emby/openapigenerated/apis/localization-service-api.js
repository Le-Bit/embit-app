"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalizationServiceApi = exports.LocalizationServiceApiFactory = exports.LocalizationServiceApiFp = exports.LocalizationServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * LocalizationServiceApi - axios parameter creator
 * @export
 */
const LocalizationServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets known countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationCountries: async (options = {}) => {
            const localVarPath = `/Localization/Countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets known cultures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationCultures: async (options = {}) => {
            const localVarPath = `/Localization/Cultures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets localization options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationOptions: async (options = {}) => {
            const localVarPath = `/Localization/Options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets known parental ratings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationParentalratings: async (options = {}) => {
            const localVarPath = `/Localization/ParentalRatings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LocalizationServiceApiAxiosParamCreator = LocalizationServiceApiAxiosParamCreator;
/**
 * LocalizationServiceApi - functional programming interface
 * @export
 */
const LocalizationServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets known countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizationCountries(options) {
            const localVarAxiosArgs = await (0, exports.LocalizationServiceApiAxiosParamCreator)(configuration).getLocalizationCountries(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets known cultures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizationCultures(options) {
            const localVarAxiosArgs = await (0, exports.LocalizationServiceApiAxiosParamCreator)(configuration).getLocalizationCultures(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets localization options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizationOptions(options) {
            const localVarAxiosArgs = await (0, exports.LocalizationServiceApiAxiosParamCreator)(configuration).getLocalizationOptions(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets known parental ratings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizationParentalratings(options) {
            const localVarAxiosArgs = await (0, exports.LocalizationServiceApiAxiosParamCreator)(configuration).getLocalizationParentalratings(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.LocalizationServiceApiFp = LocalizationServiceApiFp;
/**
 * LocalizationServiceApi - factory interface
 * @export
 */
const LocalizationServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets known countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationCountries(options) {
            return (0, exports.LocalizationServiceApiFp)(configuration)
                .getLocalizationCountries(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets known cultures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationCultures(options) {
            return (0, exports.LocalizationServiceApiFp)(configuration)
                .getLocalizationCultures(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets localization options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationOptions(options) {
            return (0, exports.LocalizationServiceApiFp)(configuration)
                .getLocalizationOptions(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets known parental ratings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizationParentalratings(options) {
            return (0, exports.LocalizationServiceApiFp)(configuration)
                .getLocalizationParentalratings(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.LocalizationServiceApiFactory = LocalizationServiceApiFactory;
/**
 * LocalizationServiceApi - object-oriented interface
 * @export
 * @class LocalizationServiceApi
 * @extends {BaseAPI}
 */
class LocalizationServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets known countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationServiceApi
     */
    getLocalizationCountries(options) {
        return (0, exports.LocalizationServiceApiFp)(this.configuration)
            .getLocalizationCountries(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets known cultures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationServiceApi
     */
    getLocalizationCultures(options) {
        return (0, exports.LocalizationServiceApiFp)(this.configuration)
            .getLocalizationCultures(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets localization options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationServiceApi
     */
    getLocalizationOptions(options) {
        return (0, exports.LocalizationServiceApiFp)(this.configuration)
            .getLocalizationOptions(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets known parental ratings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationServiceApi
     */
    getLocalizationParentalratings(options) {
        return (0, exports.LocalizationServiceApiFp)(this.configuration)
            .getLocalizationParentalratings(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.LocalizationServiceApi = LocalizationServiceApi;
//# sourceMappingURL=localization-service-api.js.map