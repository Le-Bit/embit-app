"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserLibraryServiceApi = exports.UserLibraryServiceApiFactory = exports.UserLibraryServiceApiFp = exports.UserLibraryServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * UserLibraryServiceApi - axios parameter creator
 * @export
 */
const UserLibraryServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Unmarks an item as a favorite
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByUseridFavoriteitemsById: async (userId, id, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling deleteUsersByUseridFavoriteitemsById.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteUsersByUseridFavoriteitemsById.");
            }
            const localVarPath = `/Users/{UserId}/FavoriteItems/{Id}`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Deletes a user's saved personal rating for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByUseridItemsByIdRating: async (userId, id, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling deleteUsersByUseridItemsByIdRating.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteUsersByUseridItemsByIdRating.");
            }
            const localVarPath = `/Users/{UserId}/Items/{Id}/Rating`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a live tv program
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivetvProgramsById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getLivetvProgramsById.");
            }
            const localVarPath = `/LiveTv/Programs/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an item from a user's library
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsById: async (userId, id, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUsersByUseridItemsById.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getUsersByUseridItemsById.");
            }
            const localVarPath = `/Users/{UserId}/Items/{Id}`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets intros to play before the main media item plays
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsByIdIntros: async (userId, id, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUsersByUseridItemsByIdIntros.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getUsersByUseridItemsByIdIntros.");
            }
            const localVarPath = `/Users/{UserId}/Items/{Id}/Intros`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets local trailers for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsByIdLocaltrailers: async (userId, id, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUsersByUseridItemsByIdLocaltrailers.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getUsersByUseridItemsByIdLocaltrailers.");
            }
            const localVarPath = `/Users/{UserId}/Items/{Id}/LocalTrailers`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets special features for an item
         * @param {string} userId User Id
         * @param {string} id Movie Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsByIdSpecialfeatures: async (userId, id, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUsersByUseridItemsByIdSpecialfeatures.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getUsersByUseridItemsByIdSpecialfeatures.");
            }
            const localVarPath = `/Users/{UserId}/Items/{Id}/SpecialFeatures`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets latest media
         * @param {string} userId User Id
         * @param {number} [limit] Limit
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {boolean} [isFolder] Filter by items that are folders, or not.
         * @param {boolean} [isPlayed] Filter by items that are played, or not.
         * @param {boolean} [groupItems] Whether or not to group items into a parent container.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsLatest: async (userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUsersByUseridItemsLatest.");
            }
            const localVarPath = `/Users/{UserId}/Items/Latest`.replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (parentId !== undefined) {
                localVarQueryParameter["ParentId"] = parentId;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (mediaTypes !== undefined) {
                localVarQueryParameter["MediaTypes"] = mediaTypes;
            }
            if (isFolder !== undefined) {
                localVarQueryParameter["IsFolder"] = isFolder;
            }
            if (isPlayed !== undefined) {
                localVarQueryParameter["IsPlayed"] = isPlayed;
            }
            if (groupItems !== undefined) {
                localVarQueryParameter["GroupItems"] = groupItems;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the root folder from a user's library
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsRoot: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUsersByUseridItemsRoot.");
            }
            const localVarPath = `/Users/{UserId}/Items/Root`.replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets additional parts for a video.
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdAdditionalparts: async (id, userId, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getVideosByIdAdditionalparts.");
            }
            const localVarPath = `/Videos/{Id}/AdditionalParts`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks an item as a favorite
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByUseridFavoriteitemsById: async (userId, id, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling postUsersByUseridFavoriteitemsById.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByUseridFavoriteitemsById.");
            }
            const localVarPath = `/Users/{UserId}/FavoriteItems/{Id}`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's hide from resume for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {boolean} hide Whether the item should be hidden from reusme or not. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByUseridItemsByIdHidefromresume: async (userId, id, hide, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling postUsersByUseridItemsByIdHidefromresume.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByUseridItemsByIdHidefromresume.");
            }
            // verify required parameter 'hide' is not null or undefined
            if (hide === null || hide === undefined) {
                throw new base_1.RequiredError("hide", "Required parameter hide was null or undefined when calling postUsersByUseridItemsByIdHidefromresume.");
            }
            const localVarPath = `/Users/{UserId}/Items/{Id}/HideFromResume`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (hide !== undefined) {
                localVarQueryParameter["Hide"] = hide;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's rating for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {boolean} likes Whether the user likes the item or not. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByUseridItemsByIdRating: async (userId, id, likes, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling postUsersByUseridItemsByIdRating.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByUseridItemsByIdRating.");
            }
            // verify required parameter 'likes' is not null or undefined
            if (likes === null || likes === undefined) {
                throw new base_1.RequiredError("likes", "Required parameter likes was null or undefined when calling postUsersByUseridItemsByIdRating.");
            }
            const localVarPath = `/Users/{UserId}/Items/{Id}/Rating`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (likes !== undefined) {
                localVarQueryParameter["Likes"] = likes;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserLibraryServiceApiAxiosParamCreator = UserLibraryServiceApiAxiosParamCreator;
/**
 * UserLibraryServiceApi - functional programming interface
 * @export
 */
const UserLibraryServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Unmarks an item as a favorite
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersByUseridFavoriteitemsById(userId, id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).deleteUsersByUseridFavoriteitemsById(userId, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Deletes a user's saved personal rating for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersByUseridItemsByIdRating(userId, id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).deleteUsersByUseridItemsByIdRating(userId, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a live tv program
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLivetvProgramsById(id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getLivetvProgramsById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an item from a user's library
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByUseridItemsById(userId, id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getUsersByUseridItemsById(userId, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets intros to play before the main media item plays
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByUseridItemsByIdIntros(userId, id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getUsersByUseridItemsByIdIntros(userId, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets local trailers for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByUseridItemsByIdLocaltrailers(userId, id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getUsersByUseridItemsByIdLocaltrailers(userId, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets special features for an item
         * @param {string} userId User Id
         * @param {string} id Movie Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByUseridItemsByIdSpecialfeatures(userId, id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getUsersByUseridItemsByIdSpecialfeatures(userId, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets latest media
         * @param {string} userId User Id
         * @param {number} [limit] Limit
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {boolean} [isFolder] Filter by items that are folders, or not.
         * @param {boolean} [isPlayed] Filter by items that are played, or not.
         * @param {boolean} [groupItems] Whether or not to group items into a parent container.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByUseridItemsLatest(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getUsersByUseridItemsLatest(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the root folder from a user's library
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByUseridItemsRoot(userId, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getUsersByUseridItemsRoot(userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets additional parts for a video.
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosByIdAdditionalparts(id, userId, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).getVideosByIdAdditionalparts(id, userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks an item as a favorite
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByUseridFavoriteitemsById(userId, id, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).postUsersByUseridFavoriteitemsById(userId, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's hide from resume for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {boolean} hide Whether the item should be hidden from reusme or not. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByUseridItemsByIdHidefromresume(userId, id, hide, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).postUsersByUseridItemsByIdHidefromresume(userId, id, hide, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's rating for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {boolean} likes Whether the user likes the item or not. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByUseridItemsByIdRating(userId, id, likes, options) {
            const localVarAxiosArgs = await (0, exports.UserLibraryServiceApiAxiosParamCreator)(configuration).postUsersByUseridItemsByIdRating(userId, id, likes, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.UserLibraryServiceApiFp = UserLibraryServiceApiFp;
/**
 * UserLibraryServiceApi - factory interface
 * @export
 */
const UserLibraryServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Unmarks an item as a favorite
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByUseridFavoriteitemsById(userId, id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .deleteUsersByUseridFavoriteitemsById(userId, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Deletes a user's saved personal rating for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByUseridItemsByIdRating(userId, id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .deleteUsersByUseridItemsByIdRating(userId, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a live tv program
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivetvProgramsById(id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getLivetvProgramsById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an item from a user's library
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsById(userId, id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getUsersByUseridItemsById(userId, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets intros to play before the main media item plays
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsByIdIntros(userId, id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getUsersByUseridItemsByIdIntros(userId, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets local trailers for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsByIdLocaltrailers(userId, id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getUsersByUseridItemsByIdLocaltrailers(userId, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets special features for an item
         * @param {string} userId User Id
         * @param {string} id Movie Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsByIdSpecialfeatures(userId, id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getUsersByUseridItemsByIdSpecialfeatures(userId, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets latest media
         * @param {string} userId User Id
         * @param {number} [limit] Limit
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {boolean} [isFolder] Filter by items that are folders, or not.
         * @param {boolean} [isPlayed] Filter by items that are played, or not.
         * @param {boolean} [groupItems] Whether or not to group items into a parent container.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsLatest(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getUsersByUseridItemsLatest(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets the root folder from a user's library
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridItemsRoot(userId, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getUsersByUseridItemsRoot(userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets additional parts for a video.
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdAdditionalparts(id, userId, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .getVideosByIdAdditionalparts(id, userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Marks an item as a favorite
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByUseridFavoriteitemsById(userId, id, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .postUsersByUseridFavoriteitemsById(userId, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's hide from resume for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {boolean} hide Whether the item should be hidden from reusme or not. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByUseridItemsByIdHidefromresume(userId, id, hide, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .postUsersByUseridItemsByIdHidefromresume(userId, id, hide, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's rating for an item
         * @param {string} userId User Id
         * @param {string} id Item Id
         * @param {boolean} likes Whether the user likes the item or not. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByUseridItemsByIdRating(userId, id, likes, options) {
            return (0, exports.UserLibraryServiceApiFp)(configuration)
                .postUsersByUseridItemsByIdRating(userId, id, likes, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.UserLibraryServiceApiFactory = UserLibraryServiceApiFactory;
/**
 * UserLibraryServiceApi - object-oriented interface
 * @export
 * @class UserLibraryServiceApi
 * @extends {BaseAPI}
 */
class UserLibraryServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Unmarks an item as a favorite
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    deleteUsersByUseridFavoriteitemsById(userId, id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .deleteUsersByUseridFavoriteitemsById(userId, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Deletes a user's saved personal rating for an item
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    deleteUsersByUseridItemsByIdRating(userId, id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .deleteUsersByUseridItemsByIdRating(userId, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a live tv program
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getLivetvProgramsById(id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getLivetvProgramsById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an item from a user's library
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getUsersByUseridItemsById(userId, id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getUsersByUseridItemsById(userId, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets intros to play before the main media item plays
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getUsersByUseridItemsByIdIntros(userId, id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getUsersByUseridItemsByIdIntros(userId, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets local trailers for an item
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getUsersByUseridItemsByIdLocaltrailers(userId, id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getUsersByUseridItemsByIdLocaltrailers(userId, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets special features for an item
     * @param {string} userId User Id
     * @param {string} id Movie Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getUsersByUseridItemsByIdSpecialfeatures(userId, id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getUsersByUseridItemsByIdSpecialfeatures(userId, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets latest media
     * @param {string} userId User Id
     * @param {number} [limit] Limit
     * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
     * @param {boolean} [isFolder] Filter by items that are folders, or not.
     * @param {boolean} [isPlayed] Filter by items that are played, or not.
     * @param {boolean} [groupItems] Whether or not to group items into a parent container.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getUsersByUseridItemsLatest(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getUsersByUseridItemsLatest(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets the root folder from a user's library
     * @param {string} userId User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getUsersByUseridItemsRoot(userId, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getUsersByUseridItemsRoot(userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets additional parts for a video.
     * @param {string} id Item Id
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    getVideosByIdAdditionalparts(id, userId, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .getVideosByIdAdditionalparts(id, userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Marks an item as a favorite
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    postUsersByUseridFavoriteitemsById(userId, id, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .postUsersByUseridFavoriteitemsById(userId, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a user's hide from resume for an item
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {boolean} hide Whether the item should be hidden from reusme or not. true/false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    postUsersByUseridItemsByIdHidefromresume(userId, id, hide, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .postUsersByUseridItemsByIdHidefromresume(userId, id, hide, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a user's rating for an item
     * @param {string} userId User Id
     * @param {string} id Item Id
     * @param {boolean} likes Whether the user likes the item or not. true/false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLibraryServiceApi
     */
    postUsersByUseridItemsByIdRating(userId, id, likes, options) {
        return (0, exports.UserLibraryServiceApiFp)(this.configuration)
            .postUsersByUseridItemsByIdRating(userId, id, likes, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.UserLibraryServiceApi = UserLibraryServiceApi;
//# sourceMappingURL=user-library-service-api.js.map