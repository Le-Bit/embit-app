"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageServiceApi = exports.PackageServiceApiFactory = exports.PackageServiceApiFp = exports.PackageServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * PackageServiceApi - axios parameter creator
 * @export
 */
const PackageServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Cancels a package installation
         * @param {string} id Installation Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePackagesInstallingById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deletePackagesInstallingById.");
            }
            const localVarPath = `/Packages/Installing/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets available packages
         * @param {string} [packageType] Optional package type filter (System/UserInstalled)
         * @param {string} [targetSystems] Optional. Filter by target system type. Allows multiple, comma delimited.
         * @param {boolean} [isPremium] Optional. Filter by premium status
         * @param {boolean} [isAdult] Optional. Filter by package that contain adult content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackages: async (packageType, targetSystems, isPremium, isAdult, options = {}) => {
            const localVarPath = `/Packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (packageType !== undefined) {
                localVarQueryParameter["PackageType"] = packageType;
            }
            if (targetSystems !== undefined) {
                localVarQueryParameter["TargetSystems"] = targetSystems;
            }
            if (isPremium !== undefined) {
                localVarQueryParameter["IsPremium"] = isPremium;
            }
            if (isAdult !== undefined) {
                localVarQueryParameter["IsAdult"] = isAdult;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a package, by name or assembly guid
         * @param {string} name The name of the package
         * @param {string} [assemblyGuid] The guid of the associated assembly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackagesByName: async (name, assemblyGuid, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling getPackagesByName.");
            }
            const localVarPath = `/Packages/{Name}`.replace(`{${"Name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (assemblyGuid !== undefined) {
                localVarQueryParameter["AssemblyGuid"] = assemblyGuid;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available package updates for currently installed packages
         * @param {string} packageType Package type filter (System/UserInstalled)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackagesUpdates: async (packageType, options = {}) => {
            // verify required parameter 'packageType' is not null or undefined
            if (packageType === null || packageType === undefined) {
                throw new base_1.RequiredError("packageType", "Required parameter packageType was null or undefined when calling getPackagesUpdates.");
            }
            const localVarPath = `/Packages/Updates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (packageType !== undefined) {
                localVarQueryParameter["PackageType"] = packageType;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Installs a package
         * @param {string} name Package name
         * @param {string} [assemblyGuid] Guid of the associated assembly
         * @param {string} [version] Optional version. Defaults to latest version.
         * @param {string} [updateClass] Optional update class (Dev, Beta, Release). Defaults to Release.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPackagesInstalledByName: async (name, assemblyGuid, version, updateClass, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling postPackagesInstalledByName.");
            }
            const localVarPath = `/Packages/Installed/{Name}`.replace(`{${"Name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (assemblyGuid !== undefined) {
                localVarQueryParameter["AssemblyGuid"] = assemblyGuid;
            }
            if (version !== undefined) {
                localVarQueryParameter["Version"] = version;
            }
            if (updateClass !== undefined) {
                localVarQueryParameter["UpdateClass"] = updateClass;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PackageServiceApiAxiosParamCreator = PackageServiceApiAxiosParamCreator;
/**
 * PackageServiceApi - functional programming interface
 * @export
 */
const PackageServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Cancels a package installation
         * @param {string} id Installation Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePackagesInstallingById(id, options) {
            const localVarAxiosArgs = await (0, exports.PackageServiceApiAxiosParamCreator)(configuration).deletePackagesInstallingById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets available packages
         * @param {string} [packageType] Optional package type filter (System/UserInstalled)
         * @param {string} [targetSystems] Optional. Filter by target system type. Allows multiple, comma delimited.
         * @param {boolean} [isPremium] Optional. Filter by premium status
         * @param {boolean} [isAdult] Optional. Filter by package that contain adult content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackages(packageType, targetSystems, isPremium, isAdult, options) {
            const localVarAxiosArgs = await (0, exports.PackageServiceApiAxiosParamCreator)(configuration).getPackages(packageType, targetSystems, isPremium, isAdult, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a package, by name or assembly guid
         * @param {string} name The name of the package
         * @param {string} [assemblyGuid] The guid of the associated assembly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackagesByName(name, assemblyGuid, options) {
            const localVarAxiosArgs = await (0, exports.PackageServiceApiAxiosParamCreator)(configuration).getPackagesByName(name, assemblyGuid, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available package updates for currently installed packages
         * @param {string} packageType Package type filter (System/UserInstalled)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackagesUpdates(packageType, options) {
            const localVarAxiosArgs = await (0, exports.PackageServiceApiAxiosParamCreator)(configuration).getPackagesUpdates(packageType, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Installs a package
         * @param {string} name Package name
         * @param {string} [assemblyGuid] Guid of the associated assembly
         * @param {string} [version] Optional version. Defaults to latest version.
         * @param {string} [updateClass] Optional update class (Dev, Beta, Release). Defaults to Release.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPackagesInstalledByName(name, assemblyGuid, version, updateClass, options) {
            const localVarAxiosArgs = await (0, exports.PackageServiceApiAxiosParamCreator)(configuration).postPackagesInstalledByName(name, assemblyGuid, version, updateClass, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.PackageServiceApiFp = PackageServiceApiFp;
/**
 * PackageServiceApi - factory interface
 * @export
 */
const PackageServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Cancels a package installation
         * @param {string} id Installation Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePackagesInstallingById(id, options) {
            return (0, exports.PackageServiceApiFp)(configuration)
                .deletePackagesInstallingById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets available packages
         * @param {string} [packageType] Optional package type filter (System/UserInstalled)
         * @param {string} [targetSystems] Optional. Filter by target system type. Allows multiple, comma delimited.
         * @param {boolean} [isPremium] Optional. Filter by premium status
         * @param {boolean} [isAdult] Optional. Filter by package that contain adult content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackages(packageType, targetSystems, isPremium, isAdult, options) {
            return (0, exports.PackageServiceApiFp)(configuration)
                .getPackages(packageType, targetSystems, isPremium, isAdult, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a package, by name or assembly guid
         * @param {string} name The name of the package
         * @param {string} [assemblyGuid] The guid of the associated assembly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackagesByName(name, assemblyGuid, options) {
            return (0, exports.PackageServiceApiFp)(configuration)
                .getPackagesByName(name, assemblyGuid, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available package updates for currently installed packages
         * @param {string} packageType Package type filter (System/UserInstalled)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackagesUpdates(packageType, options) {
            return (0, exports.PackageServiceApiFp)(configuration)
                .getPackagesUpdates(packageType, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Installs a package
         * @param {string} name Package name
         * @param {string} [assemblyGuid] Guid of the associated assembly
         * @param {string} [version] Optional version. Defaults to latest version.
         * @param {string} [updateClass] Optional update class (Dev, Beta, Release). Defaults to Release.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPackagesInstalledByName(name, assemblyGuid, version, updateClass, options) {
            return (0, exports.PackageServiceApiFp)(configuration)
                .postPackagesInstalledByName(name, assemblyGuid, version, updateClass, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.PackageServiceApiFactory = PackageServiceApiFactory;
/**
 * PackageServiceApi - object-oriented interface
 * @export
 * @class PackageServiceApi
 * @extends {BaseAPI}
 */
class PackageServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Cancels a package installation
     * @param {string} id Installation Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageServiceApi
     */
    deletePackagesInstallingById(id, options) {
        return (0, exports.PackageServiceApiFp)(this.configuration)
            .deletePackagesInstallingById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets available packages
     * @param {string} [packageType] Optional package type filter (System/UserInstalled)
     * @param {string} [targetSystems] Optional. Filter by target system type. Allows multiple, comma delimited.
     * @param {boolean} [isPremium] Optional. Filter by premium status
     * @param {boolean} [isAdult] Optional. Filter by package that contain adult content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageServiceApi
     */
    getPackages(packageType, targetSystems, isPremium, isAdult, options) {
        return (0, exports.PackageServiceApiFp)(this.configuration)
            .getPackages(packageType, targetSystems, isPremium, isAdult, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a package, by name or assembly guid
     * @param {string} name The name of the package
     * @param {string} [assemblyGuid] The guid of the associated assembly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageServiceApi
     */
    getPackagesByName(name, assemblyGuid, options) {
        return (0, exports.PackageServiceApiFp)(this.configuration)
            .getPackagesByName(name, assemblyGuid, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets available package updates for currently installed packages
     * @param {string} packageType Package type filter (System/UserInstalled)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageServiceApi
     */
    getPackagesUpdates(packageType, options) {
        return (0, exports.PackageServiceApiFp)(this.configuration)
            .getPackagesUpdates(packageType, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Installs a package
     * @param {string} name Package name
     * @param {string} [assemblyGuid] Guid of the associated assembly
     * @param {string} [version] Optional version. Defaults to latest version.
     * @param {string} [updateClass] Optional update class (Dev, Beta, Release). Defaults to Release.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageServiceApi
     */
    postPackagesInstalledByName(name, assemblyGuid, version, updateClass, options) {
        return (0, exports.PackageServiceApiFp)(this.configuration)
            .postPackagesInstalledByName(name, assemblyGuid, version, updateClass, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.PackageServiceApi = PackageServiceApi;
//# sourceMappingURL=package-service-api.js.map