"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserServiceApi = exports.UserServiceApiFactory = exports.UserServiceApiFp = exports.UserServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * UserServiceApi - axios parameter creator
 * @export
 */
const UserServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteUsersById.");
            }
            const localVarPath = `/Users/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Clears audio or subtitle track selections for a user
         * @param {string} id
         * @param {string} trackType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByIdTrackselectionsByTracktype: async (id, trackType, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteUsersByIdTrackselectionsByTracktype.");
            }
            // verify required parameter 'trackType' is not null or undefined
            if (trackType === null || trackType === undefined) {
                throw new base_1.RequiredError("trackType", "Required parameter trackType was null or undefined when calling deleteUsersByIdTrackselectionsByTracktype.");
            }
            const localVarPath = `/Users/{Id}/TrackSelections/{TrackType}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"TrackType"}}`, encodeURIComponent(String(trackType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a user by Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getUsersById.");
            }
            const localVarPath = `/Users/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of users
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersPrefixes: async (isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options = {}) => {
            const localVarPath = `/Users/Prefixes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (isHidden !== undefined) {
                localVarQueryParameter["IsHidden"] = isHidden;
            }
            if (isDisabled !== undefined) {
                localVarQueryParameter["IsDisabled"] = isDisabled;
            }
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (nameStartsWithOrGreater !== undefined) {
                localVarQueryParameter["NameStartsWithOrGreater"] =
                    nameStartsWithOrGreater;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets a list of publicly visible users for display on a login screen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersPublic: async (options = {}) => {
            const localVarPath = `/Users/Public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of users
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersQuery: async (isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options = {}) => {
            const localVarPath = `/Users/Query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (isHidden !== undefined) {
                localVarQueryParameter["IsHidden"] = isHidden;
            }
            if (isDisabled !== undefined) {
                localVarQueryParameter["IsDisabled"] = isDisabled;
            }
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (nameStartsWithOrGreater !== undefined) {
                localVarQueryParameter["NameStartsWithOrGreater"] =
                    nameStartsWithOrGreater;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure --- No authentication required
         * @summary Authenticates a user
         * @param {AuthenticateUserByName} body AuthenticateUserByName
         * @param {string} xEmbyAuthorization The authorization header can be either named &#x27;Authorization&#x27; or &#x27;X-Emby-Authorization&#x27;.    It must be of the following schema:     Emby UserId&#x3D;\&quot;(guid)\&quot;, Client&#x3D;\&quot;(string)\&quot;, Device&#x3D;\&quot;(string)\&quot;, DeviceId&#x3D;\&quot;(string)\&quot;, Version&#x3D;\&quot;string\&quot;, Token&#x3D;\&quot;(string)\&quot;     Please consult the documentation for further details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersAuthenticatebyname: async (body, xEmbyAuthorization, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersAuthenticatebyname.");
            }
            // verify required parameter 'xEmbyAuthorization' is not null or undefined
            if (xEmbyAuthorization === null || xEmbyAuthorization === undefined) {
                throw new base_1.RequiredError("xEmbyAuthorization", "Required parameter xEmbyAuthorization was null or undefined when calling postUsersAuthenticatebyname.");
            }
            const localVarPath = `/Users/AuthenticateByName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xEmbyAuthorization !== undefined && xEmbyAuthorization !== null) {
                localVarHeaderParameter["X-Emby-Authorization"] =
                    String(xEmbyAuthorization);
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user
         * @param {UserDto} body UserDto:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersById: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersById.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersById.");
            }
            const localVarPath = `/Users/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Authenticates a user
         * @param {AuthenticateUser} body AuthenticateUser
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdAuthenticate: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersByIdAuthenticate.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByIdAuthenticate.");
            }
            const localVarPath = `/Users/{Id}/Authenticate`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user configuration
         * @param {ConfigurationUserConfiguration} body UserConfiguration:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdConfiguration: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersByIdConfiguration.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByIdConfiguration.");
            }
            const localVarPath = `/Users/{Id}/Configuration`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's easy password
         * @param {UpdateUserEasyPassword} body UpdateUserEasyPassword
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdEasypassword: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersByIdEasypassword.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByIdEasypassword.");
            }
            const localVarPath = `/Users/{Id}/EasyPassword`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's password
         * @param {UpdateUserPassword} body UpdateUserPassword
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdPassword: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersByIdPassword.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByIdPassword.");
            }
            const localVarPath = `/Users/{Id}/Password`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates a user policy
         * @param {UsersUserPolicy} body UserPolicy:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdPolicy: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersByIdPolicy.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByIdPolicy.");
            }
            const localVarPath = `/Users/{Id}/Policy`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Initiates the forgot password process for a local user
         * @param {ForgotPassword} body ForgotPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersForgotpassword: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersForgotpassword.");
            }
            const localVarPath = `/Users/ForgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Redeems a forgot password pin
         * @param {ForgotPasswordPin} body ForgotPasswordPin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersForgotpasswordPin: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersForgotpasswordPin.");
            }
            const localVarPath = `/Users/ForgotPassword/Pin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a user
         * @param {CreateUserByName} body CreateUserByName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersNew: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postUsersNew.");
            }
            const localVarPath = `/Users/New`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserServiceApiAxiosParamCreator = UserServiceApiAxiosParamCreator;
/**
 * UserServiceApi - functional programming interface
 * @export
 */
const UserServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersById(id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).deleteUsersById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Clears audio or subtitle track selections for a user
         * @param {string} id
         * @param {string} trackType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersByIdTrackselectionsByTracktype(id, trackType, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).deleteUsersByIdTrackselectionsByTracktype(id, trackType, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a user by Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersById(id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).getUsersById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of users
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersPrefixes(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).getUsersPrefixes(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets a list of publicly visible users for display on a login screen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersPublic(options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).getUsersPublic(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of users
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersQuery(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).getUsersQuery(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure --- No authentication required
         * @summary Authenticates a user
         * @param {AuthenticateUserByName} body AuthenticateUserByName
         * @param {string} xEmbyAuthorization The authorization header can be either named &#x27;Authorization&#x27; or &#x27;X-Emby-Authorization&#x27;.    It must be of the following schema:     Emby UserId&#x3D;\&quot;(guid)\&quot;, Client&#x3D;\&quot;(string)\&quot;, Device&#x3D;\&quot;(string)\&quot;, DeviceId&#x3D;\&quot;(string)\&quot;, Version&#x3D;\&quot;string\&quot;, Token&#x3D;\&quot;(string)\&quot;     Please consult the documentation for further details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersAuthenticatebyname(body, xEmbyAuthorization, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersAuthenticatebyname(body, xEmbyAuthorization, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user
         * @param {UserDto} body UserDto:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersById(body, id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersById(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Authenticates a user
         * @param {AuthenticateUser} body AuthenticateUser
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByIdAuthenticate(body, id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersByIdAuthenticate(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user configuration
         * @param {ConfigurationUserConfiguration} body UserConfiguration:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByIdConfiguration(body, id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersByIdConfiguration(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's easy password
         * @param {UpdateUserEasyPassword} body UpdateUserEasyPassword
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByIdEasypassword(body, id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersByIdEasypassword(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's password
         * @param {UpdateUserPassword} body UpdateUserPassword
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByIdPassword(body, id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersByIdPassword(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates a user policy
         * @param {UsersUserPolicy} body UserPolicy:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByIdPolicy(body, id, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersByIdPolicy(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Initiates the forgot password process for a local user
         * @param {ForgotPassword} body ForgotPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersForgotpassword(body, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersForgotpassword(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Redeems a forgot password pin
         * @param {ForgotPasswordPin} body ForgotPasswordPin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersForgotpasswordPin(body, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersForgotpasswordPin(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a user
         * @param {CreateUserByName} body CreateUserByName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersNew(body, options) {
            const localVarAxiosArgs = await (0, exports.UserServiceApiAxiosParamCreator)(configuration).postUsersNew(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.UserServiceApiFp = UserServiceApiFp;
/**
 * UserServiceApi - factory interface
 * @export
 */
const UserServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a user
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById(id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .deleteUsersById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Clears audio or subtitle track selections for a user
         * @param {string} id
         * @param {string} trackType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByIdTrackselectionsByTracktype(id, trackType, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .deleteUsersByIdTrackselectionsByTracktype(id, trackType, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a user by Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersById(id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .getUsersById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of users
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersPrefixes(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .getUsersPrefixes(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets a list of publicly visible users for display on a login screen.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersPublic(options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .getUsersPublic(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of users
         * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
         * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersQuery(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .getUsersQuery(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure --- No authentication required
         * @summary Authenticates a user
         * @param {AuthenticateUserByName} body AuthenticateUserByName
         * @param {string} xEmbyAuthorization The authorization header can be either named &#x27;Authorization&#x27; or &#x27;X-Emby-Authorization&#x27;.    It must be of the following schema:     Emby UserId&#x3D;\&quot;(guid)\&quot;, Client&#x3D;\&quot;(string)\&quot;, Device&#x3D;\&quot;(string)\&quot;, DeviceId&#x3D;\&quot;(string)\&quot;, Version&#x3D;\&quot;string\&quot;, Token&#x3D;\&quot;(string)\&quot;     Please consult the documentation for further details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersAuthenticatebyname(body, xEmbyAuthorization, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersAuthenticatebyname(body, xEmbyAuthorization, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a user
         * @param {UserDto} body UserDto:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersById(body, id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersById(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Authenticates a user
         * @param {AuthenticateUser} body AuthenticateUser
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdAuthenticate(body, id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersByIdAuthenticate(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a user configuration
         * @param {ConfigurationUserConfiguration} body UserConfiguration:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdConfiguration(body, id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersByIdConfiguration(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's easy password
         * @param {UpdateUserEasyPassword} body UpdateUserEasyPassword
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdEasypassword(body, id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersByIdEasypassword(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a user's password
         * @param {UpdateUserPassword} body UpdateUserPassword
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdPassword(body, id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersByIdPassword(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Updates a user policy
         * @param {UsersUserPolicy} body UserPolicy:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdPolicy(body, id, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersByIdPolicy(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Initiates the forgot password process for a local user
         * @param {ForgotPassword} body ForgotPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersForgotpassword(body, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersForgotpassword(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Redeems a forgot password pin
         * @param {ForgotPasswordPin} body ForgotPasswordPin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersForgotpasswordPin(body, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersForgotpasswordPin(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a user
         * @param {CreateUserByName} body CreateUserByName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersNew(body, options) {
            return (0, exports.UserServiceApiFp)(configuration)
                .postUsersNew(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.UserServiceApiFactory = UserServiceApiFactory;
/**
 * UserServiceApi - object-oriented interface
 * @export
 * @class UserServiceApi
 * @extends {BaseAPI}
 */
class UserServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Deletes a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    deleteUsersById(id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .deleteUsersById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Clears audio or subtitle track selections for a user
     * @param {string} id
     * @param {string} trackType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    deleteUsersByIdTrackselectionsByTracktype(id, trackType, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .deleteUsersByIdTrackselectionsByTracktype(id, trackType, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a user by Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    getUsersById(id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .getUsersById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of users
     * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
     * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    getUsersPrefixes(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .getUsersPrefixes(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets a list of publicly visible users for display on a login screen.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    getUsersPublic(options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .getUsersPublic(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of users
     * @param {boolean} [isHidden] Optional filter by IsHidden&#x3D;true or false
     * @param {boolean} [isDisabled] Optional filter by IsDisabled&#x3D;true or false
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    getUsersQuery(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .getUsersQuery(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure --- No authentication required
     * @summary Authenticates a user
     * @param {AuthenticateUserByName} body AuthenticateUserByName
     * @param {string} xEmbyAuthorization The authorization header can be either named &#x27;Authorization&#x27; or &#x27;X-Emby-Authorization&#x27;.    It must be of the following schema:     Emby UserId&#x3D;\&quot;(guid)\&quot;, Client&#x3D;\&quot;(string)\&quot;, Device&#x3D;\&quot;(string)\&quot;, DeviceId&#x3D;\&quot;(string)\&quot;, Version&#x3D;\&quot;string\&quot;, Token&#x3D;\&quot;(string)\&quot;     Please consult the documentation for further details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersAuthenticatebyname(body, xEmbyAuthorization, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersAuthenticatebyname(body, xEmbyAuthorization, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a user
     * @param {UserDto} body UserDto:
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersById(body, id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersById(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Authenticates a user
     * @param {AuthenticateUser} body AuthenticateUser
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersByIdAuthenticate(body, id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersByIdAuthenticate(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a user configuration
     * @param {ConfigurationUserConfiguration} body UserConfiguration:
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersByIdConfiguration(body, id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersByIdConfiguration(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a user's easy password
     * @param {UpdateUserEasyPassword} body UpdateUserEasyPassword
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersByIdEasypassword(body, id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersByIdEasypassword(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a user's password
     * @param {UpdateUserPassword} body UpdateUserPassword
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersByIdPassword(body, id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersByIdPassword(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Updates a user policy
     * @param {UsersUserPolicy} body UserPolicy:
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersByIdPolicy(body, id, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersByIdPolicy(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Initiates the forgot password process for a local user
     * @param {ForgotPassword} body ForgotPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersForgotpassword(body, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersForgotpassword(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Redeems a forgot password pin
     * @param {ForgotPasswordPin} body ForgotPasswordPin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersForgotpasswordPin(body, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersForgotpasswordPin(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Creates a user
     * @param {CreateUserByName} body CreateUserByName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    postUsersNew(body, options) {
        return (0, exports.UserServiceApiFp)(this.configuration)
            .postUsersNew(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.UserServiceApi = UserServiceApi;
//# sourceMappingURL=user-service-api.js.map