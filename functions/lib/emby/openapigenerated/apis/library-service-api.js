"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibraryServiceApi = exports.LibraryServiceApiFactory = exports.LibraryServiceApiFp = exports.LibraryServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * LibraryServiceApi - axios parameter creator
 * @export
 */
const LibraryServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an item from the library and file system
         * @param {string} ids Ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems: async (ids, options = {}) => {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new base_1.RequiredError("ids", "Required parameter ids was null or undefined when calling deleteItems.");
            }
            const localVarPath = `/Items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (ids !== undefined) {
                localVarQueryParameter["Ids"] = ids;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Deletes an item from the library and file system
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemsById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteItemsById.");
            }
            const localVarPath = `/Items/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds albums similar to a given album.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumsByIdSimilar: async (id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getAlbumsByIdSimilar.");
            }
            const localVarPath = `/Albums/{Id}/Similar`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds albums similar to a given album.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistsByIdSimilar: async (id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getArtistsByIdSimilar.");
            }
            const localVarPath = `/Artists/{Id}/Similar`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds games similar to a given game.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGamesByIdSimilar: async (id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getGamesByIdSimilar.");
            }
            const localVarPath = `/Games/{Id}/Similar`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all parents of an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdAncestors: async (id, userId, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdAncestors.");
            }
            const localVarPath = `/Items/{Id}/Ancestors`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets critic reviews for an item
         * @param {string} id Item Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdCriticreviews: async (id, startIndex, limit, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdCriticreviews.");
            }
            const localVarPath = `/Items/{Id}/CriticReviews`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets delete info for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdDeleteinfo: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdDeleteinfo.");
            }
            const localVarPath = `/Items/{Id}/DeleteInfo`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Downloads item media
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdDownload: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdDownload.");
            }
            const localVarPath = `/Items/{Id}/Download`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the original file of an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdFile: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdFile.");
            }
            const localVarPath = `/Items/{Id}/File`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets similar items
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdSimilar: async (id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdSimilar.");
            }
            const localVarPath = `/Items/{Id}/Similar`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets theme videos and songs for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdThememedia: async (id, userId, inheritFromParent, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdThememedia.");
            }
            const localVarPath = `/Items/{Id}/ThemeMedia`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (inheritFromParent !== undefined) {
                localVarQueryParameter["InheritFromParent"] = inheritFromParent;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets theme songs for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdThemesongs: async (id, userId, inheritFromParent, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdThemesongs.");
            }
            const localVarPath = `/Items/{Id}/ThemeSongs`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (inheritFromParent !== undefined) {
                localVarQueryParameter["InheritFromParent"] = inheritFromParent;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets theme videos for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdThemevideos: async (id, userId, inheritFromParent, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdThemevideos.");
            }
            const localVarPath = `/Items/{Id}/ThemeVideos`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (inheritFromParent !== undefined) {
                localVarQueryParameter["InheritFromParent"] = inheritFromParent;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {string} [userId] Optional. Get counts from a specific user&#x27;s library.
         * @param {boolean} [isFavorite] Optional. Get counts of favorite items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsCounts: async (userId, isFavorite, options = {}) => {
            const localVarPath = `/Items/Counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (isFavorite !== undefined) {
                localVarQueryParameter["IsFavorite"] = isFavorite;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibrariesAvailableoptions: async (options = {}) => {
            const localVarPath = `/Libraries/AvailableOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all user media folders.
         * @param {boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryMediafolders: async (isHidden, options = {}) => {
            const localVarPath = `/Library/MediaFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (isHidden !== undefined) {
                localVarQueryParameter["IsHidden"] = isHidden;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of physical paths from virtual folders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryPhysicalpaths: async (options = {}) => {
            const localVarPath = `/Library/PhysicalPaths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all user media folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibrarySelectablemediafolders: async (options = {}) => {
            const localVarPath = `/Library/SelectableMediaFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given movie.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoviesByIdSimilar: async (id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getMoviesByIdSimilar.");
            }
            const localVarPath = `/Movies/{Id}/Similar`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds tv shows similar to a given one.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowsByIdSimilar: async (id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getShowsByIdSimilar.");
            }
            const localVarPath = `/Shows/{Id}/Similar`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailersByIdSimilar: async (id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getTrailersByIdSimilar.");
            }
            const localVarPath = `/Trailers/{Id}/Similar`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (includeItemTypes !== undefined) {
                localVarQueryParameter["IncludeItemTypes"] = includeItemTypes;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports that new movies have been added by an external source
         * @param {LibraryPostUpdatedMedia} body PostUpdatedMedia
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryMediaUpdated: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postLibraryMediaUpdated.");
            }
            const localVarPath = `/Library/Media/Updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryMoviesAdded: async (options = {}) => {
            const localVarPath = `/Library/Movies/Added`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryMoviesUpdated: async (options = {}) => {
            const localVarPath = `/Library/Movies/Updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Starts a library scan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryRefresh: async (options = {}) => {
            const localVarPath = `/Library/Refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibrarySeriesAdded: async (options = {}) => {
            const localVarPath = `/Library/Series/Added`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibrarySeriesUpdated: async (options = {}) => {
            const localVarPath = `/Library/Series/Updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LibraryServiceApiAxiosParamCreator = LibraryServiceApiAxiosParamCreator;
/**
 * LibraryServiceApi - functional programming interface
 * @export
 */
const LibraryServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an item from the library and file system
         * @param {string} ids Ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItems(ids, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).deleteItems(ids, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Deletes an item from the library and file system
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemsById(id, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).deleteItemsById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds albums similar to a given album.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbumsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getAlbumsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds albums similar to a given album.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtistsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getArtistsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds games similar to a given game.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGamesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getGamesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all parents of an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdAncestors(id, userId, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdAncestors(id, userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets critic reviews for an item
         * @param {string} id Item Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdCriticreviews(id, startIndex, limit, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdCriticreviews(id, startIndex, limit, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets delete info for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdDeleteinfo(id, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdDeleteinfo(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Downloads item media
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdDownload(id, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdDownload(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the original file of an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdFile(id, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdFile(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets similar items
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets theme videos and songs for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdThememedia(id, userId, inheritFromParent, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdThememedia(id, userId, inheritFromParent, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets theme songs for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdThemesongs(id, userId, inheritFromParent, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdThemesongs(id, userId, inheritFromParent, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets theme videos for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdThemevideos(id, userId, inheritFromParent, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsByIdThemevideos(id, userId, inheritFromParent, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {string} [userId] Optional. Get counts from a specific user&#x27;s library.
         * @param {boolean} [isFavorite] Optional. Get counts of favorite items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsCounts(userId, isFavorite, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getItemsCounts(userId, isFavorite, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibrariesAvailableoptions(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getLibrariesAvailableoptions(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all user media folders.
         * @param {boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibraryMediafolders(isHidden, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getLibraryMediafolders(isHidden, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of physical paths from virtual folders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibraryPhysicalpaths(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getLibraryPhysicalpaths(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets all user media folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibrarySelectablemediafolders(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getLibrarySelectablemediafolders(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given movie.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMoviesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getMoviesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds tv shows similar to a given one.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getShowsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrailersByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).getTrailersByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports that new movies have been added by an external source
         * @param {LibraryPostUpdatedMedia} body PostUpdatedMedia
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryMediaUpdated(body, options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).postLibraryMediaUpdated(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryMoviesAdded(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).postLibraryMoviesAdded(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryMoviesUpdated(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).postLibraryMoviesUpdated(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Starts a library scan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryRefresh(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).postLibraryRefresh(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibrarySeriesAdded(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).postLibrarySeriesAdded(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibrarySeriesUpdated(options) {
            const localVarAxiosArgs = await (0, exports.LibraryServiceApiAxiosParamCreator)(configuration).postLibrarySeriesUpdated(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.LibraryServiceApiFp = LibraryServiceApiFp;
/**
 * LibraryServiceApi - factory interface
 * @export
 */
const LibraryServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an item from the library and file system
         * @param {string} ids Ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems(ids, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .deleteItems(ids, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Deletes an item from the library and file system
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemsById(id, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .deleteItemsById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Finds albums similar to a given album.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getAlbumsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Finds albums similar to a given album.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getArtistsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Finds games similar to a given game.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGamesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getGamesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets all parents of an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdAncestors(id, userId, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdAncestors(id, userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets critic reviews for an item
         * @param {string} id Item Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdCriticreviews(id, startIndex, limit, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdCriticreviews(id, startIndex, limit, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets delete info for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdDeleteinfo(id, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdDeleteinfo(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Downloads item media
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdDownload(id, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdDownload(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets the original file of an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdFile(id, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdFile(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets similar items
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets theme videos and songs for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdThememedia(id, userId, inheritFromParent, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdThememedia(id, userId, inheritFromParent, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets theme songs for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdThemesongs(id, userId, inheritFromParent, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdThemesongs(id, userId, inheritFromParent, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets theme videos for an item
         * @param {string} id Item Id
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdThemevideos(id, userId, inheritFromParent, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsByIdThemevideos(id, userId, inheritFromParent, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {string} [userId] Optional. Get counts from a specific user&#x27;s library.
         * @param {boolean} [isFavorite] Optional. Get counts of favorite items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsCounts(userId, isFavorite, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getItemsCounts(userId, isFavorite, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibrariesAvailableoptions(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getLibrariesAvailableoptions(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets all user media folders.
         * @param {boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryMediafolders(isHidden, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getLibraryMediafolders(isHidden, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of physical paths from virtual folders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryPhysicalpaths(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getLibraryPhysicalpaths(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets all user media folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibrarySelectablemediafolders(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getLibrarySelectablemediafolders(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given movie.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoviesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getMoviesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Finds tv shows similar to a given one.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getShowsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} id Item Id
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailersByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .getTrailersByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Reports that new movies have been added by an external source
         * @param {LibraryPostUpdatedMedia} body PostUpdatedMedia
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryMediaUpdated(body, options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .postLibraryMediaUpdated(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryMoviesAdded(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .postLibraryMoviesAdded(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryMoviesUpdated(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .postLibraryMoviesUpdated(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Starts a library scan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryRefresh(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .postLibraryRefresh(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibrarySeriesAdded(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .postLibrarySeriesAdded(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Deprecated. Use /Library/Media/Updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibrarySeriesUpdated(options) {
            return (0, exports.LibraryServiceApiFp)(configuration)
                .postLibrarySeriesUpdated(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.LibraryServiceApiFactory = LibraryServiceApiFactory;
/**
 * LibraryServiceApi - object-oriented interface
 * @export
 * @class LibraryServiceApi
 * @extends {BaseAPI}
 */
class LibraryServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Deletes an item from the library and file system
     * @param {string} ids Ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    deleteItems(ids, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .deleteItems(ids, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Deletes an item from the library and file system
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    deleteItemsById(id, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .deleteItemsById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Finds albums similar to a given album.
     * @param {string} id Item Id
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getAlbumsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getAlbumsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Finds albums similar to a given album.
     * @param {string} id Item Id
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getArtistsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getArtistsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Finds games similar to a given game.
     * @param {string} id Item Id
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getGamesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getGamesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets all parents of an item
     * @param {string} id Item Id
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdAncestors(id, userId, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdAncestors(id, userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets critic reviews for an item
     * @param {string} id Item Id
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdCriticreviews(id, startIndex, limit, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdCriticreviews(id, startIndex, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets delete info for an item
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdDeleteinfo(id, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdDeleteinfo(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Downloads item media
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdDownload(id, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdDownload(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets the original file of an item
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdFile(id, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdFile(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets similar items
     * @param {string} id Item Id
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets theme videos and songs for an item
     * @param {string} id Item Id
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdThememedia(id, userId, inheritFromParent, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdThememedia(id, userId, inheritFromParent, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets theme songs for an item
     * @param {string} id Item Id
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdThemesongs(id, userId, inheritFromParent, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdThemesongs(id, userId, inheritFromParent, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets theme videos for an item
     * @param {string} id Item Id
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {boolean} [inheritFromParent] Determines whether or not parent items should be searched for theme media.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsByIdThemevideos(id, userId, inheritFromParent, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsByIdThemevideos(id, userId, inheritFromParent, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {string} [userId] Optional. Get counts from a specific user&#x27;s library.
     * @param {boolean} [isFavorite] Optional. Get counts of favorite items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getItemsCounts(userId, isFavorite, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getItemsCounts(userId, isFavorite, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getLibrariesAvailableoptions(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getLibrariesAvailableoptions(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets all user media folders.
     * @param {boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getLibraryMediafolders(isHidden, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getLibraryMediafolders(isHidden, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of physical paths from virtual folders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getLibraryPhysicalpaths(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getLibraryPhysicalpaths(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets all user media folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getLibrarySelectablemediafolders(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getLibrarySelectablemediafolders(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Finds movies and trailers similar to a given movie.
     * @param {string} id Item Id
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getMoviesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getMoviesByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Finds tv shows similar to a given one.
     * @param {string} id Item Id
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getShowsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getShowsByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Finds movies and trailers similar to a given trailer.
     * @param {string} id Item Id
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    getTrailersByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .getTrailersByIdSimilar(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Reports that new movies have been added by an external source
     * @param {LibraryPostUpdatedMedia} body PostUpdatedMedia
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    postLibraryMediaUpdated(body, options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .postLibraryMediaUpdated(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Deprecated. Use /Library/Media/Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    postLibraryMoviesAdded(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .postLibraryMoviesAdded(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Deprecated. Use /Library/Media/Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    postLibraryMoviesUpdated(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .postLibraryMoviesUpdated(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Starts a library scan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    postLibraryRefresh(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .postLibraryRefresh(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Deprecated. Use /Library/Media/Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    postLibrarySeriesAdded(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .postLibrarySeriesAdded(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Deprecated. Use /Library/Media/Updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryServiceApi
     */
    postLibrarySeriesUpdated(options) {
        return (0, exports.LibraryServiceApiFp)(this.configuration)
            .postLibrarySeriesUpdated(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.LibraryServiceApi = LibraryServiceApi;
//# sourceMappingURL=library-service-api.js.map