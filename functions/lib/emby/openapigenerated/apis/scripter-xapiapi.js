"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScripterXAPIApi = exports.ScripterXAPIApiFactory = exports.ScripterXAPIApiFp = exports.ScripterXAPIApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ScripterXAPIApi - axios parameter creator
 * @export
 */
const ScripterXAPIApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScripterxPackagesByInstallationidByFunction: async (installationId, _function, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling deleteScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter '_function' is not null or undefined
            if (_function === null || _function === undefined) {
                throw new base_1.RequiredError("_function", "Required parameter _function was null or undefined when calling deleteScripterxPackagesByInstallationidByFunction.");
            }
            const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)))
                .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve ScripterX Change Log --- Requires authentication as user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxChangelog: async (options = {}) => {
            const localVarPath = `/ScripterX/ChangeLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesByInstallationidByFunction: async (installationId, _function, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling getScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter '_function' is not null or undefined
            if (_function === null || _function === undefined) {
                throw new base_1.RequiredError("_function", "Required parameter _function was null or undefined when calling getScripterxPackagesByInstallationidByFunction.");
            }
            const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)))
                .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ScripterX Package Config Interface --- Requires authentication as user
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesGetconfiginterfaceByInstallationid: async (installationId, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling getScripterxPackagesGetconfiginterfaceByInstallationid.");
            }
            const localVarPath = `/ScripterX/Packages/GetConfigInterface/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Installed Package Information --- Requires authentication as administrator
         * @summary Get Installed Package Information
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesInfoByInstallationid: async (installationId, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling getScripterxPackagesInfoByInstallationid.");
            }
            const localVarPath = `/ScripterX/Packages/Info/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
         * @summary Get a list of Installed Packages with PackageId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesInstancesByPackageid: async (packageId, options = {}) => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new base_1.RequiredError("packageId", "Required parameter packageId was null or undefined when calling getScripterxPackagesInstancesByPackageid.");
            }
            const localVarPath = `/ScripterX/Packages/Instances/{packageId}`.replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Reload a ScripterX Package Instance --- Requires authentication as administrator
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesReloadByInstallationid: async (installationId, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling getScripterxPackagesReloadByInstallationid.");
            }
            const localVarPath = `/ScripterX/Packages/Reload/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Uninstall a ScripterX Package --- Requires authentication as administrator
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesRemoveByInstallationid: async (installationId, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling getScripterxPackagesRemoveByInstallationid.");
            }
            const localVarPath = `/ScripterX/Packages/Remove/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headScripterxPackagesByInstallationidByFunction: async (installationId, _function, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling headScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter '_function' is not null or undefined
            if (_function === null || _function === undefined) {
                throw new base_1.RequiredError("_function", "Required parameter _function was null or undefined when calling headScripterxPackagesByInstallationidByFunction.");
            }
            const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)))
                .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "HEAD" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsScripterxPackagesByInstallationidByFunction: async (installationId, _function, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling optionsScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter '_function' is not null or undefined
            if (_function === null || _function === undefined) {
                throw new base_1.RequiredError("_function", "Required parameter _function was null or undefined when calling optionsScripterxPackagesByInstallationidByFunction.");
            }
            const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)))
                .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "OPTIONS" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchScripterxPackagesByInstallationidByFunction: async (installationId, _function, options = {}) => {
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling patchScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter '_function' is not null or undefined
            if (_function === null || _function === undefined) {
                throw new base_1.RequiredError("_function", "Required parameter _function was null or undefined when calling patchScripterxPackagesByInstallationidByFunction.");
            }
            const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)))
                .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PATCH" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScripterxPackagesByInstallationidByFunction: async (body, installationId, _function, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling postScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter '_function' is not null or undefined
            if (_function === null || _function === undefined) {
                throw new base_1.RequiredError("_function", "Required parameter _function was null or undefined when calling postScripterxPackagesByInstallationidByFunction.");
            }
            const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)))
                .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/octet-stream";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Save Package Configuration --- Requires authentication as administrator
         * @summary Save Package Configuration
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScripterxPackagesSaveconfigByInstallationid: async (body, installationId, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postScripterxPackagesSaveconfigByInstallationid.");
            }
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling postScripterxPackagesSaveconfigByInstallationid.");
            }
            const localVarPath = `/ScripterX/Packages/SaveConfig/{installationId}`.replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/octet-stream";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload ZIP Package to ScripterX --- Requires authentication as administrator
         * @summary Upload ZIP Package to ScripterX
         * @param {Object} body Binary stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScripterxPackagesUpload: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postScripterxPackagesUpload.");
            }
            const localVarPath = `/ScripterX/Packages/Upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/octet-stream";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putScripterxPackagesByInstallationidByFunction: async (body, installationId, _function, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling putScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter 'installationId' is not null or undefined
            if (installationId === null || installationId === undefined) {
                throw new base_1.RequiredError("installationId", "Required parameter installationId was null or undefined when calling putScripterxPackagesByInstallationidByFunction.");
            }
            // verify required parameter '_function' is not null or undefined
            if (_function === null || _function === undefined) {
                throw new base_1.RequiredError("_function", "Required parameter _function was null or undefined when calling putScripterxPackagesByInstallationidByFunction.");
            }
            const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
                .replace(`{${"installationId"}}`, encodeURIComponent(String(installationId)))
                .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/octet-stream";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ScripterXAPIApiAxiosParamCreator = ScripterXAPIApiAxiosParamCreator;
/**
 * ScripterXAPIApi - functional programming interface
 * @export
 */
const ScripterXAPIApiFp = function (configuration) {
    return {
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).deleteScripterxPackagesByInstallationidByFunction(installationId, _function, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve ScripterX Change Log --- Requires authentication as user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScripterxChangelog(options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).getScripterxChangelog(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).getScripterxPackagesByInstallationidByFunction(installationId, _function, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get ScripterX Package Config Interface --- Requires authentication as user
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScripterxPackagesGetconfiginterfaceByInstallationid(installationId, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).getScripterxPackagesGetconfiginterfaceByInstallationid(installationId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Installed Package Information --- Requires authentication as administrator
         * @summary Get Installed Package Information
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScripterxPackagesInfoByInstallationid(installationId, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).getScripterxPackagesInfoByInstallationid(installationId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
         * @summary Get a list of Installed Packages with PackageId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScripterxPackagesInstancesByPackageid(packageId, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).getScripterxPackagesInstancesByPackageid(packageId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reload a ScripterX Package Instance --- Requires authentication as administrator
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScripterxPackagesReloadByInstallationid(installationId, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).getScripterxPackagesReloadByInstallationid(installationId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Uninstall a ScripterX Package --- Requires authentication as administrator
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScripterxPackagesRemoveByInstallationid(installationId, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).getScripterxPackagesRemoveByInstallationid(installationId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).headScripterxPackagesByInstallationidByFunction(installationId, _function, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).optionsScripterxPackagesByInstallationidByFunction(installationId, _function, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).patchScripterxPackagesByInstallationidByFunction(installationId, _function, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScripterxPackagesByInstallationidByFunction(body, installationId, _function, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).postScripterxPackagesByInstallationidByFunction(body, installationId, _function, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Save Package Configuration --- Requires authentication as administrator
         * @summary Save Package Configuration
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScripterxPackagesSaveconfigByInstallationid(body, installationId, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).postScripterxPackagesSaveconfigByInstallationid(body, installationId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upload ZIP Package to ScripterX --- Requires authentication as administrator
         * @summary Upload ZIP Package to ScripterX
         * @param {Object} body Binary stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScripterxPackagesUpload(body, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).postScripterxPackagesUpload(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putScripterxPackagesByInstallationidByFunction(body, installationId, _function, options) {
            const localVarAxiosArgs = await (0, exports.ScripterXAPIApiAxiosParamCreator)(configuration).putScripterxPackagesByInstallationidByFunction(body, installationId, _function, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ScripterXAPIApiFp = ScripterXAPIApiFp;
/**
 * ScripterXAPIApi - factory interface
 * @export
 */
const ScripterXAPIApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .deleteScripterxPackagesByInstallationidByFunction(installationId, _function, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieve ScripterX Change Log --- Requires authentication as user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxChangelog(options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .getScripterxChangelog(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .getScripterxPackagesByInstallationidByFunction(installationId, _function, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get ScripterX Package Config Interface --- Requires authentication as user
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesGetconfiginterfaceByInstallationid(installationId, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .getScripterxPackagesGetconfiginterfaceByInstallationid(installationId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get Installed Package Information --- Requires authentication as administrator
         * @summary Get Installed Package Information
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesInfoByInstallationid(installationId, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .getScripterxPackagesInfoByInstallationid(installationId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
         * @summary Get a list of Installed Packages with PackageId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesInstancesByPackageid(packageId, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .getScripterxPackagesInstancesByPackageid(packageId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Reload a ScripterX Package Instance --- Requires authentication as administrator
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesReloadByInstallationid(installationId, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .getScripterxPackagesReloadByInstallationid(installationId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Uninstall a ScripterX Package --- Requires authentication as administrator
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScripterxPackagesRemoveByInstallationid(installationId, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .getScripterxPackagesRemoveByInstallationid(installationId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .headScripterxPackagesByInstallationidByFunction(installationId, _function, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .optionsScripterxPackagesByInstallationidByFunction(installationId, _function, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .patchScripterxPackagesByInstallationidByFunction(installationId, _function, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScripterxPackagesByInstallationidByFunction(body, installationId, _function, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .postScripterxPackagesByInstallationidByFunction(body, installationId, _function, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Save Package Configuration --- Requires authentication as administrator
         * @summary Save Package Configuration
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScripterxPackagesSaveconfigByInstallationid(body, installationId, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .postScripterxPackagesSaveconfigByInstallationid(body, installationId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Upload ZIP Package to ScripterX --- Requires authentication as administrator
         * @summary Upload ZIP Package to ScripterX
         * @param {Object} body Binary stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScripterxPackagesUpload(body, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .postScripterxPackagesUpload(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {Object} body Binary stream
         * @param {string} installationId
         * @param {string} _function
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putScripterxPackagesByInstallationidByFunction(body, installationId, _function, options) {
            return (0, exports.ScripterXAPIApiFp)(configuration)
                .putScripterxPackagesByInstallationidByFunction(body, installationId, _function, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ScripterXAPIApiFactory = ScripterXAPIApiFactory;
/**
 * ScripterXAPIApi - object-oriented interface
 * @export
 * @class ScripterXAPIApi
 * @extends {BaseAPI}
 */
class ScripterXAPIApi extends base_1.BaseAPI {
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    deleteScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .deleteScripterxPackagesByInstallationidByFunction(installationId, _function, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve ScripterX Change Log --- Requires authentication as user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    getScripterxChangelog(options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .getScripterxChangelog(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    getScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .getScripterxPackagesByInstallationidByFunction(installationId, _function, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get ScripterX Package Config Interface --- Requires authentication as user
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    getScripterxPackagesGetconfiginterfaceByInstallationid(installationId, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .getScripterxPackagesGetconfiginterfaceByInstallationid(installationId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Installed Package Information --- Requires authentication as administrator
     * @summary Get Installed Package Information
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    getScripterxPackagesInfoByInstallationid(installationId, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .getScripterxPackagesInfoByInstallationid(installationId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
     * @summary Get a list of Installed Packages with PackageId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    getScripterxPackagesInstancesByPackageid(packageId, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .getScripterxPackagesInstancesByPackageid(packageId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reload a ScripterX Package Instance --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    getScripterxPackagesReloadByInstallationid(installationId, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .getScripterxPackagesReloadByInstallationid(installationId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Uninstall a ScripterX Package --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    getScripterxPackagesRemoveByInstallationid(installationId, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .getScripterxPackagesRemoveByInstallationid(installationId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    headScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .headScripterxPackagesByInstallationidByFunction(installationId, _function, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    optionsScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .optionsScripterxPackagesByInstallationidByFunction(installationId, _function, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    patchScripterxPackagesByInstallationidByFunction(installationId, _function, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .patchScripterxPackagesByInstallationidByFunction(installationId, _function, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    postScripterxPackagesByInstallationidByFunction(body, installationId, _function, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .postScripterxPackagesByInstallationidByFunction(body, installationId, _function, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Save Package Configuration --- Requires authentication as administrator
     * @summary Save Package Configuration
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    postScripterxPackagesSaveconfigByInstallationid(body, installationId, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .postScripterxPackagesSaveconfigByInstallationid(body, installationId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload ZIP Package to ScripterX --- Requires authentication as administrator
     * @summary Upload ZIP Package to ScripterX
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    postScripterxPackagesUpload(body, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .postScripterxPackagesUpload(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripterXAPIApi
     */
    putScripterxPackagesByInstallationidByFunction(body, installationId, _function, options) {
        return (0, exports.ScripterXAPIApiFp)(this.configuration)
            .putScripterxPackagesByInstallationidByFunction(body, installationId, _function, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ScripterXAPIApi = ScripterXAPIApi;
//# sourceMappingURL=scripter-xapiapi.js.map