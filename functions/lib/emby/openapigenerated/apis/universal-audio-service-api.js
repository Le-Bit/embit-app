"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniversalAudioServiceApi = exports.UniversalAudioServiceApiFactory = exports.UniversalAudioServiceApiFp = exports.UniversalAudioServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * UniversalAudioServiceApi - axios parameter creator
 * @export
 */
const UniversalAudioServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdByContainer: async (id, container, deviceId, startTimeTicks, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getAudioByIdByContainer.");
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new base_1.RequiredError("container", "Required parameter container was null or undefined when calling getAudioByIdByContainer.");
            }
            const localVarPath = `/Audio/{Id}/universal.{Container}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Container"}}`, encodeURIComponent(String(container)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdUniversal: async (id, deviceId, startTimeTicks, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getAudioByIdUniversal.");
            }
            const localVarPath = `/Audio/{Id}/universal`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdByContainer: async (id, container, deviceId, startTimeTicks, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling headAudioByIdByContainer.");
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new base_1.RequiredError("container", "Required parameter container was null or undefined when calling headAudioByIdByContainer.");
            }
            const localVarPath = `/Audio/{Id}/universal.{Container}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Container"}}`, encodeURIComponent(String(container)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "HEAD" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdUniversal: async (id, deviceId, startTimeTicks, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling headAudioByIdUniversal.");
            }
            const localVarPath = `/Audio/{Id}/universal`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "HEAD" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UniversalAudioServiceApiAxiosParamCreator = UniversalAudioServiceApiAxiosParamCreator;
/**
 * UniversalAudioServiceApi - functional programming interface
 * @export
 */
const UniversalAudioServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options) {
            const localVarAxiosArgs = await (0, exports.UniversalAudioServiceApiAxiosParamCreator)(configuration).getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioByIdUniversal(id, deviceId, startTimeTicks, options) {
            const localVarAxiosArgs = await (0, exports.UniversalAudioServiceApiAxiosParamCreator)(configuration).getAudioByIdUniversal(id, deviceId, startTimeTicks, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options) {
            const localVarAxiosArgs = await (0, exports.UniversalAudioServiceApiAxiosParamCreator)(configuration).headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headAudioByIdUniversal(id, deviceId, startTimeTicks, options) {
            const localVarAxiosArgs = await (0, exports.UniversalAudioServiceApiAxiosParamCreator)(configuration).headAudioByIdUniversal(id, deviceId, startTimeTicks, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.UniversalAudioServiceApiFp = UniversalAudioServiceApiFp;
/**
 * UniversalAudioServiceApi - factory interface
 * @export
 */
const UniversalAudioServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options) {
            return (0, exports.UniversalAudioServiceApiFp)(configuration)
                .getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdUniversal(id, deviceId, startTimeTicks, options) {
            return (0, exports.UniversalAudioServiceApiFp)(configuration)
                .getAudioByIdUniversal(id, deviceId, startTimeTicks, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options) {
            return (0, exports.UniversalAudioServiceApiFp)(configuration)
                .headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdUniversal(id, deviceId, startTimeTicks, options) {
            return (0, exports.UniversalAudioServiceApiFp)(configuration)
                .headAudioByIdUniversal(id, deviceId, startTimeTicks, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.UniversalAudioServiceApiFactory = UniversalAudioServiceApiFactory;
/**
 * UniversalAudioServiceApi - object-oriented interface
 * @export
 * @class UniversalAudioServiceApi
 * @extends {BaseAPI}
 */
class UniversalAudioServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options) {
        return (0, exports.UniversalAudioServiceApiFp)(this.configuration)
            .getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    getAudioByIdUniversal(id, deviceId, startTimeTicks, options) {
        return (0, exports.UniversalAudioServiceApiFp)(this.configuration)
            .getAudioByIdUniversal(id, deviceId, startTimeTicks, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options) {
        return (0, exports.UniversalAudioServiceApiFp)(this.configuration)
            .headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    headAudioByIdUniversal(id, deviceId, startTimeTicks, options) {
        return (0, exports.UniversalAudioServiceApiFp)(this.configuration)
            .headAudioByIdUniversal(id, deviceId, startTimeTicks, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.UniversalAudioServiceApi = UniversalAudioServiceApi;
//# sourceMappingURL=universal-audio-service-api.js.map