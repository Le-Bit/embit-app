"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemRefreshServiceApi = exports.ItemRefreshServiceApiFactory = exports.ItemRefreshServiceApiFp = exports.ItemRefreshServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ItemRefreshServiceApi - axios parameter creator
 * @export
 */
const ItemRefreshServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Refreshes metadata for an item
         * @param {string} id Item Id
         * @param {boolean} [recursive] Indicates if the refresh should occur recursively.
         * @param {string} [metadataRefreshMode] Specifies the metadata refresh mode
         * @param {string} [imageRefreshMode] Specifies the image refresh mode
         * @param {boolean} [replaceAllMetadata] Determines if metadata should be replaced. Only applicable if mode is FullRefresh
         * @param {boolean} [replaceAllImages] Determines if images should be replaced. Only applicable if mode is FullRefresh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRefresh: async (id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postItemsByIdRefresh.");
            }
            const localVarPath = `/Items/{Id}/Refresh`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (recursive !== undefined) {
                localVarQueryParameter["Recursive"] = recursive;
            }
            if (metadataRefreshMode !== undefined) {
                localVarQueryParameter["MetadataRefreshMode"] = metadataRefreshMode;
            }
            if (imageRefreshMode !== undefined) {
                localVarQueryParameter["ImageRefreshMode"] = imageRefreshMode;
            }
            if (replaceAllMetadata !== undefined) {
                localVarQueryParameter["ReplaceAllMetadata"] = replaceAllMetadata;
            }
            if (replaceAllImages !== undefined) {
                localVarQueryParameter["ReplaceAllImages"] = replaceAllImages;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ItemRefreshServiceApiAxiosParamCreator = ItemRefreshServiceApiAxiosParamCreator;
/**
 * ItemRefreshServiceApi - functional programming interface
 * @export
 */
const ItemRefreshServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Refreshes metadata for an item
         * @param {string} id Item Id
         * @param {boolean} [recursive] Indicates if the refresh should occur recursively.
         * @param {string} [metadataRefreshMode] Specifies the metadata refresh mode
         * @param {string} [imageRefreshMode] Specifies the image refresh mode
         * @param {boolean} [replaceAllMetadata] Determines if metadata should be replaced. Only applicable if mode is FullRefresh
         * @param {boolean} [replaceAllImages] Determines if images should be replaced. Only applicable if mode is FullRefresh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsByIdRefresh(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options) {
            const localVarAxiosArgs = await (0, exports.ItemRefreshServiceApiAxiosParamCreator)(configuration).postItemsByIdRefresh(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ItemRefreshServiceApiFp = ItemRefreshServiceApiFp;
/**
 * ItemRefreshServiceApi - factory interface
 * @export
 */
const ItemRefreshServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Refreshes metadata for an item
         * @param {string} id Item Id
         * @param {boolean} [recursive] Indicates if the refresh should occur recursively.
         * @param {string} [metadataRefreshMode] Specifies the metadata refresh mode
         * @param {string} [imageRefreshMode] Specifies the image refresh mode
         * @param {boolean} [replaceAllMetadata] Determines if metadata should be replaced. Only applicable if mode is FullRefresh
         * @param {boolean} [replaceAllImages] Determines if images should be replaced. Only applicable if mode is FullRefresh
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRefresh(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options) {
            return (0, exports.ItemRefreshServiceApiFp)(configuration)
                .postItemsByIdRefresh(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ItemRefreshServiceApiFactory = ItemRefreshServiceApiFactory;
/**
 * ItemRefreshServiceApi - object-oriented interface
 * @export
 * @class ItemRefreshServiceApi
 * @extends {BaseAPI}
 */
class ItemRefreshServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Refreshes metadata for an item
     * @param {string} id Item Id
     * @param {boolean} [recursive] Indicates if the refresh should occur recursively.
     * @param {string} [metadataRefreshMode] Specifies the metadata refresh mode
     * @param {string} [imageRefreshMode] Specifies the image refresh mode
     * @param {boolean} [replaceAllMetadata] Determines if metadata should be replaced. Only applicable if mode is FullRefresh
     * @param {boolean} [replaceAllImages] Determines if images should be replaced. Only applicable if mode is FullRefresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemRefreshServiceApi
     */
    postItemsByIdRefresh(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options) {
        return (0, exports.ItemRefreshServiceApiFp)(this.configuration)
            .postItemsByIdRefresh(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ItemRefreshServiceApi = ItemRefreshServiceApi;
//# sourceMappingURL=item-refresh-service-api.js.map