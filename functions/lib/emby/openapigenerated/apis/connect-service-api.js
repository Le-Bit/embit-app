"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectServiceApi = exports.ConnectServiceApiFactory = exports.ConnectServiceApiFp = exports.ConnectServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ConnectServiceApi - axios parameter creator
 * @export
 */
const ConnectServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Removes a Connect link for a user
         * @param {string} id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByIdConnectLink: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteUsersByIdConnectLink.");
            }
            const localVarPath = `/Users/{Id}/Connect/Link`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the corresponding local user from a connect user id
         * @param {string} connectUserId ConnectUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectExchange: async (connectUserId, options = {}) => {
            // verify required parameter 'connectUserId' is not null or undefined
            if (connectUserId === null || connectUserId === undefined) {
                throw new base_1.RequiredError("connectUserId", "Required parameter connectUserId was null or undefined when calling getConnectExchange.");
            }
            const localVarPath = `/Connect/Exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (connectUserId !== undefined) {
                localVarQueryParameter["ConnectUserId"] = connectUserId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a Connect link for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectPending: async (options = {}) => {
            const localVarPath = `/Connect/Pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a Connect link for a user
         * @param {string} id User Id
         * @param {string} connectUsername Connect username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdConnectLink: async (id, connectUsername, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postUsersByIdConnectLink.");
            }
            // verify required parameter 'connectUsername' is not null or undefined
            if (connectUsername === null || connectUsername === undefined) {
                throw new base_1.RequiredError("connectUsername", "Required parameter connectUsername was null or undefined when calling postUsersByIdConnectLink.");
            }
            const localVarPath = `/Users/{Id}/Connect/Link`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (connectUsername !== undefined) {
                localVarQueryParameter["ConnectUsername"] = connectUsername;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ConnectServiceApiAxiosParamCreator = ConnectServiceApiAxiosParamCreator;
/**
 * ConnectServiceApi - functional programming interface
 * @export
 */
const ConnectServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Removes a Connect link for a user
         * @param {string} id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersByIdConnectLink(id, options) {
            const localVarAxiosArgs = await (0, exports.ConnectServiceApiAxiosParamCreator)(configuration).deleteUsersByIdConnectLink(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the corresponding local user from a connect user id
         * @param {string} connectUserId ConnectUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectExchange(connectUserId, options) {
            const localVarAxiosArgs = await (0, exports.ConnectServiceApiAxiosParamCreator)(configuration).getConnectExchange(connectUserId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a Connect link for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectPending(options) {
            const localVarAxiosArgs = await (0, exports.ConnectServiceApiAxiosParamCreator)(configuration).getConnectPending(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a Connect link for a user
         * @param {string} id User Id
         * @param {string} connectUsername Connect username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersByIdConnectLink(id, connectUsername, options) {
            const localVarAxiosArgs = await (0, exports.ConnectServiceApiAxiosParamCreator)(configuration).postUsersByIdConnectLink(id, connectUsername, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.ConnectServiceApiFp = ConnectServiceApiFp;
/**
 * ConnectServiceApi - factory interface
 * @export
 */
const ConnectServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Removes a Connect link for a user
         * @param {string} id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByIdConnectLink(id, options) {
            return (0, exports.ConnectServiceApiFp)(configuration)
                .deleteUsersByIdConnectLink(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets the corresponding local user from a connect user id
         * @param {string} connectUserId ConnectUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectExchange(connectUserId, options) {
            return (0, exports.ConnectServiceApiFp)(configuration)
                .getConnectExchange(connectUserId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a Connect link for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectPending(options) {
            return (0, exports.ConnectServiceApiFp)(configuration)
                .getConnectPending(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a Connect link for a user
         * @param {string} id User Id
         * @param {string} connectUsername Connect username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersByIdConnectLink(id, connectUsername, options) {
            return (0, exports.ConnectServiceApiFp)(configuration)
                .postUsersByIdConnectLink(id, connectUsername, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ConnectServiceApiFactory = ConnectServiceApiFactory;
/**
 * ConnectServiceApi - object-oriented interface
 * @export
 * @class ConnectServiceApi
 * @extends {BaseAPI}
 */
class ConnectServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Removes a Connect link for a user
     * @param {string} id User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectServiceApi
     */
    deleteUsersByIdConnectLink(id, options) {
        return (0, exports.ConnectServiceApiFp)(this.configuration)
            .deleteUsersByIdConnectLink(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets the corresponding local user from a connect user id
     * @param {string} connectUserId ConnectUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectServiceApi
     */
    getConnectExchange(connectUserId, options) {
        return (0, exports.ConnectServiceApiFp)(this.configuration)
            .getConnectExchange(connectUserId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Creates a Connect link for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectServiceApi
     */
    getConnectPending(options) {
        return (0, exports.ConnectServiceApiFp)(this.configuration)
            .getConnectPending(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Creates a Connect link for a user
     * @param {string} id User Id
     * @param {string} connectUsername Connect username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectServiceApi
     */
    postUsersByIdConnectLink(id, connectUsername, options) {
        return (0, exports.ConnectServiceApiFp)(this.configuration)
            .postUsersByIdConnectLink(id, connectUsername, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ConnectServiceApi = ConnectServiceApi;
//# sourceMappingURL=connect-service-api.js.map