"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserViewsServiceApi = exports.UserViewsServiceApiFactory = exports.UserViewsServiceApiFp = exports.UserViewsServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * UserViewsServiceApi - axios parameter creator
 * @export
 */
const UserViewsServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * No authentication required
         * @param {string} userId User Id
         * @param {boolean} includeExternalContent Whether or not to include external views such as channels or live tv
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridViews: async (userId, includeExternalContent, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getUsersByUseridViews.");
            }
            // verify required parameter 'includeExternalContent' is not null or undefined
            if (includeExternalContent === null ||
                includeExternalContent === undefined) {
                throw new base_1.RequiredError("includeExternalContent", "Required parameter includeExternalContent was null or undefined when calling getUsersByUseridViews.");
            }
            const localVarPath = `/Users/{UserId}/Views`.replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (includeExternalContent !== undefined) {
                localVarQueryParameter["IncludeExternalContent"] =
                    includeExternalContent;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserViewsServiceApiAxiosParamCreator = UserViewsServiceApiAxiosParamCreator;
/**
 * UserViewsServiceApi - functional programming interface
 * @export
 */
const UserViewsServiceApiFp = function (configuration) {
    return {
        /**
         * No authentication required
         * @param {string} userId User Id
         * @param {boolean} includeExternalContent Whether or not to include external views such as channels or live tv
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByUseridViews(userId, includeExternalContent, options) {
            const localVarAxiosArgs = await (0, exports.UserViewsServiceApiAxiosParamCreator)(configuration).getUsersByUseridViews(userId, includeExternalContent, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.UserViewsServiceApiFp = UserViewsServiceApiFp;
/**
 * UserViewsServiceApi - factory interface
 * @export
 */
const UserViewsServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * No authentication required
         * @param {string} userId User Id
         * @param {boolean} includeExternalContent Whether or not to include external views such as channels or live tv
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByUseridViews(userId, includeExternalContent, options) {
            return (0, exports.UserViewsServiceApiFp)(configuration)
                .getUsersByUseridViews(userId, includeExternalContent, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.UserViewsServiceApiFactory = UserViewsServiceApiFactory;
/**
 * UserViewsServiceApi - object-oriented interface
 * @export
 * @class UserViewsServiceApi
 * @extends {BaseAPI}
 */
class UserViewsServiceApi extends base_1.BaseAPI {
    /**
     * No authentication required
     * @param {string} userId User Id
     * @param {boolean} includeExternalContent Whether or not to include external views such as channels or live tv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserViewsServiceApi
     */
    getUsersByUseridViews(userId, includeExternalContent, options) {
        return (0, exports.UserViewsServiceApiFp)(this.configuration)
            .getUsersByUseridViews(userId, includeExternalContent, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.UserViewsServiceApi = UserViewsServiceApi;
//# sourceMappingURL=user-views-service-api.js.map