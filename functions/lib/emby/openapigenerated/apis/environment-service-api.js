"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentServiceApi = exports.EnvironmentServiceApiFactory = exports.EnvironmentServiceApiFp = exports.EnvironmentServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * EnvironmentServiceApi - axios parameter creator
 * @export
 */
const EnvironmentServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDefaultdirectorybrowser: async (options = {}) => {
            const localVarPath = `/Environment/DefaultDirectoryBrowser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {string} path
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDirectorycontents: async (path, includeFiles, includeDirectories, options = {}) => {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new base_1.RequiredError("path", "Required parameter path was null or undefined when calling getEnvironmentDirectorycontents.");
            }
            const localVarPath = `/Environment/DirectoryContents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (path !== undefined) {
                localVarQueryParameter["Path"] = path;
            }
            if (includeFiles !== undefined) {
                localVarQueryParameter["IncludeFiles"] = includeFiles;
            }
            if (includeDirectories !== undefined) {
                localVarQueryParameter["IncludeDirectories"] = includeDirectories;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available drives from the server's file system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDrives: async (options = {}) => {
            const localVarPath = `/Environment/Drives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of devices on the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkdevices: async (options = {}) => {
            const localVarPath = `/Environment/NetworkDevices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets shares from a network device
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkshares: async (path, options = {}) => {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new base_1.RequiredError("path", "Required parameter path was null or undefined when calling getEnvironmentNetworkshares.");
            }
            const localVarPath = `/Environment/NetworkShares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (path !== undefined) {
                localVarQueryParameter["Path"] = path;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentParentpath: async (path, options = {}) => {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new base_1.RequiredError("path", "Required parameter path was null or undefined when calling getEnvironmentParentpath.");
            }
            const localVarPath = `/Environment/ParentPath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (path !== undefined) {
                localVarQueryParameter["Path"] = path;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {ValidatePath} body ValidatePath
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEnvironmentValidatepath: async (body, path, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postEnvironmentValidatepath.");
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new base_1.RequiredError("path", "Required parameter path was null or undefined when calling postEnvironmentValidatepath.");
            }
            const localVarPath = `/Environment/ValidatePath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (path !== undefined) {
                localVarQueryParameter["Path"] = path;
            }
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.EnvironmentServiceApiAxiosParamCreator = EnvironmentServiceApiAxiosParamCreator;
/**
 * EnvironmentServiceApi - functional programming interface
 * @export
 */
const EnvironmentServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentDefaultdirectorybrowser(options) {
            const localVarAxiosArgs = await (0, exports.EnvironmentServiceApiAxiosParamCreator)(configuration).getEnvironmentDefaultdirectorybrowser(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {string} path
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options) {
            const localVarAxiosArgs = await (0, exports.EnvironmentServiceApiAxiosParamCreator)(configuration).getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available drives from the server's file system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentDrives(options) {
            const localVarAxiosArgs = await (0, exports.EnvironmentServiceApiAxiosParamCreator)(configuration).getEnvironmentDrives(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of devices on the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentNetworkdevices(options) {
            const localVarAxiosArgs = await (0, exports.EnvironmentServiceApiAxiosParamCreator)(configuration).getEnvironmentNetworkdevices(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets shares from a network device
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentNetworkshares(path, options) {
            const localVarAxiosArgs = await (0, exports.EnvironmentServiceApiAxiosParamCreator)(configuration).getEnvironmentNetworkshares(path, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentParentpath(path, options) {
            const localVarAxiosArgs = await (0, exports.EnvironmentServiceApiAxiosParamCreator)(configuration).getEnvironmentParentpath(path, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {ValidatePath} body ValidatePath
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEnvironmentValidatepath(body, path, options) {
            const localVarAxiosArgs = await (0, exports.EnvironmentServiceApiAxiosParamCreator)(configuration).postEnvironmentValidatepath(body, path, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.EnvironmentServiceApiFp = EnvironmentServiceApiFp;
/**
 * EnvironmentServiceApi - factory interface
 * @export
 */
const EnvironmentServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDefaultdirectorybrowser(options) {
            return (0, exports.EnvironmentServiceApiFp)(configuration)
                .getEnvironmentDefaultdirectorybrowser(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {string} path
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options) {
            return (0, exports.EnvironmentServiceApiFp)(configuration)
                .getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available drives from the server's file system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDrives(options) {
            return (0, exports.EnvironmentServiceApiFp)(configuration)
                .getEnvironmentDrives(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of devices on the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkdevices(options) {
            return (0, exports.EnvironmentServiceApiFp)(configuration)
                .getEnvironmentNetworkdevices(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets shares from a network device
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkshares(path, options) {
            return (0, exports.EnvironmentServiceApiFp)(configuration)
                .getEnvironmentNetworkshares(path, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentParentpath(path, options) {
            return (0, exports.EnvironmentServiceApiFp)(configuration)
                .getEnvironmentParentpath(path, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {ValidatePath} body ValidatePath
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEnvironmentValidatepath(body, path, options) {
            return (0, exports.EnvironmentServiceApiFp)(configuration)
                .postEnvironmentValidatepath(body, path, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.EnvironmentServiceApiFactory = EnvironmentServiceApiFactory;
/**
 * EnvironmentServiceApi - object-oriented interface
 * @export
 * @class EnvironmentServiceApi
 * @extends {BaseAPI}
 */
class EnvironmentServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Gets the parent path of a given path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    getEnvironmentDefaultdirectorybrowser(options) {
        return (0, exports.EnvironmentServiceApiFp)(this.configuration)
            .getEnvironmentDefaultdirectorybrowser(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets the contents of a given directory in the file system
     * @param {string} path
     * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
     * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options) {
        return (0, exports.EnvironmentServiceApiFp)(this.configuration)
            .getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets available drives from the server's file system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    getEnvironmentDrives(options) {
        return (0, exports.EnvironmentServiceApiFp)(this.configuration)
            .getEnvironmentDrives(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of devices on the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    getEnvironmentNetworkdevices(options) {
        return (0, exports.EnvironmentServiceApiFp)(this.configuration)
            .getEnvironmentNetworkdevices(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets shares from a network device
     * @param {string} path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    getEnvironmentNetworkshares(path, options) {
        return (0, exports.EnvironmentServiceApiFp)(this.configuration)
            .getEnvironmentNetworkshares(path, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets the parent path of a given path
     * @param {string} path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    getEnvironmentParentpath(path, options) {
        return (0, exports.EnvironmentServiceApiFp)(this.configuration)
            .getEnvironmentParentpath(path, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets the contents of a given directory in the file system
     * @param {ValidatePath} body ValidatePath
     * @param {string} path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    postEnvironmentValidatepath(body, path, options) {
        return (0, exports.EnvironmentServiceApiFp)(this.configuration)
            .postEnvironmentValidatepath(body, path, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.EnvironmentServiceApi = EnvironmentServiceApi;
//# sourceMappingURL=environment-service-api.js.map