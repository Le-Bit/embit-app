"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceServiceApi = exports.DeviceServiceApiFactory = exports.DeviceServiceApiFp = exports.DeviceServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * DeviceServiceApi - axios parameter creator
 * @export
 */
const DeviceServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevices: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteDevices.");
            }
            const localVarPath = `/Devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (id !== undefined) {
                localVarQueryParameter["Id"] = id;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices: async (options = {}) => {
            const localVarPath = `/Devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets camera upload history for a device
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesCamerauploads: async (deviceId, options = {}) => {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new base_1.RequiredError("deviceId", "Required parameter deviceId was null or undefined when calling getDevicesCamerauploads.");
            }
            const localVarPath = `/Devices/CameraUploads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets info for a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesInfo: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getDevicesInfo.");
            }
            const localVarPath = `/Devices/Info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (id !== undefined) {
                localVarQueryParameter["Id"] = id;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets options for a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesOptions: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getDevicesOptions.");
            }
            const localVarPath = `/Devices/Options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (id !== undefined) {
                localVarQueryParameter["Id"] = id;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Uploads content
         * @param {Object} body Binary stream
         * @param {string} deviceId Device Id
         * @param {string} album Album
         * @param {string} name Name
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDevicesCamerauploads: async (body, deviceId, album, name, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postDevicesCamerauploads.");
            }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new base_1.RequiredError("deviceId", "Required parameter deviceId was null or undefined when calling postDevicesCamerauploads.");
            }
            // verify required parameter 'album' is not null or undefined
            if (album === null || album === undefined) {
                throw new base_1.RequiredError("album", "Required parameter album was null or undefined when calling postDevicesCamerauploads.");
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling postDevicesCamerauploads.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postDevicesCamerauploads.");
            }
            const localVarPath = `/Devices/CameraUploads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (album !== undefined) {
                localVarQueryParameter["Album"] = album;
            }
            if (name !== undefined) {
                localVarQueryParameter["Name"] = name;
            }
            if (id !== undefined) {
                localVarQueryParameter["Id"] = id;
            }
            localVarHeaderParameter["Content-Type"] = "application/octet-stream";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates device options
         * @param {DevicesDeviceOptions} body DeviceOptions:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDevicesOptions: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postDevicesOptions.");
            }
            const localVarPath = `/Devices/Options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DeviceServiceApiAxiosParamCreator = DeviceServiceApiAxiosParamCreator;
/**
 * DeviceServiceApi - functional programming interface
 * @export
 */
const DeviceServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevices(id, options) {
            const localVarAxiosArgs = await (0, exports.DeviceServiceApiAxiosParamCreator)(configuration).deleteDevices(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevices(options) {
            const localVarAxiosArgs = await (0, exports.DeviceServiceApiAxiosParamCreator)(configuration).getDevices(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets camera upload history for a device
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicesCamerauploads(deviceId, options) {
            const localVarAxiosArgs = await (0, exports.DeviceServiceApiAxiosParamCreator)(configuration).getDevicesCamerauploads(deviceId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets info for a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicesInfo(id, options) {
            const localVarAxiosArgs = await (0, exports.DeviceServiceApiAxiosParamCreator)(configuration).getDevicesInfo(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets options for a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicesOptions(id, options) {
            const localVarAxiosArgs = await (0, exports.DeviceServiceApiAxiosParamCreator)(configuration).getDevicesOptions(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Uploads content
         * @param {Object} body Binary stream
         * @param {string} deviceId Device Id
         * @param {string} album Album
         * @param {string} name Name
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDevicesCamerauploads(body, deviceId, album, name, id, options) {
            const localVarAxiosArgs = await (0, exports.DeviceServiceApiAxiosParamCreator)(configuration).postDevicesCamerauploads(body, deviceId, album, name, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates device options
         * @param {DevicesDeviceOptions} body DeviceOptions:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDevicesOptions(body, options) {
            const localVarAxiosArgs = await (0, exports.DeviceServiceApiAxiosParamCreator)(configuration).postDevicesOptions(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.DeviceServiceApiFp = DeviceServiceApiFp;
/**
 * DeviceServiceApi - factory interface
 * @export
 */
const DeviceServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevices(id, options) {
            return (0, exports.DeviceServiceApiFp)(configuration)
                .deleteDevices(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices(options) {
            return (0, exports.DeviceServiceApiFp)(configuration)
                .getDevices(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets camera upload history for a device
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesCamerauploads(deviceId, options) {
            return (0, exports.DeviceServiceApiFp)(configuration)
                .getDevicesCamerauploads(deviceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets info for a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesInfo(id, options) {
            return (0, exports.DeviceServiceApiFp)(configuration)
                .getDevicesInfo(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets options for a device
         * @param {string} id Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesOptions(id, options) {
            return (0, exports.DeviceServiceApiFp)(configuration)
                .getDevicesOptions(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Uploads content
         * @param {Object} body Binary stream
         * @param {string} deviceId Device Id
         * @param {string} album Album
         * @param {string} name Name
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDevicesCamerauploads(body, deviceId, album, name, id, options) {
            return (0, exports.DeviceServiceApiFp)(configuration)
                .postDevicesCamerauploads(body, deviceId, album, name, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Updates device options
         * @param {DevicesDeviceOptions} body DeviceOptions:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDevicesOptions(body, options) {
            return (0, exports.DeviceServiceApiFp)(configuration)
                .postDevicesOptions(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.DeviceServiceApiFactory = DeviceServiceApiFactory;
/**
 * DeviceServiceApi - object-oriented interface
 * @export
 * @class DeviceServiceApi
 * @extends {BaseAPI}
 */
class DeviceServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Deletes a device
     * @param {string} id Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceServiceApi
     */
    deleteDevices(id, options) {
        return (0, exports.DeviceServiceApiFp)(this.configuration)
            .deleteDevices(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets all devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceServiceApi
     */
    getDevices(options) {
        return (0, exports.DeviceServiceApiFp)(this.configuration)
            .getDevices(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets camera upload history for a device
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceServiceApi
     */
    getDevicesCamerauploads(deviceId, options) {
        return (0, exports.DeviceServiceApiFp)(this.configuration)
            .getDevicesCamerauploads(deviceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets info for a device
     * @param {string} id Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceServiceApi
     */
    getDevicesInfo(id, options) {
        return (0, exports.DeviceServiceApiFp)(this.configuration)
            .getDevicesInfo(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets options for a device
     * @param {string} id Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceServiceApi
     */
    getDevicesOptions(id, options) {
        return (0, exports.DeviceServiceApiFp)(this.configuration)
            .getDevicesOptions(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Uploads content
     * @param {Object} body Binary stream
     * @param {string} deviceId Device Id
     * @param {string} album Album
     * @param {string} name Name
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceServiceApi
     */
    postDevicesCamerauploads(body, deviceId, album, name, id, options) {
        return (0, exports.DeviceServiceApiFp)(this.configuration)
            .postDevicesCamerauploads(body, deviceId, album, name, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Updates device options
     * @param {DevicesDeviceOptions} body DeviceOptions:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceServiceApi
     */
    postDevicesOptions(body, options) {
        return (0, exports.DeviceServiceApiFp)(this.configuration)
            .postDevicesOptions(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.DeviceServiceApi = DeviceServiceApi;
//# sourceMappingURL=device-service-api.js.map