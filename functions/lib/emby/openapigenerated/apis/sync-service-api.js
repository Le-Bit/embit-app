"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncServiceApi = exports.SyncServiceApiFactory = exports.SyncServiceApiFp = exports.SyncServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * SyncServiceApi - axios parameter creator
 * @export
 */
const SyncServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncByTargetidItems: async (targetId, options = {}) => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new base_1.RequiredError("targetId", "Required parameter targetId was null or undefined when calling deleteSyncByTargetidItems.");
            }
            const localVarPath = `/Sync/{TargetId}/Items`.replace(`{${"TargetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobitemsById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteSyncJobitemsById.");
            }
            const localVarPath = `/Sync/JobItems/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobsById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteSyncJobsById.");
            }
            const localVarPath = `/Sync/Jobs/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets ready to download sync items.
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncItemsReady: async (targetId, options = {}) => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new base_1.RequiredError("targetId", "Required parameter targetId was null or undefined when calling getSyncItemsReady.");
            }
            const localVarPath = `/Sync/Items/Ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (targetId !== undefined) {
                localVarQueryParameter["TargetId"] = targetId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync job items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitems: async (options = {}) => {
            const localVarPath = `/Sync/JobItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {string} name Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdAdditionalfiles: async (id, name, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getSyncJobitemsByIdAdditionalfiles.");
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling getSyncJobitemsByIdAdditionalfiles.");
            }
            const localVarPath = `/Sync/JobItems/{Id}/AdditionalFiles`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (name !== undefined) {
                localVarQueryParameter["Name"] = name;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdFile: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getSyncJobitemsByIdFile.");
            }
            const localVarPath = `/Sync/JobItems/{Id}/File`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobs: async (options = {}) => {
            const localVarPath = `/Sync/Jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobsById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getSyncJobsById.");
            }
            const localVarPath = `/Sync/Jobs/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {string} [itemIds] ItemIds
         * @param {string} [parentId] ParentId
         * @param {string} [targetId] TargetId
         * @param {string} [category] Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncOptions: async (userId, itemIds, parentId, targetId, category, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getSyncOptions.");
            }
            const localVarPath = `/Sync/Options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (itemIds !== undefined) {
                localVarQueryParameter["ItemIds"] = itemIds;
            }
            if (parentId !== undefined) {
                localVarQueryParameter["ParentId"] = parentId;
            }
            if (targetId !== undefined) {
                localVarQueryParameter["TargetId"] = targetId;
            }
            if (category !== undefined) {
                localVarQueryParameter["Category"] = category;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncTargets: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getSyncTargets.");
            }
            const localVarPath = `/Sync/Targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync status for an item.
         * @param {SyncModelSyncedItemProgress} body SyncedItemProgress:
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncByItemidStatus: async (body, itemId, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postSyncByItemidStatus.");
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError("itemId", "Required parameter itemId was null or undefined when calling postSyncByItemidStatus.");
            }
            const localVarPath = `/Sync/{ItemId}/Status`.replace(`{${"ItemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Syncs data between device and server
         * @param {SyncModelSyncDataRequest} body SyncDataRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncData: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postSyncData.");
            }
            const localVarPath = `/Sync/Data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} [itemIds] ItemIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncItemsCancel: async (itemIds, options = {}) => {
            const localVarPath = `/Sync/Items/Cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (itemIds !== undefined) {
                localVarQueryParameter["ItemIds"] = itemIds;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Enables a cancelled or queued sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdEnable: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postSyncJobitemsByIdEnable.");
            }
            const localVarPath = `/Sync/JobItems/{Id}/Enable`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdMarkforremoval: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postSyncJobitemsByIdMarkforremoval.");
            }
            const localVarPath = `/Sync/JobItems/{Id}/MarkForRemoval`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports that a sync job item has successfully been transferred.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdTransferred: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postSyncJobitemsByIdTransferred.");
            }
            const localVarPath = `/Sync/JobItems/{Id}/Transferred`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Unmarks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdUnmarkforremoval: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postSyncJobitemsByIdUnmarkforremoval.");
            }
            const localVarPath = `/Sync/JobItems/{Id}/UnmarkForRemoval`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {SyncModelSyncJobRequest} body SyncJobRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobs: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postSyncJobs.");
            }
            const localVarPath = `/Sync/Jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a sync job.
         * @param {SyncSyncJob} body SyncJob:
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobsById: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postSyncJobsById.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postSyncJobsById.");
            }
            const localVarPath = `/Sync/Jobs/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports an action that occurred while offline.
         * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncOfflineactions: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postSyncOfflineactions.");
            }
            const localVarPath = `/Sync/OfflineActions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SyncServiceApiAxiosParamCreator = SyncServiceApiAxiosParamCreator;
/**
 * SyncServiceApi - functional programming interface
 * @export
 */
const SyncServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncByTargetidItems(targetId, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).deleteSyncByTargetidItems(targetId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncJobitemsById(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).deleteSyncJobitemsById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncJobsById(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).deleteSyncJobsById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets ready to download sync items.
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncItemsReady(targetId, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncItemsReady(targetId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync job items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobitems(options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncJobitems(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {string} name Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobitemsByIdAdditionalfiles(id, name, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncJobitemsByIdAdditionalfiles(id, name, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobitemsByIdFile(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncJobitemsByIdFile(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobs(options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncJobs(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobsById(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncJobsById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {string} [itemIds] ItemIds
         * @param {string} [parentId] ParentId
         * @param {string} [targetId] TargetId
         * @param {string} [category] Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncOptions(userId, itemIds, parentId, targetId, category, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncOptions(userId, itemIds, parentId, targetId, category, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncTargets(userId, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).getSyncTargets(userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync status for an item.
         * @param {SyncModelSyncedItemProgress} body SyncedItemProgress:
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncByItemidStatus(body, itemId, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncByItemidStatus(body, itemId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Syncs data between device and server
         * @param {SyncModelSyncDataRequest} body SyncDataRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncData(body, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncData(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} [itemIds] ItemIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncItemsCancel(itemIds, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncItemsCancel(itemIds, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Enables a cancelled or queued sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdEnable(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncJobitemsByIdEnable(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdMarkforremoval(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncJobitemsByIdMarkforremoval(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports that a sync job item has successfully been transferred.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdTransferred(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncJobitemsByIdTransferred(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Unmarks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdUnmarkforremoval(id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncJobitemsByIdUnmarkforremoval(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {SyncModelSyncJobRequest} body SyncJobRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobs(body, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncJobs(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a sync job.
         * @param {SyncSyncJob} body SyncJob:
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobsById(body, id, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncJobsById(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports an action that occurred while offline.
         * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncOfflineactions(body, options) {
            const localVarAxiosArgs = await (0, exports.SyncServiceApiAxiosParamCreator)(configuration).postSyncOfflineactions(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.SyncServiceApiFp = SyncServiceApiFp;
/**
 * SyncServiceApi - factory interface
 * @export
 */
const SyncServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncByTargetidItems(targetId, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .deleteSyncByTargetidItems(targetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobitemsById(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .deleteSyncJobitemsById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobsById(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .deleteSyncJobsById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets ready to download sync items.
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncItemsReady(targetId, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncItemsReady(targetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync job items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitems(options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncJobitems(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {string} name Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdAdditionalfiles(id, name, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncJobitemsByIdAdditionalfiles(id, name, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdFile(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncJobitemsByIdFile(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobs(options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncJobs(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobsById(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncJobsById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {string} [itemIds] ItemIds
         * @param {string} [parentId] ParentId
         * @param {string} [targetId] TargetId
         * @param {string} [category] Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncOptions(userId, itemIds, parentId, targetId, category, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncOptions(userId, itemIds, parentId, targetId, category, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncTargets(userId, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .getSyncTargets(userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync status for an item.
         * @param {SyncModelSyncedItemProgress} body SyncedItemProgress:
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncByItemidStatus(body, itemId, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncByItemidStatus(body, itemId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Syncs data between device and server
         * @param {SyncModelSyncDataRequest} body SyncDataRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncData(body, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncData(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} [itemIds] ItemIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncItemsCancel(itemIds, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncItemsCancel(itemIds, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Enables a cancelled or queued sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdEnable(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncJobitemsByIdEnable(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Marks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdMarkforremoval(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncJobitemsByIdMarkforremoval(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Reports that a sync job item has successfully been transferred.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdTransferred(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncJobitemsByIdTransferred(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Unmarks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdUnmarkforremoval(id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncJobitemsByIdUnmarkforremoval(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {SyncModelSyncJobRequest} body SyncJobRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobs(body, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncJobs(body, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a sync job.
         * @param {SyncSyncJob} body SyncJob:
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobsById(body, id, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncJobsById(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Reports an action that occurred while offline.
         * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncOfflineactions(body, options) {
            return (0, exports.SyncServiceApiFp)(configuration)
                .postSyncOfflineactions(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.SyncServiceApiFactory = SyncServiceApiFactory;
/**
 * SyncServiceApi - object-oriented interface
 * @export
 * @class SyncServiceApi
 * @extends {BaseAPI}
 */
class SyncServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Cancels items from a sync target
     * @param {string} targetId TargetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    deleteSyncByTargetidItems(targetId, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .deleteSyncByTargetidItems(targetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Cancels a sync job item
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    deleteSyncJobitemsById(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .deleteSyncJobitemsById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Cancels a sync job.
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    deleteSyncJobsById(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .deleteSyncJobsById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets ready to download sync items.
     * @param {string} targetId TargetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncItemsReady(targetId, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncItemsReady(targetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync job items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncJobitems(options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncJobitems(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a sync job item file
     * @param {string} id Id
     * @param {string} name Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncJobitemsByIdAdditionalfiles(id, name, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncJobitemsByIdAdditionalfiles(id, name, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a sync job item file
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncJobitemsByIdFile(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncJobitemsByIdFile(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync jobs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncJobs(options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncJobs(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a sync job.
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncJobsById(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncJobsById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a list of available sync targets.
     * @param {string} userId UserId
     * @param {string} [itemIds] ItemIds
     * @param {string} [parentId] ParentId
     * @param {string} [targetId] TargetId
     * @param {string} [category] Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncOptions(userId, itemIds, parentId, targetId, category, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncOptions(userId, itemIds, parentId, targetId, category, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a list of available sync targets.
     * @param {string} userId UserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    getSyncTargets(userId, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .getSyncTargets(userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync status for an item.
     * @param {SyncModelSyncedItemProgress} body SyncedItemProgress:
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncByItemidStatus(body, itemId, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncByItemidStatus(body, itemId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Syncs data between device and server
     * @param {SyncModelSyncDataRequest} body SyncDataRequest:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncData(body, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncData(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Cancels items from a sync target
     * @param {string} [itemIds] ItemIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncItemsCancel(itemIds, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncItemsCancel(itemIds, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Enables a cancelled or queued sync job item
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncJobitemsByIdEnable(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncJobitemsByIdEnable(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Marks a job item for removal
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncJobitemsByIdMarkforremoval(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncJobitemsByIdMarkforremoval(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Reports that a sync job item has successfully been transferred.
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncJobitemsByIdTransferred(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncJobitemsByIdTransferred(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Unmarks a job item for removal
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncJobitemsByIdUnmarkforremoval(id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncJobitemsByIdUnmarkforremoval(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync jobs.
     * @param {SyncModelSyncJobRequest} body SyncJobRequest:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncJobs(body, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncJobs(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a sync job.
     * @param {SyncSyncJob} body SyncJob:
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncJobsById(body, id, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncJobsById(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Reports an action that occurred while offline.
     * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    postSyncOfflineactions(body, options) {
        return (0, exports.SyncServiceApiFp)(this.configuration)
            .postSyncOfflineactions(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.SyncServiceApi = SyncServiceApi;
//# sourceMappingURL=sync-service-api.js.map