"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaInfoServiceApi = exports.MediaInfoServiceApiFactory = exports.MediaInfoServiceApiFp = exports.MediaInfoServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * MediaInfoServiceApi - axios parameter creator
 * @export
 */
const MediaInfoServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {string} id Item Id
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdPlaybackinfo: async (id, userId, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdPlaybackinfo.");
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getItemsByIdPlaybackinfo.");
            }
            const localVarPath = `/Items/{Id}/PlaybackInfo`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {number} size Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackBitratetest: async (size, options = {}) => {
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new base_1.RequiredError("size", "Required parameter size was null or undefined when calling getPlaybackBitratetest.");
            }
            const localVarPath = `/Playback/BitrateTest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (size !== undefined) {
                localVarQueryParameter["Size"] = size;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdPlaybackinfo: async (body, id, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postItemsByIdPlaybackinfo.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postItemsByIdPlaybackinfo.");
            }
            const localVarPath = `/Items/{Id}/PlaybackInfo`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsClose: async (liveStreamId, options = {}) => {
            // verify required parameter 'liveStreamId' is not null or undefined
            if (liveStreamId === null || liveStreamId === undefined) {
                throw new base_1.RequiredError("liveStreamId", "Required parameter liveStreamId was null or undefined when calling postLivestreamsClose.");
            }
            const localVarPath = `/LiveStreams/Close`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (liveStreamId !== undefined) {
                localVarQueryParameter["LiveStreamId"] = liveStreamId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsMediainfo: async (liveStreamId, options = {}) => {
            // verify required parameter 'liveStreamId' is not null or undefined
            if (liveStreamId === null || liveStreamId === undefined) {
                throw new base_1.RequiredError("liveStreamId", "Required parameter liveStreamId was null or undefined when calling postLivestreamsMediainfo.");
            }
            const localVarPath = `/LiveStreams/MediaInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (liveStreamId !== undefined) {
                localVarQueryParameter["LiveStreamId"] = liveStreamId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Opens a media source
         * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsOpen: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError("body", "Required parameter body was null or undefined when calling postLivestreamsOpen.");
            }
            const localVarPath = `/LiveStreams/Open`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            localVarHeaderParameter["Content-Type"] = "application/json";
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof body !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || "";
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MediaInfoServiceApiAxiosParamCreator = MediaInfoServiceApiAxiosParamCreator;
/**
 * MediaInfoServiceApi - functional programming interface
 * @export
 */
const MediaInfoServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {string} id Item Id
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdPlaybackinfo(id, userId, options) {
            const localVarAxiosArgs = await (0, exports.MediaInfoServiceApiAxiosParamCreator)(configuration).getItemsByIdPlaybackinfo(id, userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {number} size Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaybackBitratetest(size, options) {
            const localVarAxiosArgs = await (0, exports.MediaInfoServiceApiAxiosParamCreator)(configuration).getPlaybackBitratetest(size, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsByIdPlaybackinfo(body, id, options) {
            const localVarAxiosArgs = await (0, exports.MediaInfoServiceApiAxiosParamCreator)(configuration).postItemsByIdPlaybackinfo(body, id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLivestreamsClose(liveStreamId, options) {
            const localVarAxiosArgs = await (0, exports.MediaInfoServiceApiAxiosParamCreator)(configuration).postLivestreamsClose(liveStreamId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLivestreamsMediainfo(liveStreamId, options) {
            const localVarAxiosArgs = await (0, exports.MediaInfoServiceApiAxiosParamCreator)(configuration).postLivestreamsMediainfo(liveStreamId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Opens a media source
         * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLivestreamsOpen(body, options) {
            const localVarAxiosArgs = await (0, exports.MediaInfoServiceApiAxiosParamCreator)(configuration).postLivestreamsOpen(body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.MediaInfoServiceApiFp = MediaInfoServiceApiFp;
/**
 * MediaInfoServiceApi - factory interface
 * @export
 */
const MediaInfoServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {string} id Item Id
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdPlaybackinfo(id, userId, options) {
            return (0, exports.MediaInfoServiceApiFp)(configuration)
                .getItemsByIdPlaybackinfo(id, userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {number} size Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackBitratetest(size, options) {
            return (0, exports.MediaInfoServiceApiFp)(configuration)
                .getPlaybackBitratetest(size, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest:
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdPlaybackinfo(body, id, options) {
            return (0, exports.MediaInfoServiceApiFp)(configuration)
                .postItemsByIdPlaybackinfo(body, id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsClose(liveStreamId, options) {
            return (0, exports.MediaInfoServiceApiFp)(configuration)
                .postLivestreamsClose(liveStreamId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsMediainfo(liveStreamId, options) {
            return (0, exports.MediaInfoServiceApiFp)(configuration)
                .postLivestreamsMediainfo(liveStreamId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Opens a media source
         * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsOpen(body, options) {
            return (0, exports.MediaInfoServiceApiFp)(configuration)
                .postLivestreamsOpen(body, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.MediaInfoServiceApiFactory = MediaInfoServiceApiFactory;
/**
 * MediaInfoServiceApi - object-oriented interface
 * @export
 * @class MediaInfoServiceApi
 * @extends {BaseAPI}
 */
class MediaInfoServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets live playback media info for an item
     * @param {string} id Item Id
     * @param {string} userId User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    getItemsByIdPlaybackinfo(id, userId, options) {
        return (0, exports.MediaInfoServiceApiFp)(this.configuration)
            .getItemsByIdPlaybackinfo(id, userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {number} size Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    getPlaybackBitratetest(size, options) {
        return (0, exports.MediaInfoServiceApiFp)(this.configuration)
            .getPlaybackBitratetest(size, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets live playback media info for an item
     * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest:
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    postItemsByIdPlaybackinfo(body, id, options) {
        return (0, exports.MediaInfoServiceApiFp)(this.configuration)
            .postItemsByIdPlaybackinfo(body, id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Closes a media source
     * @param {string} liveStreamId LiveStreamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    postLivestreamsClose(liveStreamId, options) {
        return (0, exports.MediaInfoServiceApiFp)(this.configuration)
            .postLivestreamsClose(liveStreamId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Closes a media source
     * @param {string} liveStreamId LiveStreamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    postLivestreamsMediainfo(liveStreamId, options) {
        return (0, exports.MediaInfoServiceApiFp)(this.configuration)
            .postLivestreamsMediainfo(liveStreamId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Opens a media source
     * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    postLivestreamsOpen(body, options) {
        return (0, exports.MediaInfoServiceApiFp)(this.configuration)
            .postLivestreamsOpen(body, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.MediaInfoServiceApi = MediaInfoServiceApi;
//# sourceMappingURL=media-info-service-api.js.map