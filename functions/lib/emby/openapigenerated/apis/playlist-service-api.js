"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaylistServiceApi = exports.PlaylistServiceApiFactory = exports.PlaylistServiceApiFp = exports.PlaylistServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * PlaylistServiceApi - axios parameter creator
 * @export
 */
const PlaylistServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Removes items from a playlist
         * @param {string} id
         * @param {string} entryIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaylistsByIdItems: async (id, entryIds, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deletePlaylistsByIdItems.");
            }
            // verify required parameter 'entryIds' is not null or undefined
            if (entryIds === null || entryIds === undefined) {
                throw new base_1.RequiredError("entryIds", "Required parameter entryIds was null or undefined when calling deletePlaylistsByIdItems.");
            }
            const localVarPath = `/Playlists/{Id}/Items`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (entryIds !== undefined) {
                localVarQueryParameter["EntryIds"] = entryIds;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the original items of a playlist
         * @param {string} id
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsByIdItems: async (id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getPlaylistsByIdItems.");
            }
            const localVarPath = `/Playlists/{Id}/Items`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (fields !== undefined) {
                localVarQueryParameter["Fields"] = fields;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Creates a new playlist
         * @param {string} [name] The name of the new playlist.
         * @param {string} [ids] Item Ids to add to the playlist
         * @param {string} [mediaType] The playlist media type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylists: async (name, ids, mediaType, options = {}) => {
            const localVarPath = `/Playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (name !== undefined) {
                localVarQueryParameter["Name"] = name;
            }
            if (ids !== undefined) {
                localVarQueryParameter["Ids"] = ids;
            }
            if (mediaType !== undefined) {
                localVarQueryParameter["MediaType"] = mediaType;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Adds items to a playlist
         * @param {string} ids Item id, comma delimited
         * @param {string} id
         * @param {string} [userId] User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItems: async (ids, id, userId, options = {}) => {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new base_1.RequiredError("ids", "Required parameter ids was null or undefined when calling postPlaylistsByIdItems.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postPlaylistsByIdItems.");
            }
            const localVarPath = `/Playlists/{Id}/Items`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (ids !== undefined) {
                localVarQueryParameter["Ids"] = ids;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Moves a playlist item
         * @param {number} itemId ItemId
         * @param {string} id
         * @param {number} newIndex NewIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItemsByItemidMoveByNewindex: async (itemId, id, newIndex, options = {}) => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError("itemId", "Required parameter itemId was null or undefined when calling postPlaylistsByIdItemsByItemidMoveByNewindex.");
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postPlaylistsByIdItemsByItemidMoveByNewindex.");
            }
            // verify required parameter 'newIndex' is not null or undefined
            if (newIndex === null || newIndex === undefined) {
                throw new base_1.RequiredError("newIndex", "Required parameter newIndex was null or undefined when calling postPlaylistsByIdItemsByItemidMoveByNewindex.");
            }
            const localVarPath = `/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}`
                .replace(`{${"ItemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"NewIndex"}}`, encodeURIComponent(String(newIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PlaylistServiceApiAxiosParamCreator = PlaylistServiceApiAxiosParamCreator;
/**
 * PlaylistServiceApi - functional programming interface
 * @export
 */
const PlaylistServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Removes items from a playlist
         * @param {string} id
         * @param {string} entryIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlaylistsByIdItems(id, entryIds, options) {
            const localVarAxiosArgs = await (0, exports.PlaylistServiceApiAxiosParamCreator)(configuration).deletePlaylistsByIdItems(id, entryIds, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the original items of a playlist
         * @param {string} id
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            const localVarAxiosArgs = await (0, exports.PlaylistServiceApiAxiosParamCreator)(configuration).getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Creates a new playlist
         * @param {string} [name] The name of the new playlist.
         * @param {string} [ids] Item Ids to add to the playlist
         * @param {string} [mediaType] The playlist media type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlaylists(name, ids, mediaType, options) {
            const localVarAxiosArgs = await (0, exports.PlaylistServiceApiAxiosParamCreator)(configuration).postPlaylists(name, ids, mediaType, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Adds items to a playlist
         * @param {string} ids Item id, comma delimited
         * @param {string} id
         * @param {string} [userId] User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlaylistsByIdItems(ids, id, userId, options) {
            const localVarAxiosArgs = await (0, exports.PlaylistServiceApiAxiosParamCreator)(configuration).postPlaylistsByIdItems(ids, id, userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Moves a playlist item
         * @param {number} itemId ItemId
         * @param {string} id
         * @param {number} newIndex NewIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options) {
            const localVarAxiosArgs = await (0, exports.PlaylistServiceApiAxiosParamCreator)(configuration).postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.PlaylistServiceApiFp = PlaylistServiceApiFp;
/**
 * PlaylistServiceApi - factory interface
 * @export
 */
const PlaylistServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Removes items from a playlist
         * @param {string} id
         * @param {string} entryIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaylistsByIdItems(id, entryIds, options) {
            return (0, exports.PlaylistServiceApiFp)(configuration)
                .deletePlaylistsByIdItems(id, entryIds, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets the original items of a playlist
         * @param {string} id
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return (0, exports.PlaylistServiceApiFp)(configuration)
                .getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Creates a new playlist
         * @param {string} [name] The name of the new playlist.
         * @param {string} [ids] Item Ids to add to the playlist
         * @param {string} [mediaType] The playlist media type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylists(name, ids, mediaType, options) {
            return (0, exports.PlaylistServiceApiFp)(configuration)
                .postPlaylists(name, ids, mediaType, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Adds items to a playlist
         * @param {string} ids Item id, comma delimited
         * @param {string} id
         * @param {string} [userId] User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItems(ids, id, userId, options) {
            return (0, exports.PlaylistServiceApiFp)(configuration)
                .postPlaylistsByIdItems(ids, id, userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Moves a playlist item
         * @param {number} itemId ItemId
         * @param {string} id
         * @param {number} newIndex NewIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options) {
            return (0, exports.PlaylistServiceApiFp)(configuration)
                .postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.PlaylistServiceApiFactory = PlaylistServiceApiFactory;
/**
 * PlaylistServiceApi - object-oriented interface
 * @export
 * @class PlaylistServiceApi
 * @extends {BaseAPI}
 */
class PlaylistServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Removes items from a playlist
     * @param {string} id
     * @param {string} entryIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    deletePlaylistsByIdItems(id, entryIds, options) {
        return (0, exports.PlaylistServiceApiFp)(this.configuration)
            .deletePlaylistsByIdItems(id, entryIds, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets the original items of a playlist
     * @param {string} id
     * @param {string} [userId] User Id
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
        return (0, exports.PlaylistServiceApiFp)(this.configuration)
            .getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Creates a new playlist
     * @param {string} [name] The name of the new playlist.
     * @param {string} [ids] Item Ids to add to the playlist
     * @param {string} [mediaType] The playlist media type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    postPlaylists(name, ids, mediaType, options) {
        return (0, exports.PlaylistServiceApiFp)(this.configuration)
            .postPlaylists(name, ids, mediaType, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Adds items to a playlist
     * @param {string} ids Item id, comma delimited
     * @param {string} id
     * @param {string} [userId] User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    postPlaylistsByIdItems(ids, id, userId, options) {
        return (0, exports.PlaylistServiceApiFp)(this.configuration)
            .postPlaylistsByIdItems(ids, id, userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Moves a playlist item
     * @param {number} itemId ItemId
     * @param {string} id
     * @param {number} newIndex NewIndex
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options) {
        return (0, exports.PlaylistServiceApiFp)(this.configuration)
            .postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.PlaylistServiceApi = PlaylistServiceApi;
//# sourceMappingURL=playlist-service-api.js.map