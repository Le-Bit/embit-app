"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioServiceApi = exports.AudioServiceApiFactory = exports.AudioServiceApiFp = exports.AudioServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * AudioServiceApi - axios parameter creator
 * @export
 */
const AudioServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdByContainer: async (id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getAudioByIdByContainer.");
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new base_1.RequiredError("container", "Required parameter container was null or undefined when calling getAudioByIdByContainer.");
            }
            const localVarPath = `/Audio/{Id}/stream.{Container}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Container"}}`, encodeURIComponent(String(container)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceProfileId !== undefined) {
                localVarQueryParameter["DeviceProfileId"] = deviceProfileId;
            }
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (audioCodec !== undefined) {
                localVarQueryParameter["AudioCodec"] = audioCodec;
            }
            if (enableAutoStreamCopy !== undefined) {
                localVarQueryParameter["EnableAutoStreamCopy"] = enableAutoStreamCopy;
            }
            if (audioSampleRate !== undefined) {
                localVarQueryParameter["AudioSampleRate"] = audioSampleRate;
            }
            if (audioBitRate !== undefined) {
                localVarQueryParameter["AudioBitRate"] = audioBitRate;
            }
            if (audioChannels !== undefined) {
                localVarQueryParameter["AudioChannels"] = audioChannels;
            }
            if (maxAudioChannels !== undefined) {
                localVarQueryParameter["MaxAudioChannels"] = maxAudioChannels;
            }
            if (_static !== undefined) {
                localVarQueryParameter["Static"] = _static;
            }
            if (profile !== undefined) {
                localVarQueryParameter["Profile"] = profile;
            }
            if (level !== undefined) {
                localVarQueryParameter["Level"] = level;
            }
            if (framerate !== undefined) {
                localVarQueryParameter["Framerate"] = framerate;
            }
            if (maxFramerate !== undefined) {
                localVarQueryParameter["MaxFramerate"] = maxFramerate;
            }
            if (copyTimestamps !== undefined) {
                localVarQueryParameter["CopyTimestamps"] = copyTimestamps;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            if (width !== undefined) {
                localVarQueryParameter["Width"] = width;
            }
            if (height !== undefined) {
                localVarQueryParameter["Height"] = height;
            }
            if (maxWidth !== undefined) {
                localVarQueryParameter["MaxWidth"] = maxWidth;
            }
            if (maxHeight !== undefined) {
                localVarQueryParameter["MaxHeight"] = maxHeight;
            }
            if (videoBitRate !== undefined) {
                localVarQueryParameter["VideoBitRate"] = videoBitRate;
            }
            if (subtitleStreamIndex !== undefined) {
                localVarQueryParameter["SubtitleStreamIndex"] = subtitleStreamIndex;
            }
            if (subtitleMethod !== undefined) {
                localVarQueryParameter["SubtitleMethod"] = subtitleMethod;
            }
            if (maxRefFrames !== undefined) {
                localVarQueryParameter["MaxRefFrames"] = maxRefFrames;
            }
            if (maxVideoBitDepth !== undefined) {
                localVarQueryParameter["MaxVideoBitDepth"] = maxVideoBitDepth;
            }
            if (videoCodec !== undefined) {
                localVarQueryParameter["VideoCodec"] = videoCodec;
            }
            if (audioStreamIndex !== undefined) {
                localVarQueryParameter["AudioStreamIndex"] = audioStreamIndex;
            }
            if (videoStreamIndex !== undefined) {
                localVarQueryParameter["VideoStreamIndex"] = videoStreamIndex;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdStream: async (id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getAudioByIdStream.");
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new base_1.RequiredError("container", "Required parameter container was null or undefined when calling getAudioByIdStream.");
            }
            const localVarPath = `/Audio/{Id}/stream`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceProfileId !== undefined) {
                localVarQueryParameter["DeviceProfileId"] = deviceProfileId;
            }
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (container !== undefined) {
                localVarQueryParameter["Container"] = container;
            }
            if (audioCodec !== undefined) {
                localVarQueryParameter["AudioCodec"] = audioCodec;
            }
            if (enableAutoStreamCopy !== undefined) {
                localVarQueryParameter["EnableAutoStreamCopy"] = enableAutoStreamCopy;
            }
            if (audioSampleRate !== undefined) {
                localVarQueryParameter["AudioSampleRate"] = audioSampleRate;
            }
            if (audioBitRate !== undefined) {
                localVarQueryParameter["AudioBitRate"] = audioBitRate;
            }
            if (audioChannels !== undefined) {
                localVarQueryParameter["AudioChannels"] = audioChannels;
            }
            if (maxAudioChannels !== undefined) {
                localVarQueryParameter["MaxAudioChannels"] = maxAudioChannels;
            }
            if (_static !== undefined) {
                localVarQueryParameter["Static"] = _static;
            }
            if (profile !== undefined) {
                localVarQueryParameter["Profile"] = profile;
            }
            if (level !== undefined) {
                localVarQueryParameter["Level"] = level;
            }
            if (framerate !== undefined) {
                localVarQueryParameter["Framerate"] = framerate;
            }
            if (maxFramerate !== undefined) {
                localVarQueryParameter["MaxFramerate"] = maxFramerate;
            }
            if (copyTimestamps !== undefined) {
                localVarQueryParameter["CopyTimestamps"] = copyTimestamps;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            if (width !== undefined) {
                localVarQueryParameter["Width"] = width;
            }
            if (height !== undefined) {
                localVarQueryParameter["Height"] = height;
            }
            if (maxWidth !== undefined) {
                localVarQueryParameter["MaxWidth"] = maxWidth;
            }
            if (maxHeight !== undefined) {
                localVarQueryParameter["MaxHeight"] = maxHeight;
            }
            if (videoBitRate !== undefined) {
                localVarQueryParameter["VideoBitRate"] = videoBitRate;
            }
            if (subtitleStreamIndex !== undefined) {
                localVarQueryParameter["SubtitleStreamIndex"] = subtitleStreamIndex;
            }
            if (subtitleMethod !== undefined) {
                localVarQueryParameter["SubtitleMethod"] = subtitleMethod;
            }
            if (maxRefFrames !== undefined) {
                localVarQueryParameter["MaxRefFrames"] = maxRefFrames;
            }
            if (maxVideoBitDepth !== undefined) {
                localVarQueryParameter["MaxVideoBitDepth"] = maxVideoBitDepth;
            }
            if (videoCodec !== undefined) {
                localVarQueryParameter["VideoCodec"] = videoCodec;
            }
            if (audioStreamIndex !== undefined) {
                localVarQueryParameter["AudioStreamIndex"] = audioStreamIndex;
            }
            if (videoStreamIndex !== undefined) {
                localVarQueryParameter["VideoStreamIndex"] = videoStreamIndex;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdByContainer: async (id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling headAudioByIdByContainer.");
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new base_1.RequiredError("container", "Required parameter container was null or undefined when calling headAudioByIdByContainer.");
            }
            const localVarPath = `/Audio/{Id}/stream.{Container}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Container"}}`, encodeURIComponent(String(container)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "HEAD" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceProfileId !== undefined) {
                localVarQueryParameter["DeviceProfileId"] = deviceProfileId;
            }
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (audioCodec !== undefined) {
                localVarQueryParameter["AudioCodec"] = audioCodec;
            }
            if (enableAutoStreamCopy !== undefined) {
                localVarQueryParameter["EnableAutoStreamCopy"] = enableAutoStreamCopy;
            }
            if (audioSampleRate !== undefined) {
                localVarQueryParameter["AudioSampleRate"] = audioSampleRate;
            }
            if (audioBitRate !== undefined) {
                localVarQueryParameter["AudioBitRate"] = audioBitRate;
            }
            if (audioChannels !== undefined) {
                localVarQueryParameter["AudioChannels"] = audioChannels;
            }
            if (maxAudioChannels !== undefined) {
                localVarQueryParameter["MaxAudioChannels"] = maxAudioChannels;
            }
            if (_static !== undefined) {
                localVarQueryParameter["Static"] = _static;
            }
            if (profile !== undefined) {
                localVarQueryParameter["Profile"] = profile;
            }
            if (level !== undefined) {
                localVarQueryParameter["Level"] = level;
            }
            if (framerate !== undefined) {
                localVarQueryParameter["Framerate"] = framerate;
            }
            if (maxFramerate !== undefined) {
                localVarQueryParameter["MaxFramerate"] = maxFramerate;
            }
            if (copyTimestamps !== undefined) {
                localVarQueryParameter["CopyTimestamps"] = copyTimestamps;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            if (width !== undefined) {
                localVarQueryParameter["Width"] = width;
            }
            if (height !== undefined) {
                localVarQueryParameter["Height"] = height;
            }
            if (maxWidth !== undefined) {
                localVarQueryParameter["MaxWidth"] = maxWidth;
            }
            if (maxHeight !== undefined) {
                localVarQueryParameter["MaxHeight"] = maxHeight;
            }
            if (videoBitRate !== undefined) {
                localVarQueryParameter["VideoBitRate"] = videoBitRate;
            }
            if (subtitleStreamIndex !== undefined) {
                localVarQueryParameter["SubtitleStreamIndex"] = subtitleStreamIndex;
            }
            if (subtitleMethod !== undefined) {
                localVarQueryParameter["SubtitleMethod"] = subtitleMethod;
            }
            if (maxRefFrames !== undefined) {
                localVarQueryParameter["MaxRefFrames"] = maxRefFrames;
            }
            if (maxVideoBitDepth !== undefined) {
                localVarQueryParameter["MaxVideoBitDepth"] = maxVideoBitDepth;
            }
            if (videoCodec !== undefined) {
                localVarQueryParameter["VideoCodec"] = videoCodec;
            }
            if (audioStreamIndex !== undefined) {
                localVarQueryParameter["AudioStreamIndex"] = audioStreamIndex;
            }
            if (videoStreamIndex !== undefined) {
                localVarQueryParameter["VideoStreamIndex"] = videoStreamIndex;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdStream: async (id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling headAudioByIdStream.");
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new base_1.RequiredError("container", "Required parameter container was null or undefined when calling headAudioByIdStream.");
            }
            const localVarPath = `/Audio/{Id}/stream`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "HEAD" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (deviceProfileId !== undefined) {
                localVarQueryParameter["DeviceProfileId"] = deviceProfileId;
            }
            if (deviceId !== undefined) {
                localVarQueryParameter["DeviceId"] = deviceId;
            }
            if (container !== undefined) {
                localVarQueryParameter["Container"] = container;
            }
            if (audioCodec !== undefined) {
                localVarQueryParameter["AudioCodec"] = audioCodec;
            }
            if (enableAutoStreamCopy !== undefined) {
                localVarQueryParameter["EnableAutoStreamCopy"] = enableAutoStreamCopy;
            }
            if (audioSampleRate !== undefined) {
                localVarQueryParameter["AudioSampleRate"] = audioSampleRate;
            }
            if (audioBitRate !== undefined) {
                localVarQueryParameter["AudioBitRate"] = audioBitRate;
            }
            if (audioChannels !== undefined) {
                localVarQueryParameter["AudioChannels"] = audioChannels;
            }
            if (maxAudioChannels !== undefined) {
                localVarQueryParameter["MaxAudioChannels"] = maxAudioChannels;
            }
            if (_static !== undefined) {
                localVarQueryParameter["Static"] = _static;
            }
            if (profile !== undefined) {
                localVarQueryParameter["Profile"] = profile;
            }
            if (level !== undefined) {
                localVarQueryParameter["Level"] = level;
            }
            if (framerate !== undefined) {
                localVarQueryParameter["Framerate"] = framerate;
            }
            if (maxFramerate !== undefined) {
                localVarQueryParameter["MaxFramerate"] = maxFramerate;
            }
            if (copyTimestamps !== undefined) {
                localVarQueryParameter["CopyTimestamps"] = copyTimestamps;
            }
            if (startTimeTicks !== undefined) {
                localVarQueryParameter["StartTimeTicks"] = startTimeTicks;
            }
            if (width !== undefined) {
                localVarQueryParameter["Width"] = width;
            }
            if (height !== undefined) {
                localVarQueryParameter["Height"] = height;
            }
            if (maxWidth !== undefined) {
                localVarQueryParameter["MaxWidth"] = maxWidth;
            }
            if (maxHeight !== undefined) {
                localVarQueryParameter["MaxHeight"] = maxHeight;
            }
            if (videoBitRate !== undefined) {
                localVarQueryParameter["VideoBitRate"] = videoBitRate;
            }
            if (subtitleStreamIndex !== undefined) {
                localVarQueryParameter["SubtitleStreamIndex"] = subtitleStreamIndex;
            }
            if (subtitleMethod !== undefined) {
                localVarQueryParameter["SubtitleMethod"] = subtitleMethod;
            }
            if (maxRefFrames !== undefined) {
                localVarQueryParameter["MaxRefFrames"] = maxRefFrames;
            }
            if (maxVideoBitDepth !== undefined) {
                localVarQueryParameter["MaxVideoBitDepth"] = maxVideoBitDepth;
            }
            if (videoCodec !== undefined) {
                localVarQueryParameter["VideoCodec"] = videoCodec;
            }
            if (audioStreamIndex !== undefined) {
                localVarQueryParameter["AudioStreamIndex"] = audioStreamIndex;
            }
            if (videoStreamIndex !== undefined) {
                localVarQueryParameter["VideoStreamIndex"] = videoStreamIndex;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AudioServiceApiAxiosParamCreator = AudioServiceApiAxiosParamCreator;
/**
 * AudioServiceApi - functional programming interface
 * @export
 */
const AudioServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            const localVarAxiosArgs = await (0, exports.AudioServiceApiAxiosParamCreator)(configuration).getAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            const localVarAxiosArgs = await (0, exports.AudioServiceApiAxiosParamCreator)(configuration).getAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            const localVarAxiosArgs = await (0, exports.AudioServiceApiAxiosParamCreator)(configuration).headAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            const localVarAxiosArgs = await (0, exports.AudioServiceApiAxiosParamCreator)(configuration).headAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.AudioServiceApiFp = AudioServiceApiFp;
/**
 * AudioServiceApi - factory interface
 * @export
 */
const AudioServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            return (0, exports.AudioServiceApiFp)(configuration)
                .getAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            return (0, exports.AudioServiceApiFp)(configuration)
                .getAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            return (0, exports.AudioServiceApiFp)(configuration)
                .headAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container Container
         * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
         * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
         * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
         * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
         * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
         * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
         * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
         * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
         * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
         * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
         * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
         * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
         * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
         * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
         * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
         * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
         * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
         * @param {number} [maxRefFrames] Optional.
         * @param {number} [maxVideoBitDepth] Optional.
         * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
         * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
         * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
            return (0, exports.AudioServiceApiFp)(configuration)
                .headAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.AudioServiceApiFactory = AudioServiceApiFactory;
/**
 * AudioServiceApi - object-oriented interface
 * @export
 * @class AudioServiceApi
 * @extends {BaseAPI}
 */
class AudioServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container Container
     * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
     * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
     * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
     * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
     * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
     * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
     * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
     * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
     * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
     * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {number} [maxRefFrames] Optional.
     * @param {number} [maxVideoBitDepth] Optional.
     * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
     * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioServiceApi
     */
    getAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
        return (0, exports.AudioServiceApiFp)(this.configuration)
            .getAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container Container
     * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
     * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
     * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
     * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
     * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
     * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
     * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
     * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
     * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
     * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {number} [maxRefFrames] Optional.
     * @param {number} [maxVideoBitDepth] Optional.
     * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
     * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioServiceApi
     */
    getAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
        return (0, exports.AudioServiceApiFp)(this.configuration)
            .getAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container Container
     * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
     * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
     * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
     * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
     * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
     * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
     * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
     * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
     * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
     * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {number} [maxRefFrames] Optional.
     * @param {number} [maxVideoBitDepth] Optional.
     * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
     * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioServiceApi
     */
    headAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
        return (0, exports.AudioServiceApiFp)(this.configuration)
            .headAudioByIdByContainer(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container Container
     * @param {string} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {string} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma.
     * @param {boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100
     * @param {number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2
     * @param {number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2
     * @param {boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
     * @param {string} [profile] Optional. Specify a specific h264 profile, e.g. main, baseline, high.
     * @param {string} [level] Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
     * @param {number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {number} [maxWidth] Optional. The maximum horizontal resolution of the encoded video.
     * @param {number} [maxHeight] Optional. The maximum vertical resolution of the encoded video.
     * @param {number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {string} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {number} [maxRefFrames] Optional.
     * @param {number} [maxVideoBitDepth] Optional.
     * @param {string} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv.
     * @param {number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioServiceApi
     */
    headAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options) {
        return (0, exports.AudioServiceApiFp)(this.configuration)
            .headAudioByIdStream(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, _static, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.AudioServiceApi = AudioServiceApi;
//# sourceMappingURL=audio-service-api.js.map