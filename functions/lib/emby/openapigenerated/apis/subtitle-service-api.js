"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleServiceApi = exports.SubtitleServiceApiFactory = exports.SubtitleServiceApiFp = exports.SubtitleServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * SubtitleServiceApi - axios parameter creator
 * @export
 */
const SubtitleServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an external subtitle file
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideosByIdSubtitlesByIndex: async (id, mediaSourceId, index, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling deleteVideosByIdSubtitlesByIndex.");
            }
            // verify required parameter 'mediaSourceId' is not null or undefined
            if (mediaSourceId === null || mediaSourceId === undefined) {
                throw new base_1.RequiredError("mediaSourceId", "Required parameter mediaSourceId was null or undefined when calling deleteVideosByIdSubtitlesByIndex.");
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new base_1.RequiredError("index", "Required parameter index was null or undefined when calling deleteVideosByIdSubtitlesByIndex.");
            }
            const localVarPath = `/Videos/{Id}/Subtitles/{Index}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Index"}}`, encodeURIComponent(String(index)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (mediaSourceId !== undefined) {
                localVarQueryParameter["MediaSourceId"] = mediaSourceId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {string} language Language
         * @param {boolean} [isPerfectMatch] IsPerfectMatch
         * @param {boolean} [isForced] IsForced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemotesearchSubtitlesByLanguage: async (id, mediaSourceId, language, isPerfectMatch, isForced, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdRemotesearchSubtitlesByLanguage.");
            }
            // verify required parameter 'mediaSourceId' is not null or undefined
            if (mediaSourceId === null || mediaSourceId === undefined) {
                throw new base_1.RequiredError("mediaSourceId", "Required parameter mediaSourceId was null or undefined when calling getItemsByIdRemotesearchSubtitlesByLanguage.");
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new base_1.RequiredError("language", "Required parameter language was null or undefined when calling getItemsByIdRemotesearchSubtitlesByLanguage.");
            }
            const localVarPath = `/Items/{Id}/RemoteSearch/Subtitles/{Language}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Language"}}`, encodeURIComponent(String(language)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (mediaSourceId !== undefined) {
                localVarQueryParameter["MediaSourceId"] = mediaSourceId;
            }
            if (isPerfectMatch !== undefined) {
                localVarQueryParameter["IsPerfectMatch"] = isPerfectMatch;
            }
            if (isForced !== undefined) {
                localVarQueryParameter["IsForced"] = isForced;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersSubtitlesSubtitlesById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getProvidersSubtitlesSubtitlesById.");
            }
            const localVarPath = `/Providers/Subtitles/Subtitles/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} [startPositionTicks] StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByFormat: async (id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.");
            }
            // verify required parameter 'mediaSourceId' is not null or undefined
            if (mediaSourceId === null || mediaSourceId === undefined) {
                throw new base_1.RequiredError("mediaSourceId", "Required parameter mediaSourceId was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.");
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new base_1.RequiredError("index", "Required parameter index was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.");
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new base_1.RequiredError("format", "Required parameter format was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.");
            }
            const localVarPath = `/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"MediaSourceId"}}`, encodeURIComponent(String(mediaSourceId)))
                .replace(`{${"Index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"Format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (startPositionTicks !== undefined) {
                localVarQueryParameter["StartPositionTicks"] = startPositionTicks;
            }
            if (endPositionTicks !== undefined) {
                localVarQueryParameter["EndPositionTicks"] = endPositionTicks;
            }
            if (copyTimestamps !== undefined) {
                localVarQueryParameter["CopyTimestamps"] = copyTimestamps;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} startPositionTicks StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat: async (id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.");
            }
            // verify required parameter 'mediaSourceId' is not null or undefined
            if (mediaSourceId === null || mediaSourceId === undefined) {
                throw new base_1.RequiredError("mediaSourceId", "Required parameter mediaSourceId was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.");
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new base_1.RequiredError("index", "Required parameter index was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.");
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new base_1.RequiredError("format", "Required parameter format was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.");
            }
            // verify required parameter 'startPositionTicks' is not null or undefined
            if (startPositionTicks === null || startPositionTicks === undefined) {
                throw new base_1.RequiredError("startPositionTicks", "Required parameter startPositionTicks was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.");
            }
            const localVarPath = `/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"MediaSourceId"}}`, encodeURIComponent(String(mediaSourceId)))
                .replace(`{${"Index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"Format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"StartPositionTicks"}}`, encodeURIComponent(String(startPositionTicks)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (endPositionTicks !== undefined) {
                localVarQueryParameter["EndPositionTicks"] = endPositionTicks;
            }
            if (copyTimestamps !== undefined) {
                localVarQueryParameter["CopyTimestamps"] = copyTimestamps;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname +
                    localVarUrlObj.search +
                    localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {string} subtitleId SubtitleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRemotesearchSubtitlesBySubtitleid: async (id, mediaSourceId, subtitleId, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postItemsByIdRemotesearchSubtitlesBySubtitleid.");
            }
            // verify required parameter 'mediaSourceId' is not null or undefined
            if (mediaSourceId === null || mediaSourceId === undefined) {
                throw new base_1.RequiredError("mediaSourceId", "Required parameter mediaSourceId was null or undefined when calling postItemsByIdRemotesearchSubtitlesBySubtitleid.");
            }
            // verify required parameter 'subtitleId' is not null or undefined
            if (subtitleId === null || subtitleId === undefined) {
                throw new base_1.RequiredError("subtitleId", "Required parameter subtitleId was null or undefined when calling postItemsByIdRemotesearchSubtitlesBySubtitleid.");
            }
            const localVarPath = `/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"SubtitleId"}}`, encodeURIComponent(String(subtitleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (mediaSourceId !== undefined) {
                localVarQueryParameter["MediaSourceId"] = mediaSourceId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SubtitleServiceApiAxiosParamCreator = SubtitleServiceApiAxiosParamCreator;
/**
 * SubtitleServiceApi - functional programming interface
 * @export
 */
const SubtitleServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an external subtitle file
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVideosByIdSubtitlesByIndex(id, mediaSourceId, index, options) {
            const localVarAxiosArgs = await (0, exports.SubtitleServiceApiAxiosParamCreator)(configuration).deleteVideosByIdSubtitlesByIndex(id, mediaSourceId, index, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {string} language Language
         * @param {boolean} [isPerfectMatch] IsPerfectMatch
         * @param {boolean} [isForced] IsForced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdRemotesearchSubtitlesByLanguage(id, mediaSourceId, language, isPerfectMatch, isForced, options) {
            const localVarAxiosArgs = await (0, exports.SubtitleServiceApiAxiosParamCreator)(configuration).getItemsByIdRemotesearchSubtitlesByLanguage(id, mediaSourceId, language, isPerfectMatch, isForced, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvidersSubtitlesSubtitlesById(id, options) {
            const localVarAxiosArgs = await (0, exports.SubtitleServiceApiAxiosParamCreator)(configuration).getProvidersSubtitlesSubtitlesById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} [startPositionTicks] StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options) {
            const localVarAxiosArgs = await (0, exports.SubtitleServiceApiAxiosParamCreator)(configuration).getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} startPositionTicks StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options) {
            const localVarAxiosArgs = await (0, exports.SubtitleServiceApiAxiosParamCreator)(configuration).getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {string} subtitleId SubtitleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsByIdRemotesearchSubtitlesBySubtitleid(id, mediaSourceId, subtitleId, options) {
            const localVarAxiosArgs = await (0, exports.SubtitleServiceApiAxiosParamCreator)(configuration).postItemsByIdRemotesearchSubtitlesBySubtitleid(id, mediaSourceId, subtitleId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.SubtitleServiceApiFp = SubtitleServiceApiFp;
/**
 * SubtitleServiceApi - factory interface
 * @export
 */
const SubtitleServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an external subtitle file
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideosByIdSubtitlesByIndex(id, mediaSourceId, index, options) {
            return (0, exports.SubtitleServiceApiFp)(configuration)
                .deleteVideosByIdSubtitlesByIndex(id, mediaSourceId, index, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {string} language Language
         * @param {boolean} [isPerfectMatch] IsPerfectMatch
         * @param {boolean} [isForced] IsForced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemotesearchSubtitlesByLanguage(id, mediaSourceId, language, isPerfectMatch, isForced, options) {
            return (0, exports.SubtitleServiceApiFp)(configuration)
                .getItemsByIdRemotesearchSubtitlesByLanguage(id, mediaSourceId, language, isPerfectMatch, isForced, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersSubtitlesSubtitlesById(id, options) {
            return (0, exports.SubtitleServiceApiFp)(configuration)
                .getProvidersSubtitlesSubtitlesById(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} [startPositionTicks] StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options) {
            return (0, exports.SubtitleServiceApiFp)(configuration)
                .getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} startPositionTicks StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options) {
            return (0, exports.SubtitleServiceApiFp)(configuration)
                .getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {string} subtitleId SubtitleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRemotesearchSubtitlesBySubtitleid(id, mediaSourceId, subtitleId, options) {
            return (0, exports.SubtitleServiceApiFp)(configuration)
                .postItemsByIdRemotesearchSubtitlesBySubtitleid(id, mediaSourceId, subtitleId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.SubtitleServiceApiFactory = SubtitleServiceApiFactory;
/**
 * SubtitleServiceApi - object-oriented interface
 * @export
 * @class SubtitleServiceApi
 * @extends {BaseAPI}
 */
class SubtitleServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Deletes an external subtitle file
     * @param {string} id Item Id
     * @param {string} mediaSourceId MediaSourceId
     * @param {number} index The subtitle stream index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    deleteVideosByIdSubtitlesByIndex(id, mediaSourceId, index, options) {
        return (0, exports.SubtitleServiceApiFp)(this.configuration)
            .deleteVideosByIdSubtitlesByIndex(id, mediaSourceId, index, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {string} id Item Id
     * @param {string} mediaSourceId MediaSourceId
     * @param {string} language Language
     * @param {boolean} [isPerfectMatch] IsPerfectMatch
     * @param {boolean} [isForced] IsForced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    getItemsByIdRemotesearchSubtitlesByLanguage(id, mediaSourceId, language, isPerfectMatch, isForced, options) {
        return (0, exports.SubtitleServiceApiFp)(this.configuration)
            .getItemsByIdRemotesearchSubtitlesByLanguage(id, mediaSourceId, language, isPerfectMatch, isForced, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    getProvidersSubtitlesSubtitlesById(id, options) {
        return (0, exports.SubtitleServiceApiFp)(this.configuration)
            .getProvidersSubtitlesSubtitlesById(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets subtitles in a specified format.
     * @param {string} id Item Id
     * @param {string} mediaSourceId MediaSourceId
     * @param {number} index The subtitle stream index
     * @param {string} format Format
     * @param {number} [startPositionTicks] StartPositionTicks
     * @param {number} [endPositionTicks] EndPositionTicks
     * @param {boolean} [copyTimestamps] CopyTimestamps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options) {
        return (0, exports.SubtitleServiceApiFp)(this.configuration)
            .getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets subtitles in a specified format.
     * @param {string} id Item Id
     * @param {string} mediaSourceId MediaSourceId
     * @param {number} index The subtitle stream index
     * @param {string} format Format
     * @param {number} startPositionTicks StartPositionTicks
     * @param {number} [endPositionTicks] EndPositionTicks
     * @param {boolean} [copyTimestamps] CopyTimestamps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options) {
        return (0, exports.SubtitleServiceApiFp)(this.configuration)
            .getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {string} id Item Id
     * @param {string} mediaSourceId MediaSourceId
     * @param {string} subtitleId SubtitleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    postItemsByIdRemotesearchSubtitlesBySubtitleid(id, mediaSourceId, subtitleId, options) {
        return (0, exports.SubtitleServiceApiFp)(this.configuration)
            .postItemsByIdRemotesearchSubtitlesBySubtitleid(id, mediaSourceId, subtitleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.SubtitleServiceApi = SubtitleServiceApi;
//# sourceMappingURL=subtitle-service-api.js.map