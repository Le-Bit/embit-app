"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardServiceApi = exports.DashboardServiceApiFactory = exports.DashboardServiceApiFp = exports.DashboardServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * DashboardServiceApi - axios parameter creator
 * @export
 */
const DashboardServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebConfigurationpage: async (options = {}) => {
            const localVarPath = `/web/ConfigurationPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebConfigurationpages: async (options = {}) => {
            const localVarPath = `/web/ConfigurationPages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebStrings: async (options = {}) => {
            const localVarPath = `/web/strings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DashboardServiceApiAxiosParamCreator = DashboardServiceApiAxiosParamCreator;
/**
 * DashboardServiceApi - functional programming interface
 * @export
 */
const DashboardServiceApiFp = function (configuration) {
    return {
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebConfigurationpage(options) {
            const localVarAxiosArgs = await (0, exports.DashboardServiceApiAxiosParamCreator)(configuration).getWebConfigurationpage(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebConfigurationpages(options) {
            const localVarAxiosArgs = await (0, exports.DashboardServiceApiAxiosParamCreator)(configuration).getWebConfigurationpages(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebStrings(options) {
            const localVarAxiosArgs = await (0, exports.DashboardServiceApiAxiosParamCreator)(configuration).getWebStrings(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.DashboardServiceApiFp = DashboardServiceApiFp;
/**
 * DashboardServiceApi - factory interface
 * @export
 */
const DashboardServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebConfigurationpage(options) {
            return (0, exports.DashboardServiceApiFp)(configuration)
                .getWebConfigurationpage(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebConfigurationpages(options) {
            return (0, exports.DashboardServiceApiFp)(configuration)
                .getWebConfigurationpages(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebStrings(options) {
            return (0, exports.DashboardServiceApiFp)(configuration)
                .getWebStrings(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.DashboardServiceApiFactory = DashboardServiceApiFactory;
/**
 * DashboardServiceApi - object-oriented interface
 * @export
 * @class DashboardServiceApi
 * @extends {BaseAPI}
 */
class DashboardServiceApi extends base_1.BaseAPI {
    /**
     * No authentication required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardServiceApi
     */
    getWebConfigurationpage(options) {
        return (0, exports.DashboardServiceApiFp)(this.configuration)
            .getWebConfigurationpage(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardServiceApi
     */
    getWebConfigurationpages(options) {
        return (0, exports.DashboardServiceApiFp)(this.configuration)
            .getWebConfigurationpages(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardServiceApi
     */
    getWebStrings(options) {
        return (0, exports.DashboardServiceApiFp)(this.configuration)
            .getWebStrings(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.DashboardServiceApi = DashboardServiceApi;
//# sourceMappingURL=dashboard-service-api.js.map