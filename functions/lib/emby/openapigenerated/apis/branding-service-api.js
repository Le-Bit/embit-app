"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrandingServiceApi = exports.BrandingServiceApiFactory = exports.BrandingServiceApiFp = exports.BrandingServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * BrandingServiceApi - axios parameter creator
 * @export
 */
const BrandingServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * No authentication required
         * @summary Gets branding configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingConfiguration: async (options = {}) => {
            const localVarPath = `/Branding/Configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets custom css
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss: async (options = {}) => {
            const localVarPath = `/Branding/Css`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets custom css
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCssCss: async (options = {}) => {
            const localVarPath = `/Branding/Css.css`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BrandingServiceApiAxiosParamCreator = BrandingServiceApiAxiosParamCreator;
/**
 * BrandingServiceApi - functional programming interface
 * @export
 */
const BrandingServiceApiFp = function (configuration) {
    return {
        /**
         * No authentication required
         * @summary Gets branding configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandingConfiguration(options) {
            const localVarAxiosArgs = await (0, exports.BrandingServiceApiAxiosParamCreator)(configuration).getBrandingConfiguration(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets custom css
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandingCss(options) {
            const localVarAxiosArgs = await (0, exports.BrandingServiceApiAxiosParamCreator)(configuration).getBrandingCss(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets custom css
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandingCssCss(options) {
            const localVarAxiosArgs = await (0, exports.BrandingServiceApiAxiosParamCreator)(configuration).getBrandingCssCss(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.BrandingServiceApiFp = BrandingServiceApiFp;
/**
 * BrandingServiceApi - factory interface
 * @export
 */
const BrandingServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * No authentication required
         * @summary Gets branding configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingConfiguration(options) {
            return (0, exports.BrandingServiceApiFp)(configuration)
                .getBrandingConfiguration(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets custom css
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCss(options) {
            return (0, exports.BrandingServiceApiFp)(configuration)
                .getBrandingCss(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets custom css
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingCssCss(options) {
            return (0, exports.BrandingServiceApiFp)(configuration)
                .getBrandingCssCss(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.BrandingServiceApiFactory = BrandingServiceApiFactory;
/**
 * BrandingServiceApi - object-oriented interface
 * @export
 * @class BrandingServiceApi
 * @extends {BaseAPI}
 */
class BrandingServiceApi extends base_1.BaseAPI {
    /**
     * No authentication required
     * @summary Gets branding configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingServiceApi
     */
    getBrandingConfiguration(options) {
        return (0, exports.BrandingServiceApiFp)(this.configuration)
            .getBrandingConfiguration(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets custom css
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingServiceApi
     */
    getBrandingCss(options) {
        return (0, exports.BrandingServiceApiFp)(this.configuration)
            .getBrandingCss(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets custom css
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingServiceApi
     */
    getBrandingCssCss(options) {
        return (0, exports.BrandingServiceApiFp)(this.configuration)
            .getBrandingCssCss(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.BrandingServiceApi = BrandingServiceApi;
//# sourceMappingURL=branding-service-api.js.map