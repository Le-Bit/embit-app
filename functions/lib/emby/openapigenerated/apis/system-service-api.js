"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemServiceApi = exports.SystemServiceApiFactory = exports.SystemServiceApiFp = exports.SystemServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * SystemServiceApi - axios parameter creator
 * @export
 */
const SystemServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets information about the request endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemEndpoint: async (options = {}) => {
            const localVarPath = `/System/Endpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfo: async (options = {}) => {
            const localVarPath = `/System/Info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets public information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfoPublic: async (options = {}) => {
            const localVarPath = `/System/Info/Public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByName: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling getSystemLogsByName.");
            }
            const localVarPath = `/System/Logs/{Name}`.replace(`{${"Name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByNameLines: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling getSystemLogsByNameLines.");
            }
            const localVarPath = `/System/Logs/{Name}/Lines`.replace(`{${"Name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of available server log files
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsQuery: async (startIndex, limit, options = {}) => {
            const localVarPath = `/System/Logs/Query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPing: async (options = {}) => {
            const localVarPath = `/System/Ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotes: async (options = {}) => {
            const localVarPath = `/System/ReleaseNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotesVersions: async (options = {}) => {
            const localVarPath = `/System/ReleaseNotes/Versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets wake on lan information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWakeonlaninfo: async (options = {}) => {
            const localVarPath = `/System/WakeOnLanInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemPing: async (options = {}) => {
            const localVarPath = `/System/Ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Restarts the application, if needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemRestart: async (options = {}) => {
            const localVarPath = `/System/Restart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Shuts down the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemShutdown: async (options = {}) => {
            const localVarPath = `/System/Shutdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SystemServiceApiAxiosParamCreator = SystemServiceApiAxiosParamCreator;
/**
 * SystemServiceApi - functional programming interface
 * @export
 */
const SystemServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets information about the request endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemEndpoint(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemEndpoint(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemInfo(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemInfo(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets public information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemInfoPublic(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemInfoPublic(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemLogsByName(name, options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemLogsByName(name, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemLogsByNameLines(name, options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemLogsByNameLines(name, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of available server log files
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemLogsQuery(startIndex, limit, options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemLogsQuery(startIndex, limit, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPing(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemPing(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemReleasenotes(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemReleasenotes(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemReleasenotesVersions(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemReleasenotesVersions(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets wake on lan information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWakeonlaninfo(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).getSystemWakeonlaninfo(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSystemPing(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).postSystemPing(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Restarts the application, if needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSystemRestart(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).postSystemRestart(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Shuts down the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSystemShutdown(options) {
            const localVarAxiosArgs = await (0, exports.SystemServiceApiAxiosParamCreator)(configuration).postSystemShutdown(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.SystemServiceApiFp = SystemServiceApiFp;
/**
 * SystemServiceApi - factory interface
 * @export
 */
const SystemServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets information about the request endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemEndpoint(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemEndpoint(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfo(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemInfo(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets public information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfoPublic(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemInfoPublic(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByName(name, options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemLogsByName(name, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByNameLines(name, options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemLogsByNameLines(name, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of available server log files
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsQuery(startIndex, limit, options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemLogsQuery(startIndex, limit, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPing(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemPing(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotes(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemReleasenotes(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotesVersions(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemReleasenotesVersions(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets wake on lan information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWakeonlaninfo(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .getSystemWakeonlaninfo(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemPing(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .postSystemPing(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Restarts the application, if needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemRestart(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .postSystemRestart(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Shuts down the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemShutdown(options) {
            return (0, exports.SystemServiceApiFp)(configuration)
                .postSystemShutdown(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.SystemServiceApiFactory = SystemServiceApiFactory;
/**
 * SystemServiceApi - object-oriented interface
 * @export
 * @class SystemServiceApi
 * @extends {BaseAPI}
 */
class SystemServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets information about the request endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemEndpoint(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemEndpoint(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets information about the server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemInfo(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemInfo(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets public information about the server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemInfoPublic(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemInfoPublic(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a log file
     * @param {string} name The log file name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemLogsByName(name, options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemLogsByName(name, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a log file
     * @param {string} name The log file name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemLogsByNameLines(name, options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemLogsByNameLines(name, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of available server log files
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemLogsQuery(startIndex, limit, options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemLogsQuery(startIndex, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemPing(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemPing(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets release notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemReleasenotes(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemReleasenotes(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets release notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemReleasenotesVersions(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemReleasenotesVersions(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets wake on lan information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    getSystemWakeonlaninfo(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .getSystemWakeonlaninfo(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    postSystemPing(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .postSystemPing(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Restarts the application, if needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    postSystemRestart(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .postSystemRestart(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Shuts down the application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    postSystemShutdown(options) {
        return (0, exports.SystemServiceApiFp)(this.configuration)
            .postSystemShutdown(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.SystemServiceApi = SystemServiceApi;
//# sourceMappingURL=system-service-api.js.map