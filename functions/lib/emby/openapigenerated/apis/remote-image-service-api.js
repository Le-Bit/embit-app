"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteImageServiceApi = exports.RemoteImageServiceApiFactory = exports.RemoteImageServiceApiFp = exports.RemoteImageServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * RemoteImageServiceApi - axios parameter creator
 * @export
 */
const RemoteImageServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesRemote: async (imageUrl, options = {}) => {
            // verify required parameter 'imageUrl' is not null or undefined
            if (imageUrl === null || imageUrl === undefined) {
                throw new base_1.RequiredError("imageUrl", "Required parameter imageUrl was null or undefined when calling getImagesRemote.");
            }
            const localVarPath = `/Images/Remote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (imageUrl !== undefined) {
                localVarQueryParameter["ImageUrl"] = imageUrl;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets available remote images for an item
         * @param {string} id Item Id
         * @param {string} [type] The image type
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [providerName] Optional. The image provider to use
         * @param {boolean} [includeAllLanguages] Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemoteimages: async (id, type, startIndex, limit, providerName, includeAllLanguages, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdRemoteimages.");
            }
            const localVarPath = `/Items/{Id}/RemoteImages`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (type !== undefined) {
                localVarQueryParameter["Type"] = type;
            }
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            if (providerName !== undefined) {
                localVarQueryParameter["ProviderName"] = providerName;
            }
            if (includeAllLanguages !== undefined) {
                localVarQueryParameter["IncludeAllLanguages"] = includeAllLanguages;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets available remote image providers for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemoteimagesProviders: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling getItemsByIdRemoteimagesProviders.");
            }
            const localVarPath = `/Items/{Id}/RemoteImages/Providers`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Downloads a remote image for an item
         * @param {string} id Item Id
         * @param {string} type The image type
         * @param {string} [providerName] The image provider
         * @param {string} [imageUrl] The image url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRemoteimagesDownload: async (id, type, providerName, imageUrl, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError("id", "Required parameter id was null or undefined when calling postItemsByIdRemoteimagesDownload.");
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new base_1.RequiredError("type", "Required parameter type was null or undefined when calling postItemsByIdRemoteimagesDownload.");
            }
            const localVarPath = `/Items/{Id}/RemoteImages/Download`.replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (type !== undefined) {
                localVarQueryParameter["Type"] = type;
            }
            if (providerName !== undefined) {
                localVarQueryParameter["ProviderName"] = providerName;
            }
            if (imageUrl !== undefined) {
                localVarQueryParameter["ImageUrl"] = imageUrl;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.RemoteImageServiceApiAxiosParamCreator = RemoteImageServiceApiAxiosParamCreator;
/**
 * RemoteImageServiceApi - functional programming interface
 * @export
 */
const RemoteImageServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesRemote(imageUrl, options) {
            const localVarAxiosArgs = await (0, exports.RemoteImageServiceApiAxiosParamCreator)(configuration).getImagesRemote(imageUrl, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets available remote images for an item
         * @param {string} id Item Id
         * @param {string} [type] The image type
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [providerName] Optional. The image provider to use
         * @param {boolean} [includeAllLanguages] Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdRemoteimages(id, type, startIndex, limit, providerName, includeAllLanguages, options) {
            const localVarAxiosArgs = await (0, exports.RemoteImageServiceApiAxiosParamCreator)(configuration).getItemsByIdRemoteimages(id, type, startIndex, limit, providerName, includeAllLanguages, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets available remote image providers for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdRemoteimagesProviders(id, options) {
            const localVarAxiosArgs = await (0, exports.RemoteImageServiceApiAxiosParamCreator)(configuration).getItemsByIdRemoteimagesProviders(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Downloads a remote image for an item
         * @param {string} id Item Id
         * @param {string} type The image type
         * @param {string} [providerName] The image provider
         * @param {string} [imageUrl] The image url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsByIdRemoteimagesDownload(id, type, providerName, imageUrl, options) {
            const localVarAxiosArgs = await (0, exports.RemoteImageServiceApiAxiosParamCreator)(configuration).postItemsByIdRemoteimagesDownload(id, type, providerName, imageUrl, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.RemoteImageServiceApiFp = RemoteImageServiceApiFp;
/**
 * RemoteImageServiceApi - factory interface
 * @export
 */
const RemoteImageServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesRemote(imageUrl, options) {
            return (0, exports.RemoteImageServiceApiFp)(configuration)
                .getImagesRemote(imageUrl, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets available remote images for an item
         * @param {string} id Item Id
         * @param {string} [type] The image type
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [providerName] Optional. The image provider to use
         * @param {boolean} [includeAllLanguages] Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemoteimages(id, type, startIndex, limit, providerName, includeAllLanguages, options) {
            return (0, exports.RemoteImageServiceApiFp)(configuration)
                .getItemsByIdRemoteimages(id, type, startIndex, limit, providerName, includeAllLanguages, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets available remote image providers for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemoteimagesProviders(id, options) {
            return (0, exports.RemoteImageServiceApiFp)(configuration)
                .getItemsByIdRemoteimagesProviders(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Downloads a remote image for an item
         * @param {string} id Item Id
         * @param {string} type The image type
         * @param {string} [providerName] The image provider
         * @param {string} [imageUrl] The image url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRemoteimagesDownload(id, type, providerName, imageUrl, options) {
            return (0, exports.RemoteImageServiceApiFp)(configuration)
                .postItemsByIdRemoteimagesDownload(id, type, providerName, imageUrl, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.RemoteImageServiceApiFactory = RemoteImageServiceApiFactory;
/**
 * RemoteImageServiceApi - object-oriented interface
 * @export
 * @class RemoteImageServiceApi
 * @extends {BaseAPI}
 */
class RemoteImageServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Gets a remote image
     * @param {string} imageUrl The image url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteImageServiceApi
     */
    getImagesRemote(imageUrl, options) {
        return (0, exports.RemoteImageServiceApiFp)(this.configuration)
            .getImagesRemote(imageUrl, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets available remote images for an item
     * @param {string} id Item Id
     * @param {string} [type] The image type
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [providerName] Optional. The image provider to use
     * @param {boolean} [includeAllLanguages] Optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteImageServiceApi
     */
    getItemsByIdRemoteimages(id, type, startIndex, limit, providerName, includeAllLanguages, options) {
        return (0, exports.RemoteImageServiceApiFp)(this.configuration)
            .getItemsByIdRemoteimages(id, type, startIndex, limit, providerName, includeAllLanguages, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets available remote image providers for an item
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteImageServiceApi
     */
    getItemsByIdRemoteimagesProviders(id, options) {
        return (0, exports.RemoteImageServiceApiFp)(this.configuration)
            .getItemsByIdRemoteimagesProviders(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Downloads a remote image for an item
     * @param {string} id Item Id
     * @param {string} type The image type
     * @param {string} [providerName] The image provider
     * @param {string} [imageUrl] The image url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteImageServiceApi
     */
    postItemsByIdRemoteimagesDownload(id, type, providerName, imageUrl, options) {
        return (0, exports.RemoteImageServiceApiFp)(this.configuration)
            .postItemsByIdRemoteimagesDownload(id, type, providerName, imageUrl, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.RemoteImageServiceApi = RemoteImageServiceApi;
//# sourceMappingURL=remote-image-service-api.js.map