"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoviesServiceApi = exports.MoviesServiceApiFactory = exports.MoviesServiceApiFp = exports.MoviesServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * MoviesServiceApi - axios parameter creator
 * @export
 */
const MoviesServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets movie recommendations
         * @param {number} [categoryLimit] The max number of categories to return
         * @param {number} [itemLimit] The max number of items to return per category
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoviesRecommendations: async (categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options = {}) => {
            const localVarPath = `/Movies/Recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (categoryLimit !== undefined) {
                localVarQueryParameter["CategoryLimit"] = categoryLimit;
            }
            if (itemLimit !== undefined) {
                localVarQueryParameter["ItemLimit"] = itemLimit;
            }
            if (userId !== undefined) {
                localVarQueryParameter["UserId"] = userId;
            }
            if (parentId !== undefined) {
                localVarQueryParameter["ParentId"] = parentId;
            }
            if (enableImages !== undefined) {
                localVarQueryParameter["EnableImages"] = enableImages;
            }
            if (enableUserData !== undefined) {
                localVarQueryParameter["EnableUserData"] = enableUserData;
            }
            if (imageTypeLimit !== undefined) {
                localVarQueryParameter["ImageTypeLimit"] = imageTypeLimit;
            }
            if (enableImageTypes !== undefined) {
                localVarQueryParameter["EnableImageTypes"] = enableImageTypes;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MoviesServiceApiAxiosParamCreator = MoviesServiceApiAxiosParamCreator;
/**
 * MoviesServiceApi - functional programming interface
 * @export
 */
const MoviesServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets movie recommendations
         * @param {number} [categoryLimit] The max number of categories to return
         * @param {number} [itemLimit] The max number of items to return per category
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMoviesRecommendations(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            const localVarAxiosArgs = await (0, exports.MoviesServiceApiAxiosParamCreator)(configuration).getMoviesRecommendations(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.MoviesServiceApiFp = MoviesServiceApiFp;
/**
 * MoviesServiceApi - factory interface
 * @export
 */
const MoviesServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets movie recommendations
         * @param {number} [categoryLimit] The max number of categories to return
         * @param {number} [itemLimit] The max number of items to return per category
         * @param {string} [userId] Optional. Filter by user id, and attach user data
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoviesRecommendations(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
            return (0, exports.MoviesServiceApiFp)(configuration)
                .getMoviesRecommendations(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.MoviesServiceApiFactory = MoviesServiceApiFactory;
/**
 * MoviesServiceApi - object-oriented interface
 * @export
 * @class MoviesServiceApi
 * @extends {BaseAPI}
 */
class MoviesServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets movie recommendations
     * @param {number} [categoryLimit] The max number of categories to return
     * @param {number} [itemLimit] The max number of items to return per category
     * @param {string} [userId] Optional. Filter by user id, and attach user data
     * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesServiceApi
     */
    getMoviesRecommendations(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options) {
        return (0, exports.MoviesServiceApiFp)(this.configuration)
            .getMoviesRecommendations(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.MoviesServiceApi = MoviesServiceApi;
//# sourceMappingURL=movies-service-api.js.map