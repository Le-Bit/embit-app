"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsServiceApi = exports.NotificationsServiceApiFactory = exports.NotificationsServiceApiFp = exports.NotificationsServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * NotificationsServiceApi - axios parameter creator
 * @export
 */
const NotificationsServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets notifications
         * @param {string} userId User Id
         * @param {boolean} [isRead] An optional filter by IsRead
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUserid: async (userId, isRead, startIndex, limit, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getNotificationsByUserid.");
            }
            const localVarPath = `/Notifications/{UserId}`.replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (isRead !== undefined) {
                localVarQueryParameter["IsRead"] = isRead;
            }
            if (startIndex !== undefined) {
                localVarQueryParameter["StartIndex"] = startIndex;
            }
            if (limit !== undefined) {
                localVarQueryParameter["Limit"] = limit;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a notification summary for a user
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUseridSummary: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling getNotificationsByUseridSummary.");
            }
            const localVarPath = `/Notifications/{UserId}/Summary`.replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsServices: async (options = {}) => {
            const localVarPath = `/Notifications/Services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsTypes: async (options = {}) => {
            const localVarPath = `/Notifications/Types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Sends a notification to all admin users
         * @param {string} name The notification&#x27;s name
         * @param {string} description The notification&#x27;s description
         * @param {string} [imageUrl] The notification&#x27;s image url
         * @param {string} [url] The notification&#x27;s info url
         * @param {string} [level] The notification level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsAdmin: async (name, description, imageUrl, url, level, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError("name", "Required parameter name was null or undefined when calling postNotificationsAdmin.");
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new base_1.RequiredError("description", "Required parameter description was null or undefined when calling postNotificationsAdmin.");
            }
            const localVarPath = `/Notifications/Admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (name !== undefined) {
                localVarQueryParameter["Name"] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter["Description"] = description;
            }
            if (imageUrl !== undefined) {
                localVarQueryParameter["ImageUrl"] = imageUrl;
            }
            if (url !== undefined) {
                localVarQueryParameter["Url"] = url;
            }
            if (level !== undefined) {
                localVarQueryParameter["Level"] = level;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as read
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridRead: async (userId, ids, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling postNotificationsByUseridRead.");
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new base_1.RequiredError("ids", "Required parameter ids was null or undefined when calling postNotificationsByUseridRead.");
            }
            const localVarPath = `/Notifications/{UserId}/Read`.replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (ids !== undefined) {
                localVarQueryParameter["Ids"] = ids;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as unread
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridUnread: async (userId, ids, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError("userId", "Required parameter userId was null or undefined when calling postNotificationsByUseridUnread.");
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new base_1.RequiredError("ids", "Required parameter ids was null or undefined when calling postNotificationsByUseridUnread.");
            }
            const localVarPath = `/Notifications/{UserId}/Unread`.replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            if (ids !== undefined) {
                localVarQueryParameter["Ids"] = ids;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NotificationsServiceApiAxiosParamCreator = NotificationsServiceApiAxiosParamCreator;
/**
 * NotificationsServiceApi - functional programming interface
 * @export
 */
const NotificationsServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets notifications
         * @param {string} userId User Id
         * @param {boolean} [isRead] An optional filter by IsRead
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsByUserid(userId, isRead, startIndex, limit, options) {
            const localVarAxiosArgs = await (0, exports.NotificationsServiceApiAxiosParamCreator)(configuration).getNotificationsByUserid(userId, isRead, startIndex, limit, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a notification summary for a user
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsByUseridSummary(userId, options) {
            const localVarAxiosArgs = await (0, exports.NotificationsServiceApiAxiosParamCreator)(configuration).getNotificationsByUseridSummary(userId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsServices(options) {
            const localVarAxiosArgs = await (0, exports.NotificationsServiceApiAxiosParamCreator)(configuration).getNotificationsServices(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsTypes(options) {
            const localVarAxiosArgs = await (0, exports.NotificationsServiceApiAxiosParamCreator)(configuration).getNotificationsTypes(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Sends a notification to all admin users
         * @param {string} name The notification&#x27;s name
         * @param {string} description The notification&#x27;s description
         * @param {string} [imageUrl] The notification&#x27;s image url
         * @param {string} [url] The notification&#x27;s info url
         * @param {string} [level] The notification level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotificationsAdmin(name, description, imageUrl, url, level, options) {
            const localVarAxiosArgs = await (0, exports.NotificationsServiceApiAxiosParamCreator)(configuration).postNotificationsAdmin(name, description, imageUrl, url, level, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as read
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotificationsByUseridRead(userId, ids, options) {
            const localVarAxiosArgs = await (0, exports.NotificationsServiceApiAxiosParamCreator)(configuration).postNotificationsByUseridRead(userId, ids, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as unread
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotificationsByUseridUnread(userId, ids, options) {
            const localVarAxiosArgs = await (0, exports.NotificationsServiceApiAxiosParamCreator)(configuration).postNotificationsByUseridUnread(userId, ids, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.NotificationsServiceApiFp = NotificationsServiceApiFp;
/**
 * NotificationsServiceApi - factory interface
 * @export
 */
const NotificationsServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets notifications
         * @param {string} userId User Id
         * @param {boolean} [isRead] An optional filter by IsRead
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUserid(userId, isRead, startIndex, limit, options) {
            return (0, exports.NotificationsServiceApiFp)(configuration)
                .getNotificationsByUserid(userId, isRead, startIndex, limit, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a notification summary for a user
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUseridSummary(userId, options) {
            return (0, exports.NotificationsServiceApiFp)(configuration)
                .getNotificationsByUseridSummary(userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsServices(options) {
            return (0, exports.NotificationsServiceApiFp)(configuration)
                .getNotificationsServices(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsTypes(options) {
            return (0, exports.NotificationsServiceApiFp)(configuration)
                .getNotificationsTypes(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Sends a notification to all admin users
         * @param {string} name The notification&#x27;s name
         * @param {string} description The notification&#x27;s description
         * @param {string} [imageUrl] The notification&#x27;s image url
         * @param {string} [url] The notification&#x27;s info url
         * @param {string} [level] The notification level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsAdmin(name, description, imageUrl, url, level, options) {
            return (0, exports.NotificationsServiceApiFp)(configuration)
                .postNotificationsAdmin(name, description, imageUrl, url, level, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as read
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridRead(userId, ids, options) {
            return (0, exports.NotificationsServiceApiFp)(configuration)
                .postNotificationsByUseridRead(userId, ids, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as unread
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridUnread(userId, ids, options) {
            return (0, exports.NotificationsServiceApiFp)(configuration)
                .postNotificationsByUseridUnread(userId, ids, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.NotificationsServiceApiFactory = NotificationsServiceApiFactory;
/**
 * NotificationsServiceApi - object-oriented interface
 * @export
 * @class NotificationsServiceApi
 * @extends {BaseAPI}
 */
class NotificationsServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets notifications
     * @param {string} userId User Id
     * @param {boolean} [isRead] An optional filter by IsRead
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    getNotificationsByUserid(userId, isRead, startIndex, limit, options) {
        return (0, exports.NotificationsServiceApiFp)(this.configuration)
            .getNotificationsByUserid(userId, isRead, startIndex, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a notification summary for a user
     * @param {string} userId User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    getNotificationsByUseridSummary(userId, options) {
        return (0, exports.NotificationsServiceApiFp)(this.configuration)
            .getNotificationsByUseridSummary(userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets notification types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    getNotificationsServices(options) {
        return (0, exports.NotificationsServiceApiFp)(this.configuration)
            .getNotificationsServices(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets notification types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    getNotificationsTypes(options) {
        return (0, exports.NotificationsServiceApiFp)(this.configuration)
            .getNotificationsTypes(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Sends a notification to all admin users
     * @param {string} name The notification&#x27;s name
     * @param {string} description The notification&#x27;s description
     * @param {string} [imageUrl] The notification&#x27;s image url
     * @param {string} [url] The notification&#x27;s info url
     * @param {string} [level] The notification level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    postNotificationsAdmin(name, description, imageUrl, url, level, options) {
        return (0, exports.NotificationsServiceApiFp)(this.configuration)
            .postNotificationsAdmin(name, description, imageUrl, url, level, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Marks notifications as read
     * @param {string} userId User Id
     * @param {string} ids A list of notification ids, comma delimited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    postNotificationsByUseridRead(userId, ids, options) {
        return (0, exports.NotificationsServiceApiFp)(this.configuration)
            .postNotificationsByUseridRead(userId, ids, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Marks notifications as unread
     * @param {string} userId User Id
     * @param {string} ids A list of notification ids, comma delimited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    postNotificationsByUseridUnread(userId, ids, options) {
        return (0, exports.NotificationsServiceApiFp)(this.configuration)
            .postNotificationsByUseridUnread(userId, ids, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.NotificationsServiceApi = NotificationsServiceApi;
//# sourceMappingURL=notifications-service-api.js.map