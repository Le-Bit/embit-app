"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncodingInfoServiceApi = exports.EncodingInfoServiceApiFactory = exports.EncodingInfoServiceApiFp = exports.EncodingInfoServiceApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * EncodingInfoServiceApi - axios parameter creator
 * @export
 */
const EncodingInfoServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets default codec configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncodingCodecconfigurationDefaults: async (options = {}) => {
            const localVarPath = `/Encoding/CodecConfiguration/Defaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets details about available video encoders and decoders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncodingCodecinformationVideo: async (options = {}) => {
            const localVarPath = `/Encoding/CodecInformation/Video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available tone mapping options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncodingTonemapoptions: async (options = {}) => {
            const localVarPath = `/Encoding/ToneMapOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, "https://example.com");
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === "function"
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }
            // authentication embyauth required
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = new URLSearchParams(query).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.EncodingInfoServiceApiAxiosParamCreator = EncodingInfoServiceApiAxiosParamCreator;
/**
 * EncodingInfoServiceApi - functional programming interface
 * @export
 */
const EncodingInfoServiceApiFp = function (configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets default codec configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEncodingCodecconfigurationDefaults(options) {
            const localVarAxiosArgs = await (0, exports.EncodingInfoServiceApiAxiosParamCreator)(configuration).getEncodingCodecconfigurationDefaults(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets details about available video encoders and decoders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEncodingCodecinformationVideo(options) {
            const localVarAxiosArgs = await (0, exports.EncodingInfoServiceApiAxiosParamCreator)(configuration).getEncodingCodecinformationVideo(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available tone mapping options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEncodingTonemapoptions(options) {
            const localVarAxiosArgs = await (0, exports.EncodingInfoServiceApiAxiosParamCreator)(configuration).getEncodingTonemapoptions(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
exports.EncodingInfoServiceApiFp = EncodingInfoServiceApiFp;
/**
 * EncodingInfoServiceApi - factory interface
 * @export
 */
const EncodingInfoServiceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets default codec configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncodingCodecconfigurationDefaults(options) {
            return (0, exports.EncodingInfoServiceApiFp)(configuration)
                .getEncodingCodecconfigurationDefaults(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets details about available video encoders and decoders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncodingCodecinformationVideo(options) {
            return (0, exports.EncodingInfoServiceApiFp)(configuration)
                .getEncodingCodecinformationVideo(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available tone mapping options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncodingTonemapoptions(options) {
            return (0, exports.EncodingInfoServiceApiFp)(configuration)
                .getEncodingTonemapoptions(options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.EncodingInfoServiceApiFactory = EncodingInfoServiceApiFactory;
/**
 * EncodingInfoServiceApi - object-oriented interface
 * @export
 * @class EncodingInfoServiceApi
 * @extends {BaseAPI}
 */
class EncodingInfoServiceApi extends base_1.BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Gets default codec configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncodingInfoServiceApi
     */
    getEncodingCodecconfigurationDefaults(options) {
        return (0, exports.EncodingInfoServiceApiFp)(this.configuration)
            .getEncodingCodecconfigurationDefaults(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets details about available video encoders and decoders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncodingInfoServiceApi
     */
    getEncodingCodecinformationVideo(options) {
        return (0, exports.EncodingInfoServiceApiFp)(this.configuration)
            .getEncodingCodecinformationVideo(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets available tone mapping options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncodingInfoServiceApi
     */
    getEncodingTonemapoptions(options) {
        return (0, exports.EncodingInfoServiceApiFp)(this.configuration)
            .getEncodingTonemapoptions(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.EncodingInfoServiceApi = EncodingInfoServiceApi;
//# sourceMappingURL=encoding-info-service-api.js.map