/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { PlaybackReportingApiCustomQuery } from "../models";
/**
 * UserActivityAPIApi - axios parameter creator
 * @export
 */
export const UserActivityAPIApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Requires authentication as user
     * @summary Gets a breakdown of a usage metric
     * @param {string} breakdownType Breakdown type
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsByBreakdowntypeBreakdownreport: async (
      breakdownType: string,
      userId?: string,
      days?: number,
      endDate?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'breakdownType' is not null or undefined
      if (breakdownType === null || breakdownType === undefined) {
        throw new RequiredError(
          "breakdownType",
          "Required parameter breakdownType was null or undefined when calling getUserUsageStatsByBreakdowntypeBreakdownreport."
        );
      }
      const localVarPath =
        `/user_usage_stats/{BreakdownType}/BreakdownReport`.replace(
          `{${"BreakdownType"}}`,
          encodeURIComponent(String(breakdownType))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (userId !== undefined) {
        localVarQueryParameter["user_id"] = userId;
      }

      if (days !== undefined) {
        localVarQueryParameter["days"] = days;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
     * @param {string} userID User Id
     * @param {string} date UTC DateTime, Format yyyy-MM-dd
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsByUseridByDateGetitems: async (
      userID: string,
      date: string,
      filter?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userID' is not null or undefined
      if (userID === null || userID === undefined) {
        throw new RequiredError(
          "userID",
          "Required parameter userID was null or undefined when calling getUserUsageStatsByUseridByDateGetitems."
        );
      }
      // verify required parameter 'date' is not null or undefined
      if (date === null || date === undefined) {
        throw new RequiredError(
          "date",
          "Required parameter date was null or undefined when calling getUserUsageStatsByUseridByDateGetitems."
        );
      }
      const localVarPath = `/user_usage_stats/{UserID}/{Date}/GetItems`
        .replace(`{${"UserID"}}`, encodeURIComponent(String(userID)))
        .replace(`{${"Date"}}`, encodeURIComponent(String(date)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (filter !== undefined) {
        localVarQueryParameter["Filter"] = filter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsHourlyreport: async (
      userId?: string,
      days?: number,
      endDate?: string,
      filter?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/HourlyReport`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (userId !== undefined) {
        localVarQueryParameter["user_id"] = userId;
      }

      if (days !== undefined) {
        localVarQueryParameter["days"] = days;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Loads a backup from a file
     * @param {string} backupfile File name of file to load
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsLoadBackup: async (
      backupfile: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'backupfile' is not null or undefined
      if (backupfile === null || backupfile === undefined) {
        throw new RequiredError(
          "backupfile",
          "Required parameter backupfile was null or undefined when calling getUserUsageStatsLoadBackup."
        );
      }
      const localVarPath = `/user_usage_stats/load_backup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (backupfile !== undefined) {
        localVarQueryParameter["backupfile"] = backupfile;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets Movies counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsMoviesreport: async (
      userId?: string,
      days?: number,
      endDate?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/MoviesReport`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (userId !== undefined) {
        localVarQueryParameter["user_id"] = userId;
      }

      if (days !== undefined) {
        localVarQueryParameter["days"] = days;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets play activity for number of days
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {string} [dataType] Data type to return (count,time)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsPlayactivity: async (
      days?: number,
      endDate?: string,
      filter?: string,
      dataType?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/PlayActivity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (days !== undefined) {
        localVarQueryParameter["days"] = days;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (dataType !== undefined) {
        localVarQueryParameter["data_type"] = dataType;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Saves a backup of the playback report data to the backup path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsSaveBackup: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/save_backup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets Session Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsSessionList: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/session_list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets TV Shows counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsTvshowsreport: async (
      userId?: string,
      days?: number,
      endDate?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/TvShowsReport`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (userId !== undefined) {
        localVarQueryParameter["user_id"] = userId;
      }

      if (days !== undefined) {
        localVarQueryParameter["days"] = days;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets types filter list items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsTypeFilterList: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/type_filter_list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserActivity: async (
      days?: number,
      endDate?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/user_activity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (days !== undefined) {
        localVarQueryParameter["days"] = days;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserList: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user_usage_stats/user_list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {string} action action to perform
     * @param {string} id user Id to perform the action on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserManageByActionById: async (
      action: string,
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'action' is not null or undefined
      if (action === null || action === undefined) {
        throw new RequiredError(
          "action",
          "Required parameter action was null or undefined when calling getUserUsageStatsUserManageByActionById."
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getUserUsageStatsUserManageByActionById."
        );
      }
      const localVarPath = `/user_usage_stats/user_manage/{Action}/{Id}`
        .replace(`{${"Action"}}`, encodeURIComponent(String(action)))
        .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of all played items for a user in a date period
     * @param {string} userId User Id
     * @param {boolean} aggregateData Aggregate the data to total duration per user per item
     * @param {string} [filterName] Name Filter
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserplaylist: async (
      userId: string,
      aggregateData: boolean,
      filterName?: string,
      days?: number,
      endDate?: string,
      filter?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          "userId",
          "Required parameter userId was null or undefined when calling getUserUsageStatsUserplaylist."
        );
      }
      // verify required parameter 'aggregateData' is not null or undefined
      if (aggregateData === null || aggregateData === undefined) {
        throw new RequiredError(
          "aggregateData",
          "Required parameter aggregateData was null or undefined when calling getUserUsageStatsUserplaylist."
        );
      }
      const localVarPath = `/user_usage_stats/UserPlaylist`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      if (userId !== undefined) {
        localVarQueryParameter["user_id"] = userId;
      }

      if (aggregateData !== undefined) {
        localVarQueryParameter["aggregate_data"] = aggregateData;
      }

      if (filterName !== undefined) {
        localVarQueryParameter["filter_name"] = filterName;
      }

      if (days !== undefined) {
        localVarQueryParameter["days"] = days;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["end_date"] = endDate;
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Post a backup for importing
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUserUsageStatsImportBackup: async (
      body: Object,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postUserUsageStatsImportBackup."
        );
      }
      const localVarPath = `/user_usage_stats/import_backup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      localVarHeaderParameter["Content-Type"] = "application/octet-stream";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Requires authentication as user
     * @summary Submit an SQL query
     * @param {PlaybackReportingApiCustomQuery} body CustomQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUserUsageStatsSubmitCustomQuery: async (
      body: PlaybackReportingApiCustomQuery,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postUserUsageStatsSubmitCustomQuery."
        );
      }
      const localVarPath = `/user_usage_stats/submit_custom_query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserActivityAPIApi - functional programming interface
 * @export
 */
export const UserActivityAPIApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Requires authentication as user
     * @summary Gets a breakdown of a usage metric
     * @param {string} breakdownType Breakdown type
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsByBreakdowntypeBreakdownreport(
      breakdownType: string,
      userId?: string,
      days?: number,
      endDate?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsByBreakdowntypeBreakdownreport(
        breakdownType,
        userId,
        days,
        endDate,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
     * @param {string} userID User Id
     * @param {string} date UTC DateTime, Format yyyy-MM-dd
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsByUseridByDateGetitems(
      userID: string,
      date: string,
      filter?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsHourlyreport(
      userId?: string,
      days?: number,
      endDate?: string,
      filter?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsHourlyreport(userId, days, endDate, filter, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Loads a backup from a file
     * @param {string} backupfile File name of file to load
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsLoadBackup(
      backupfile: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsLoadBackup(backupfile, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets Movies counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsMoviesreport(
      userId?: string,
      days?: number,
      endDate?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsMoviesreport(userId, days, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets play activity for number of days
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {string} [dataType] Data type to return (count,time)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsPlayactivity(
      days?: number,
      endDate?: string,
      filter?: string,
      dataType?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Saves a backup of the playback report data to the backup path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsSaveBackup(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsSaveBackup(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets Session Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsSessionList(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsSessionList(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets TV Shows counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsTvshowsreport(
      userId?: string,
      days?: number,
      endDate?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsTvshowsreport(userId, days, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets types filter list items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsTypeFilterList(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsTypeFilterList(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsUserActivity(
      days?: number,
      endDate?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsUserActivity(days, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsUserList(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsUserList(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {string} action action to perform
     * @param {string} id user Id to perform the action on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsUserManageByActionById(
      action: string,
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsUserManageByActionById(action, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of all played items for a user in a date period
     * @param {string} userId User Id
     * @param {boolean} aggregateData Aggregate the data to total duration per user per item
     * @param {string} [filterName] Name Filter
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserUsageStatsUserplaylist(
      userId: string,
      aggregateData: boolean,
      filterName?: string,
      days?: number,
      endDate?: string,
      filter?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).getUserUsageStatsUserplaylist(
        userId,
        aggregateData,
        filterName,
        days,
        endDate,
        filter,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Post a backup for importing
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUserUsageStatsImportBackup(
      body: Object,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).postUserUsageStatsImportBackup(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Requires authentication as user
     * @summary Submit an SQL query
     * @param {PlaybackReportingApiCustomQuery} body CustomQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUserUsageStatsSubmitCustomQuery(
      body: PlaybackReportingApiCustomQuery,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await UserActivityAPIApiAxiosParamCreator(
        configuration
      ).postUserUsageStatsSubmitCustomQuery(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * UserActivityAPIApi - factory interface
 * @export
 */
export const UserActivityAPIApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Requires authentication as user
     * @summary Gets a breakdown of a usage metric
     * @param {string} breakdownType Breakdown type
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsByBreakdowntypeBreakdownreport(
      breakdownType: string,
      userId?: string,
      days?: number,
      endDate?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsByBreakdowntypeBreakdownreport(
          breakdownType,
          userId,
          days,
          endDate,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
     * @param {string} userID User Id
     * @param {string} date UTC DateTime, Format yyyy-MM-dd
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsByUseridByDateGetitems(
      userID: string,
      date: string,
      filter?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsHourlyreport(
      userId?: string,
      days?: number,
      endDate?: string,
      filter?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsHourlyreport(userId, days, endDate, filter, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Loads a backup from a file
     * @param {string} backupfile File name of file to load
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsLoadBackup(
      backupfile: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsLoadBackup(backupfile, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets Movies counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsMoviesreport(
      userId?: string,
      days?: number,
      endDate?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsMoviesreport(userId, days, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets play activity for number of days
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {string} [dataType] Data type to return (count,time)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsPlayactivity(
      days?: number,
      endDate?: string,
      filter?: string,
      dataType?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Saves a backup of the playback report data to the backup path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsSaveBackup(options?: any): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsSaveBackup(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets Session Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsSessionList(options?: any): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsSessionList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets TV Shows counts
     * @param {string} [userId] User Id
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsTvshowsreport(
      userId?: string,
      days?: number,
      endDate?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsTvshowsreport(userId, days, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets types filter list items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsTypeFilterList(options?: any): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsTypeFilterList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of the available activity per hour
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserActivity(
      days?: number,
      endDate?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsUserActivity(days, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserList(options?: any): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsUserList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Get users
     * @param {string} action action to perform
     * @param {string} id user Id to perform the action on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserManageByActionById(
      action: string,
      id: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsUserManageByActionById(action, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Gets a report of all played items for a user in a date period
     * @param {string} userId User Id
     * @param {boolean} aggregateData Aggregate the data to total duration per user per item
     * @param {string} [filterName] Name Filter
     * @param {number} [days] Number of Days
     * @param {string} [endDate] End date of the report in yyyy-MM-dd format
     * @param {string} [filter] Comma separated list of media types to filter (movies,series)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserUsageStatsUserplaylist(
      userId: string,
      aggregateData: boolean,
      filterName?: string,
      days?: number,
      endDate?: string,
      filter?: string,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .getUserUsageStatsUserplaylist(
          userId,
          aggregateData,
          filterName,
          days,
          endDate,
          filter,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Post a backup for importing
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUserUsageStatsImportBackup(
      body: Object,
      options?: any
    ): AxiosPromise<void> {
      return UserActivityAPIApiFp(configuration)
        .postUserUsageStatsImportBackup(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Requires authentication as user
     * @summary Submit an SQL query
     * @param {PlaybackReportingApiCustomQuery} body CustomQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUserUsageStatsSubmitCustomQuery(
      body: PlaybackReportingApiCustomQuery,
      options?: any
    ): AxiosPromise<any> {
      return UserActivityAPIApiFp(configuration)
        .postUserUsageStatsSubmitCustomQuery(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserActivityAPIApi - object-oriented interface
 * @export
 * @class UserActivityAPIApi
 * @extends {BaseAPI}
 */
export class UserActivityAPIApi extends BaseAPI {
  /**
   * Requires authentication as user
   * @summary Gets a breakdown of a usage metric
   * @param {string} breakdownType Breakdown type
   * @param {string} [userId] User Id
   * @param {number} [days] Number of Days
   * @param {string} [endDate] End date of the report in yyyy-MM-dd format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsByBreakdowntypeBreakdownreport(
    breakdownType: string,
    userId?: string,
    days?: number,
    endDate?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsByBreakdowntypeBreakdownreport(
        breakdownType,
        userId,
        days,
        endDate,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
   * @param {string} userID User Id
   * @param {string} date UTC DateTime, Format yyyy-MM-dd
   * @param {string} [filter] Comma separated list of media types to filter (movies,series)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsByUseridByDateGetitems(
    userID: string,
    date: string,
    filter?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsByUseridByDateGetitems(userID, date, filter, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets a report of the available activity per hour
   * @param {string} [userId] User Id
   * @param {number} [days] Number of Days
   * @param {string} [endDate] End date of the report in yyyy-MM-dd format
   * @param {string} [filter] Comma separated list of media types to filter (movies,series)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsHourlyreport(
    userId?: string,
    days?: number,
    endDate?: string,
    filter?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsHourlyreport(userId, days, endDate, filter, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Loads a backup from a file
   * @param {string} backupfile File name of file to load
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsLoadBackup(backupfile: string, options?: any) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsLoadBackup(backupfile, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets Movies counts
   * @param {string} [userId] User Id
   * @param {number} [days] Number of Days
   * @param {string} [endDate] End date of the report in yyyy-MM-dd format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsMoviesreport(
    userId?: string,
    days?: number,
    endDate?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsMoviesreport(userId, days, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets play activity for number of days
   * @param {number} [days] Number of Days
   * @param {string} [endDate] End date of the report in yyyy-MM-dd format
   * @param {string} [filter] Comma separated list of media types to filter (movies,series)
   * @param {string} [dataType] Data type to return (count,time)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsPlayactivity(
    days?: number,
    endDate?: string,
    filter?: string,
    dataType?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsPlayactivity(days, endDate, filter, dataType, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Saves a backup of the playback report data to the backup path
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsSaveBackup(options?: any) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsSaveBackup(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets Session Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsSessionList(options?: any) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsSessionList(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets TV Shows counts
   * @param {string} [userId] User Id
   * @param {number} [days] Number of Days
   * @param {string} [endDate] End date of the report in yyyy-MM-dd format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsTvshowsreport(
    userId?: string,
    days?: number,
    endDate?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsTvshowsreport(userId, days, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets types filter list items
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsTypeFilterList(options?: any) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsTypeFilterList(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets a report of the available activity per hour
   * @param {number} [days] Number of Days
   * @param {string} [endDate] End date of the report in yyyy-MM-dd format
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsUserActivity(
    days?: number,
    endDate?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsUserActivity(days, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Get users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsUserList(options?: any) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsUserList(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Get users
   * @param {string} action action to perform
   * @param {string} id user Id to perform the action on
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsUserManageByActionById(
    action: string,
    id: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsUserManageByActionById(action, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Gets a report of all played items for a user in a date period
   * @param {string} userId User Id
   * @param {boolean} aggregateData Aggregate the data to total duration per user per item
   * @param {string} [filterName] Name Filter
   * @param {number} [days] Number of Days
   * @param {string} [endDate] End date of the report in yyyy-MM-dd format
   * @param {string} [filter] Comma separated list of media types to filter (movies,series)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public getUserUsageStatsUserplaylist(
    userId: string,
    aggregateData: boolean,
    filterName?: string,
    days?: number,
    endDate?: string,
    filter?: string,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .getUserUsageStatsUserplaylist(
        userId,
        aggregateData,
        filterName,
        days,
        endDate,
        filter,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Post a backup for importing
   * @param {Object} body Binary stream
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public postUserUsageStatsImportBackup(body: Object, options?: any) {
    return UserActivityAPIApiFp(this.configuration)
      .postUserUsageStatsImportBackup(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Requires authentication as user
   * @summary Submit an SQL query
   * @param {PlaybackReportingApiCustomQuery} body CustomQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserActivityAPIApi
   */
  public postUserUsageStatsSubmitCustomQuery(
    body: PlaybackReportingApiCustomQuery,
    options?: any
  ) {
    return UserActivityAPIApiFp(this.configuration)
      .postUserUsageStatsSubmitCustomQuery(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
