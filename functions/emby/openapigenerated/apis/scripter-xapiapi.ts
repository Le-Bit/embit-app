/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { EmbyScripterXPackagesPackageInfo } from "../models";
import { EmbyScripterXPackagesPackageInstallerResult } from "../models";
import { EmbyScripterXPackagesPackageReloadResult } from "../models";
import { EmbyScripterXPackagesPackageUninstallResult } from "../models";
/**
 * ScripterXAPIApi - axios parameter creator
 * @export
 */
export const ScripterXAPIApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScripterxPackagesByInstallationidByFunction: async (
      installationId: string,
      _function: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling deleteScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter '_function' is not null or undefined
      if (_function === null || _function === undefined) {
        throw new RequiredError(
          "_function",
          "Required parameter _function was null or undefined when calling deleteScripterxPackagesByInstallationidByFunction."
        );
      }
      const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
        .replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        )
        .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve ScripterX Change Log --- Requires authentication as user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxChangelog: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/ScripterX/ChangeLog`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesByInstallationidByFunction: async (
      installationId: string,
      _function: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling getScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter '_function' is not null or undefined
      if (_function === null || _function === undefined) {
        throw new RequiredError(
          "_function",
          "Required parameter _function was null or undefined when calling getScripterxPackagesByInstallationidByFunction."
        );
      }
      const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
        .replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        )
        .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get ScripterX Package Config Interface --- Requires authentication as user
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesGetconfiginterfaceByInstallationid: async (
      installationId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling getScripterxPackagesGetconfiginterfaceByInstallationid."
        );
      }
      const localVarPath =
        `/ScripterX/Packages/GetConfigInterface/{installationId}`.replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get Installed Package Information --- Requires authentication as administrator
     * @summary Get Installed Package Information
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesInfoByInstallationid: async (
      installationId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling getScripterxPackagesInfoByInstallationid."
        );
      }
      const localVarPath = `/ScripterX/Packages/Info/{installationId}`.replace(
        `{${"installationId"}}`,
        encodeURIComponent(String(installationId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
     * @summary Get a list of Installed Packages with PackageId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesInstancesByPackageid: async (
      packageId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'packageId' is not null or undefined
      if (packageId === null || packageId === undefined) {
        throw new RequiredError(
          "packageId",
          "Required parameter packageId was null or undefined when calling getScripterxPackagesInstancesByPackageid."
        );
      }
      const localVarPath = `/ScripterX/Packages/Instances/{packageId}`.replace(
        `{${"packageId"}}`,
        encodeURIComponent(String(packageId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Reload a ScripterX Package Instance --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesReloadByInstallationid: async (
      installationId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling getScripterxPackagesReloadByInstallationid."
        );
      }
      const localVarPath =
        `/ScripterX/Packages/Reload/{installationId}`.replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Uninstall a ScripterX Package --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesRemoveByInstallationid: async (
      installationId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling getScripterxPackagesRemoveByInstallationid."
        );
      }
      const localVarPath =
        `/ScripterX/Packages/Remove/{installationId}`.replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headScripterxPackagesByInstallationidByFunction: async (
      installationId: string,
      _function: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling headScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter '_function' is not null or undefined
      if (_function === null || _function === undefined) {
        throw new RequiredError(
          "_function",
          "Required parameter _function was null or undefined when calling headScripterxPackagesByInstallationidByFunction."
        );
      }
      const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
        .replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        )
        .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "HEAD",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsScripterxPackagesByInstallationidByFunction: async (
      installationId: string,
      _function: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling optionsScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter '_function' is not null or undefined
      if (_function === null || _function === undefined) {
        throw new RequiredError(
          "_function",
          "Required parameter _function was null or undefined when calling optionsScripterxPackagesByInstallationidByFunction."
        );
      }
      const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
        .replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        )
        .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchScripterxPackagesByInstallationidByFunction: async (
      installationId: string,
      _function: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling patchScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter '_function' is not null or undefined
      if (_function === null || _function === undefined) {
        throw new RequiredError(
          "_function",
          "Required parameter _function was null or undefined when calling patchScripterxPackagesByInstallationidByFunction."
        );
      }
      const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
        .replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        )
        .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postScripterxPackagesByInstallationidByFunction: async (
      body: Object,
      installationId: string,
      _function: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling postScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter '_function' is not null or undefined
      if (_function === null || _function === undefined) {
        throw new RequiredError(
          "_function",
          "Required parameter _function was null or undefined when calling postScripterxPackagesByInstallationidByFunction."
        );
      }
      const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
        .replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        )
        .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/octet-stream";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Save Package Configuration --- Requires authentication as administrator
     * @summary Save Package Configuration
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postScripterxPackagesSaveconfigByInstallationid: async (
      body: Object,
      installationId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postScripterxPackagesSaveconfigByInstallationid."
        );
      }
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling postScripterxPackagesSaveconfigByInstallationid."
        );
      }
      const localVarPath =
        `/ScripterX/Packages/SaveConfig/{installationId}`.replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      localVarHeaderParameter["Content-Type"] = "application/octet-stream";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Upload ZIP Package to ScripterX --- Requires authentication as administrator
     * @summary Upload ZIP Package to ScripterX
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postScripterxPackagesUpload: async (
      body: Object,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postScripterxPackagesUpload."
        );
      }
      const localVarPath = `/ScripterX/Packages/Upload`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication apikeyauth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === "function"
            ? await configuration.apiKey("api_key")
            : await configuration.apiKey;
        localVarQueryParameter["api_key"] = localVarApiKeyValue;
      }

      // authentication embyauth required

      localVarHeaderParameter["Content-Type"] = "application/octet-stream";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putScripterxPackagesByInstallationidByFunction: async (
      body: Object,
      installationId: string,
      _function: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling putScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter 'installationId' is not null or undefined
      if (installationId === null || installationId === undefined) {
        throw new RequiredError(
          "installationId",
          "Required parameter installationId was null or undefined when calling putScripterxPackagesByInstallationidByFunction."
        );
      }
      // verify required parameter '_function' is not null or undefined
      if (_function === null || _function === undefined) {
        throw new RequiredError(
          "_function",
          "Required parameter _function was null or undefined when calling putScripterxPackagesByInstallationidByFunction."
        );
      }
      const localVarPath = `/ScripterX/Packages/{installationId}/{function}`
        .replace(
          `{${"installationId"}}`,
          encodeURIComponent(String(installationId))
        )
        .replace(`{${"function"}}`, encodeURIComponent(String(_function)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/octet-stream";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ScripterXAPIApi - functional programming interface
 * @export
 */
export const ScripterXAPIApiFp = function (configuration?: Configuration) {
  return {
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).deleteScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve ScripterX Change Log --- Requires authentication as user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScripterxChangelog(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).getScripterxChangelog(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).getScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get ScripterX Package Config Interface --- Requires authentication as user
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScripterxPackagesGetconfiginterfaceByInstallationid(
      installationId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).getScripterxPackagesGetconfiginterfaceByInstallationid(
        installationId,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get Installed Package Information --- Requires authentication as administrator
     * @summary Get Installed Package Information
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScripterxPackagesInfoByInstallationid(
      installationId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EmbyScripterXPackagesPackageInfo>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).getScripterxPackagesInfoByInstallationid(installationId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
     * @summary Get a list of Installed Packages with PackageId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScripterxPackagesInstancesByPackageid(
      packageId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<EmbyScripterXPackagesPackageInfo>>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).getScripterxPackagesInstancesByPackageid(packageId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Reload a ScripterX Package Instance --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScripterxPackagesReloadByInstallationid(
      installationId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EmbyScripterXPackagesPackageReloadResult>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).getScripterxPackagesReloadByInstallationid(installationId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Uninstall a ScripterX Package --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScripterxPackagesRemoveByInstallationid(
      installationId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EmbyScripterXPackagesPackageUninstallResult>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).getScripterxPackagesRemoveByInstallationid(installationId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).headScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).optionsScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).patchScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postScripterxPackagesByInstallationidByFunction(
      body: Object,
      installationId: string,
      _function: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).postScripterxPackagesByInstallationidByFunction(
        body,
        installationId,
        _function,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Save Package Configuration --- Requires authentication as administrator
     * @summary Save Package Configuration
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postScripterxPackagesSaveconfigByInstallationid(
      body: Object,
      installationId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).postScripterxPackagesSaveconfigByInstallationid(
        body,
        installationId,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Upload ZIP Package to ScripterX --- Requires authentication as administrator
     * @summary Upload ZIP Package to ScripterX
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postScripterxPackagesUpload(
      body: Object,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EmbyScripterXPackagesPackageInstallerResult>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).postScripterxPackagesUpload(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putScripterxPackagesByInstallationidByFunction(
      body: Object,
      installationId: string,
      _function: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await ScripterXAPIApiAxiosParamCreator(
        configuration
      ).putScripterxPackagesByInstallationidByFunction(
        body,
        installationId,
        _function,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ScripterXAPIApi - factory interface
 * @export
 */
export const ScripterXAPIApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): AxiosPromise<any> {
      return ScripterXAPIApiFp(configuration)
        .deleteScripterxPackagesByInstallationidByFunction(
          installationId,
          _function,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve ScripterX Change Log --- Requires authentication as user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxChangelog(options?: any): AxiosPromise<string> {
      return ScripterXAPIApiFp(configuration)
        .getScripterxChangelog(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): AxiosPromise<any> {
      return ScripterXAPIApiFp(configuration)
        .getScripterxPackagesByInstallationidByFunction(
          installationId,
          _function,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get ScripterX Package Config Interface --- Requires authentication as user
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesGetconfiginterfaceByInstallationid(
      installationId: string,
      options?: any
    ): AxiosPromise<string> {
      return ScripterXAPIApiFp(configuration)
        .getScripterxPackagesGetconfiginterfaceByInstallationid(
          installationId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get Installed Package Information --- Requires authentication as administrator
     * @summary Get Installed Package Information
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesInfoByInstallationid(
      installationId: string,
      options?: any
    ): AxiosPromise<EmbyScripterXPackagesPackageInfo> {
      return ScripterXAPIApiFp(configuration)
        .getScripterxPackagesInfoByInstallationid(installationId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
     * @summary Get a list of Installed Packages with PackageId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesInstancesByPackageid(
      packageId: string,
      options?: any
    ): AxiosPromise<Array<EmbyScripterXPackagesPackageInfo>> {
      return ScripterXAPIApiFp(configuration)
        .getScripterxPackagesInstancesByPackageid(packageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Reload a ScripterX Package Instance --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesReloadByInstallationid(
      installationId: string,
      options?: any
    ): AxiosPromise<EmbyScripterXPackagesPackageReloadResult> {
      return ScripterXAPIApiFp(configuration)
        .getScripterxPackagesReloadByInstallationid(installationId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Uninstall a ScripterX Package --- Requires authentication as administrator
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScripterxPackagesRemoveByInstallationid(
      installationId: string,
      options?: any
    ): AxiosPromise<EmbyScripterXPackagesPackageUninstallResult> {
      return ScripterXAPIApiFp(configuration)
        .getScripterxPackagesRemoveByInstallationid(installationId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): AxiosPromise<any> {
      return ScripterXAPIApiFp(configuration)
        .headScripterxPackagesByInstallationidByFunction(
          installationId,
          _function,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): AxiosPromise<any> {
      return ScripterXAPIApiFp(configuration)
        .optionsScripterxPackagesByInstallationidByFunction(
          installationId,
          _function,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * No authentication required
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchScripterxPackagesByInstallationidByFunction(
      installationId: string,
      _function: string,
      options?: any
    ): AxiosPromise<any> {
      return ScripterXAPIApiFp(configuration)
        .patchScripterxPackagesByInstallationidByFunction(
          installationId,
          _function,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postScripterxPackagesByInstallationidByFunction(
      body: Object,
      installationId: string,
      _function: string,
      options?: any
    ): AxiosPromise<any> {
      return ScripterXAPIApiFp(configuration)
        .postScripterxPackagesByInstallationidByFunction(
          body,
          installationId,
          _function,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Save Package Configuration --- Requires authentication as administrator
     * @summary Save Package Configuration
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postScripterxPackagesSaveconfigByInstallationid(
      body: Object,
      installationId: string,
      options?: any
    ): AxiosPromise<string> {
      return ScripterXAPIApiFp(configuration)
        .postScripterxPackagesSaveconfigByInstallationid(
          body,
          installationId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Upload ZIP Package to ScripterX --- Requires authentication as administrator
     * @summary Upload ZIP Package to ScripterX
     * @param {Object} body Binary stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postScripterxPackagesUpload(
      body: Object,
      options?: any
    ): AxiosPromise<EmbyScripterXPackagesPackageInstallerResult> {
      return ScripterXAPIApiFp(configuration)
        .postScripterxPackagesUpload(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * No authentication required
     * @param {Object} body Binary stream
     * @param {string} installationId
     * @param {string} _function
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putScripterxPackagesByInstallationidByFunction(
      body: Object,
      installationId: string,
      _function: string,
      options?: any
    ): AxiosPromise<any> {
      return ScripterXAPIApiFp(configuration)
        .putScripterxPackagesByInstallationidByFunction(
          body,
          installationId,
          _function,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ScripterXAPIApi - object-oriented interface
 * @export
 * @class ScripterXAPIApi
 * @extends {BaseAPI}
 */
export class ScripterXAPIApi extends BaseAPI {
  /**
   * No authentication required
   * @param {string} installationId
   * @param {string} _function
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public deleteScripterxPackagesByInstallationidByFunction(
    installationId: string,
    _function: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .deleteScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieve ScripterX Change Log --- Requires authentication as user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public getScripterxChangelog(options?: any) {
    return ScripterXAPIApiFp(this.configuration)
      .getScripterxChangelog(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * No authentication required
   * @param {string} installationId
   * @param {string} _function
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public getScripterxPackagesByInstallationidByFunction(
    installationId: string,
    _function: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .getScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get ScripterX Package Config Interface --- Requires authentication as user
   * @param {string} installationId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public getScripterxPackagesGetconfiginterfaceByInstallationid(
    installationId: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .getScripterxPackagesGetconfiginterfaceByInstallationid(
        installationId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get Installed Package Information --- Requires authentication as administrator
   * @summary Get Installed Package Information
   * @param {string} installationId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public getScripterxPackagesInfoByInstallationid(
    installationId: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .getScripterxPackagesInfoByInstallationid(installationId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Get a list of Installed Packages with PackageId --- Requires authentication as administrator
   * @summary Get a list of Installed Packages with PackageId
   * @param {string} packageId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public getScripterxPackagesInstancesByPackageid(
    packageId: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .getScripterxPackagesInstancesByPackageid(packageId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Reload a ScripterX Package Instance --- Requires authentication as administrator
   * @param {string} installationId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public getScripterxPackagesReloadByInstallationid(
    installationId: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .getScripterxPackagesReloadByInstallationid(installationId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Uninstall a ScripterX Package --- Requires authentication as administrator
   * @param {string} installationId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public getScripterxPackagesRemoveByInstallationid(
    installationId: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .getScripterxPackagesRemoveByInstallationid(installationId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * No authentication required
   * @param {string} installationId
   * @param {string} _function
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public headScripterxPackagesByInstallationidByFunction(
    installationId: string,
    _function: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .headScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * No authentication required
   * @param {string} installationId
   * @param {string} _function
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public optionsScripterxPackagesByInstallationidByFunction(
    installationId: string,
    _function: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .optionsScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * No authentication required
   * @param {string} installationId
   * @param {string} _function
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public patchScripterxPackagesByInstallationidByFunction(
    installationId: string,
    _function: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .patchScripterxPackagesByInstallationidByFunction(
        installationId,
        _function,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * No authentication required
   * @param {Object} body Binary stream
   * @param {string} installationId
   * @param {string} _function
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public postScripterxPackagesByInstallationidByFunction(
    body: Object,
    installationId: string,
    _function: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .postScripterxPackagesByInstallationidByFunction(
        body,
        installationId,
        _function,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Save Package Configuration --- Requires authentication as administrator
   * @summary Save Package Configuration
   * @param {Object} body Binary stream
   * @param {string} installationId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public postScripterxPackagesSaveconfigByInstallationid(
    body: Object,
    installationId: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .postScripterxPackagesSaveconfigByInstallationid(
        body,
        installationId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Upload ZIP Package to ScripterX --- Requires authentication as administrator
   * @summary Upload ZIP Package to ScripterX
   * @param {Object} body Binary stream
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public postScripterxPackagesUpload(body: Object, options?: any) {
    return ScripterXAPIApiFp(this.configuration)
      .postScripterxPackagesUpload(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * No authentication required
   * @param {Object} body Binary stream
   * @param {string} installationId
   * @param {string} _function
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScripterXAPIApi
   */
  public putScripterxPackagesByInstallationidByFunction(
    body: Object,
    installationId: string,
    _function: string,
    options?: any
  ) {
    return ScripterXAPIApiFp(this.configuration)
      .putScripterxPackagesByInstallationidByFunction(
        body,
        installationId,
        _function,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
