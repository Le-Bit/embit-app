/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.7.0.17
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI } from "../base";
/**
 * DiskSpaceServiceApi - axios parameter creator
 * @export
 */
export const DiskSpaceServiceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * No authentication required
     * @summary Get Drive Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGetdrivedata: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/GetDriveData`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * No authentication required
     * @summary Get Total Storage  Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGettotalstorage: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/GetTotalStorage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DiskSpaceServiceApi - functional programming interface
 * @export
 */
export const DiskSpaceServiceApiFp = function (configuration?: Configuration) {
  return {
    /**
     * No authentication required
     * @summary Get Drive Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGetdrivedata(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await DiskSpaceServiceApiAxiosParamCreator(
        configuration
      ).getGetdrivedata(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * No authentication required
     * @summary Get Total Storage  Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGettotalstorage(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await DiskSpaceServiceApiAxiosParamCreator(
        configuration
      ).getGettotalstorage(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DiskSpaceServiceApi - factory interface
 * @export
 */
export const DiskSpaceServiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * No authentication required
     * @summary Get Drive Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGetdrivedata(options?: any): AxiosPromise<string> {
      return DiskSpaceServiceApiFp(configuration)
        .getGetdrivedata(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * No authentication required
     * @summary Get Total Storage  Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGettotalstorage(options?: any): AxiosPromise<string> {
      return DiskSpaceServiceApiFp(configuration)
        .getGettotalstorage(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DiskSpaceServiceApi - object-oriented interface
 * @export
 * @class DiskSpaceServiceApi
 * @extends {BaseAPI}
 */
export class DiskSpaceServiceApi extends BaseAPI {
  /**
   * No authentication required
   * @summary Get Drive Data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiskSpaceServiceApi
   */
  public getGetdrivedata(options?: any) {
    return DiskSpaceServiceApiFp(this.configuration)
      .getGetdrivedata(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * No authentication required
   * @summary Get Total Storage  Data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiskSpaceServiceApi
   */
  public getGettotalstorage(options?: any) {
    return DiskSpaceServiceApiFp(this.configuration)
      .getGettotalstorage(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
